{"traceEvents": [{"ph": "M", "pid": 106699, "tid": 106699, "name": "process_name", "args": {"name": "MainProcess"}}, {"ph": "M", "pid": 106699, "tid": 106699, "name": "thread_name", "args": {"name": "MainThread"}}, {"pid": 106699, "tid": 106699, "ts": 58221758713.106, "ph": "X", "cat": "fee", "dur": 0.08, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221758713.848, "ph": "X", "cat": "fee", "dur": 0.2, "name": "__init__ (<frozen importlib._bootstrap>:165)"}, {"pid": 106699, "tid": 106699, "ts": 58221758714.709, "ph": "X", "cat": "fee", "dur": 0.161, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758715.952, "ph": "X", "cat": "fee", "dur": 0.16, "name": "_thread.allocate_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758716.272, "ph": "X", "cat": "fee", "dur": 0.08, "name": "_thread.allocate_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758715.811, "ph": "X", "cat": "fee", "dur": 0.762, "name": "__init__ (<frozen importlib._bootstrap>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221758717.414, "ph": "X", "cat": "fee", "dur": 0.101, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758714.529, "ph": "X", "cat": "fee", "dur": 3.086, "name": "_get_module_lock (<frozen importlib._bootstrap>:179)"}, {"pid": 106699, "tid": 106699, "ts": 58221758718.046, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_thread.get_ident"}, {"pid": 106699, "tid": 106699, "ts": 58221758719.228, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_thread.lock.__exit__"}, {"pid": 106699, "tid": 106699, "ts": 58221758717.895, "ph": "X", "cat": "fee", "dur": 1.714, "name": "acquire (<frozen importlib._bootstrap>:100)"}, {"pid": 106699, "tid": 106699, "ts": 58221758714.329, "ph": "X", "cat": "fee", "dur": 5.4, "name": "__enter__ (<frozen importlib._bootstrap>:169)"}, {"pid": 106699, "tid": 106699, "ts": 58221758720.009, "ph": "X", "cat": "fee", "dur": 0.07, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221758720.49, "ph": "X", "cat": "fee", "dur": 0.14, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221758721.833, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758721.723, "ph": "X", "cat": "fee", "dur": 0.24, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221758722.875, "ph": "X", "cat": "fee", "dur": 0.431, "name": "builtins.locals"}, {"pid": 106699, "tid": 106699, "ts": 58221758723.406, "ph": "X", "cat": "fee", "dur": 0.631, "name": "str.format"}, {"pid": 106699, "tid": 106699, "ts": 58221758724.378, "ph": "X", "cat": "fee", "dur": 0.44, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221758725.019, "ph": "X", "cat": "fee", "dur": 0.06, "name": "<lambda> (/home/tim/.local/lib/python3.11/site-packages/_distutils_hack/__init__.py:96)"}, {"pid": 106699, "tid": 106699, "ts": 58221758722.534, "ph": "X", "cat": "fee", "dur": 2.675, "name": "find_spec (/home/tim/.local/lib/python3.11/site-packages/_distutils_hack/__init__.py:89)"}, {"pid": 106699, "tid": 106699, "ts": 58221758725.72, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758725.59, "ph": "X", "cat": "fee", "dur": 0.26, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221758726.411, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758726.331, "ph": "X", "cat": "fee", "dur": 0.161, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221758726.982, "ph": "X", "cat": "fee", "dur": 0.431, "name": "_imp.is_builtin"}, {"pid": 106699, "tid": 106699, "ts": 58221758726.842, "ph": "X", "cat": "fee", "dur": 0.681, "name": "find_spec (<frozen importlib._bootstrap>:748)"}, {"pid": 106699, "tid": 106699, "ts": 58221758727.814, "ph": "X", "cat": "fee", "dur": 0.04, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758727.734, "ph": "X", "cat": "fee", "dur": 0.16, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221758728.165, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758728.105, "ph": "X", "cat": "fee", "dur": 0.14, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221758728.926, "ph": "X", "cat": "fee", "dur": 0.311, "name": "_imp.find_frozen"}, {"pid": 106699, "tid": 106699, "ts": 58221758728.786, "ph": "X", "cat": "fee", "dur": 0.501, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:233)"}, {"pid": 106699, "tid": 106699, "ts": 58221758728.545, "ph": "X", "cat": "fee", "dur": 0.922, "name": "find_spec (<frozen importlib._bootstrap>:920)"}, {"pid": 106699, "tid": 106699, "ts": 58221758729.738, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758729.647, "ph": "X", "cat": "fee", "dur": 0.261, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221758730.198, "ph": "X", "cat": "fee", "dur": 0.041, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758730.118, "ph": "X", "cat": "fee", "dur": 0.151, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221758731.301, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221758731.591, "ph": "X", "cat": "fee", "dur": 0.361, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221758732.212, "ph": "X", "cat": "fee", "dur": 0.12, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221758732.683, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221758733.184, "ph": "X", "cat": "fee", "dur": 3.226, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221758733.014, "ph": "X", "cat": "fee", "dur": 3.466, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221758737.202, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221758738.564, "ph": "X", "cat": "fee", "dur": 0.12, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758738.895, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758738.324, "ph": "X", "cat": "fee", "dur": 0.741, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221758739.245, "ph": "X", "cat": "fee", "dur": 0.251, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221758737.993, "ph": "X", "cat": "fee", "dur": 1.613, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221758740.067, "ph": "X", "cat": "fee", "dur": 0.271, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221758741.349, "ph": "X", "cat": "fee", "dur": 0.071, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758741.59, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758741.179, "ph": "X", "cat": "fee", "dur": 0.501, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221758741.78, "ph": "X", "cat": "fee", "dur": 0.131, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221758740.989, "ph": "X", "cat": "fee", "dur": 0.992, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221758742.281, "ph": "X", "cat": "fee", "dur": 0.12, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221758743.143, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758743.313, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758743.013, "ph": "X", "cat": "fee", "dur": 0.41, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221758743.504, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221758742.852, "ph": "X", "cat": "fee", "dur": 0.802, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221758743.854, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221758744.596, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758744.726, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758744.465, "ph": "X", "cat": "fee", "dur": 0.361, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221758744.906, "ph": "X", "cat": "fee", "dur": 0.12, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221758744.345, "ph": "X", "cat": "fee", "dur": 0.731, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221758745.237, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221758746.028, "ph": "X", "cat": "fee", "dur": 2.254, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221758745.908, "ph": "X", "cat": "fee", "dur": 2.435, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221758745.818, "ph": "X", "cat": "fee", "dur": 2.835, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:150)"}, {"pid": 106699, "tid": 106699, "ts": 58221758745.658, "ph": "X", "cat": "fee", "dur": 3.226, "name": "_path_isfile (<frozen importlib._bootstrap_external>:159)"}, {"pid": 106699, "tid": 106699, "ts": 58221758749.485, "ph": "X", "cat": "fee", "dur": 0.16, "name": "__init__ (<frozen importlib._bootstrap_external>:1097)"}, {"pid": 106699, "tid": 106699, "ts": 58221758750.186, "ph": "X", "cat": "fee", "dur": 0.04, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221758750.507, "ph": "X", "cat": "fee", "dur": 0.29, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221758750.376, "ph": "X", "cat": "fee", "dur": 0.481, "name": "_path_isabs (<frozen importlib._bootstrap_external>:180)"}, {"pid": 106699, "tid": 106699, "ts": 58221758751.328, "ph": "X", "cat": "fee", "dur": 0.361, "name": "__init__ (<frozen importlib._bootstrap>:357)"}, {"pid": 106699, "tid": 106699, "ts": 58221758750.006, "ph": "X", "cat": "fee", "dur": 2.234, "name": "spec_from_file_location (<frozen importlib._bootstrap_external>:778)"}, {"pid": 106699, "tid": 106699, "ts": 58221758749.224, "ph": "X", "cat": "fee", "dur": 3.126, "name": "_get_spec (<frozen importlib._bootstrap_external>:1599)"}, {"pid": 106699, "tid": 106699, "ts": 58221758732.553, "ph": "X", "cat": "fee", "dur": 19.957, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221758731.04, "ph": "X", "cat": "fee", "dur": 21.791, "name": "_get_spec (<frozen importlib._bootstrap_external>:1464)"}, {"pid": 106699, "tid": 106699, "ts": 58221758730.599, "ph": "X", "cat": "fee", "dur": 22.422, "name": "find_spec (<frozen importlib._bootstrap_external>:1496)"}, {"pid": 106699, "tid": 106699, "ts": 58221758753.372, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758753.232, "ph": "X", "cat": "fee", "dur": 0.31, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221758720.981, "ph": "X", "cat": "fee", "dur": 32.892, "name": "_find_spec (<frozen importlib._bootstrap>:1054)"}, {"pid": 106699, "tid": 106699, "ts": 58221758754.334, "ph": "X", "cat": "fee", "dur": 0.12, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221758754.765, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221758755.035, "ph": "X", "cat": "fee", "dur": 0.06, "name": "create_module (<frozen importlib._bootstrap_external>:931)"}, {"pid": 106699, "tid": 106699, "ts": 58221758755.336, "ph": "X", "cat": "fee", "dur": 0.471, "name": "_new_module (<frozen importlib._bootstrap>:48)"}, {"pid": 106699, "tid": 106699, "ts": 58221758756.227, "ph": "X", "cat": "fee", "dur": 0.101, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221758756.448, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221758756.809, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221758757.179, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221758756.999, "ph": "X", "cat": "fee", "dur": 0.411, "name": "parent (<frozen importlib._bootstrap>:405)"}, {"pid": 106699, "tid": 106699, "ts": 58221758757.69, "ph": "X", "cat": "fee", "dur": 1.132, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221758759.063, "ph": "X", "cat": "fee", "dur": 0.07, "name": "has_location (<frozen importlib._bootstrap>:413)"}, {"pid": 106699, "tid": 106699, "ts": 58221758759.333, "ph": "X", "cat": "fee", "dur": 0.732, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221758760.455, "ph": "X", "cat": "fee", "dur": 0.612, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221758761.808, "ph": "X", "cat": "fee", "dur": 0.18, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221758762.399, "ph": "X", "cat": "fee", "dur": 0.05, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221758763.491, "ph": "X", "cat": "fee", "dur": 0.711, "name": "str.rfind"}, {"pid": 106699, "tid": 106699, "ts": 58221758763.291, "ph": "X", "cat": "fee", "dur": 1.192, "name": "<genexpr> (<frozen importlib._bootstrap_external>:134)"}, {"pid": 106699, "tid": 106699, "ts": 58221758764.613, "ph": "X", "cat": "fee", "dur": 0.13, "name": "<genexpr> (<frozen importlib._bootstrap_external>:134)"}, {"pid": 106699, "tid": 106699, "ts": 58221758763.08, "ph": "X", "cat": "fee", "dur": 1.894, "name": "builtins.max"}, {"pid": 106699, "tid": 106699, "ts": 58221758762.639, "ph": "X", "cat": "fee", "dur": 3.267, "name": "_path_split (<frozen importlib._bootstrap_external>:132)"}, {"pid": 106699, "tid": 106699, "ts": 58221758766.186, "ph": "X", "cat": "fee", "dur": 0.11, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221758766.847, "ph": "X", "cat": "fee", "dur": 0.151, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221758768.39, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758768.591, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758768.771, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758768.18, "ph": "X", "cat": "fee", "dur": 0.681, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221758769.011, "ph": "X", "cat": "fee", "dur": 0.181, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221758767.939, "ph": "X", "cat": "fee", "dur": 1.333, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221758762.269, "ph": "X", "cat": "fee", "dur": 7.103, "name": "cache_from_source (<frozen importlib._bootstrap_external>:437)"}, {"pid": 106699, "tid": 106699, "ts": 58221758761.537, "ph": "X", "cat": "fee", "dur": 8.016, "name": "_get_cached (<frozen importlib._bootstrap_external>:567)"}, {"pid": 106699, "tid": 106699, "ts": 58221758761.207, "ph": "X", "cat": "fee", "dur": 8.516, "name": "cached (<frozen importlib._bootstrap>:392)"}, {"pid": 106699, "tid": 106699, "ts": 58221758769.883, "ph": "X", "cat": "fee", "dur": 0.11, "name": "cached (<frozen importlib._bootstrap>:392)"}, {"pid": 106699, "tid": 106699, "ts": 58221758756.057, "ph": "X", "cat": "fee", "dur": 14.057, "name": "_init_module_attrs (<frozen importlib._bootstrap>:493)"}, {"pid": 106699, "tid": 106699, "ts": 58221758754.644, "ph": "X", "cat": "fee", "dur": 15.58, "name": "module_from_spec (<frozen importlib._bootstrap>:566)"}, {"pid": 106699, "tid": 106699, "ts": 58221758771.646, "ph": "X", "cat": "fee", "dur": 0.071, "name": "get_filename (<frozen importlib._bootstrap_external>:1122)"}, {"pid": 106699, "tid": 106699, "ts": 58221758771.125, "ph": "X", "cat": "fee", "dur": 0.692, "name": "_check_name_wrapper (<frozen importlib._bootstrap_external>:599)"}, {"pid": 106699, "tid": 106699, "ts": 58221758772.228, "ph": "X", "cat": "fee", "dur": 0.04, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221758772.919, "ph": "X", "cat": "fee", "dur": 0.14, "name": "str.rfind"}, {"pid": 106699, "tid": 106699, "ts": 58221758772.779, "ph": "X", "cat": "fee", "dur": 0.32, "name": "<genexpr> (<frozen importlib._bootstrap_external>:134)"}, {"pid": 106699, "tid": 106699, "ts": 58221758773.179, "ph": "X", "cat": "fee", "dur": 0.09, "name": "<genexpr> (<frozen importlib._bootstrap_external>:134)"}, {"pid": 106699, "tid": 106699, "ts": 58221758772.688, "ph": "X", "cat": "fee", "dur": 0.692, "name": "builtins.max"}, {"pid": 106699, "tid": 106699, "ts": 58221758772.408, "ph": "X", "cat": "fee", "dur": 1.362, "name": "_path_split (<frozen importlib._bootstrap_external>:132)"}, {"pid": 106699, "tid": 106699, "ts": 58221758773.961, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221758774.372, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221758775.393, "ph": "X", "cat": "fee", "dur": 0.051, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758775.554, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758775.684, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758775.203, "ph": "X", "cat": "fee", "dur": 0.581, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221758775.874, "ph": "X", "cat": "fee", "dur": 0.131, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221758775.003, "ph": "X", "cat": "fee", "dur": 1.062, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221758772.107, "ph": "X", "cat": "fee", "dur": 4.018, "name": "cache_from_source (<frozen importlib._bootstrap_external>:437)"}, {"pid": 106699, "tid": 106699, "ts": 58221758776.576, "ph": "X", "cat": "fee", "dur": 1.873, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221758776.455, "ph": "X", "cat": "fee", "dur": 2.044, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221758776.355, "ph": "X", "cat": "fee", "dur": 2.465, "name": "path_stats (<frozen importlib._bootstrap_external>:1146)"}, {"pid": 106699, "tid": 106699, "ts": 58221758779.812, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221758780.182, "ph": "X", "cat": "fee", "dur": 8.607, "name": "io.open_code"}, {"pid": 106699, "tid": 106699, "ts": 58221758789.71, "ph": "X", "cat": "fee", "dur": 4.128, "name": "_io.BufferedReader.read"}, {"pid": 106699, "tid": 106699, "ts": 58221758793.978, "ph": "X", "cat": "fee", "dur": 1.834, "name": "_io.BufferedReader.__exit__"}, {"pid": 106699, "tid": 106699, "ts": 58221758779.611, "ph": "X", "cat": "fee", "dur": 16.321, "name": "get_data (<frozen importlib._bootstrap_external>:1127)"}, {"pid": 106699, "tid": 106699, "ts": 58221758797.305, "ph": "X", "cat": "fee", "dur": 0.13, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221758797.886, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221758798.226, "ph": "X", "cat": "fee", "dur": 0.211, "name": "type.from_bytes"}, {"pid": 106699, "tid": 106699, "ts": 58221758797.786, "ph": "X", "cat": "fee", "dur": 0.711, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:84)"}, {"pid": 106699, "tid": 106699, "ts": 58221758796.744, "ph": "X", "cat": "fee", "dur": 1.953, "name": "_classify_pyc (<frozen importlib._bootstrap_external>:642)"}, {"pid": 106699, "tid": 106699, "ts": 58221758799.91, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221758800.06, "ph": "X", "cat": "fee", "dur": 0.06, "name": "type.from_bytes"}, {"pid": 106699, "tid": 106699, "ts": 58221758799.86, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:84)"}, {"pid": 106699, "tid": 106699, "ts": 58221758800.601, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221758800.731, "ph": "X", "cat": "fee", "dur": 0.07, "name": "type.from_bytes"}, {"pid": 106699, "tid": 106699, "ts": 58221758800.531, "ph": "X", "cat": "fee", "dur": 0.31, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:84)"}, {"pid": 106699, "tid": 106699, "ts": 58221758799.649, "ph": "X", "cat": "fee", "dur": 1.383, "name": "_validate_timestamp_pyc (<frozen importlib._bootstrap_external>:675)"}, {"pid": 106699, "tid": 106699, "ts": 58221758801.372, "ph": "X", "cat": "fee", "dur": 0.291, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221758802.254, "ph": "X", "cat": "fee", "dur": 26.79, "name": "marshal.loads"}, {"pid": 106699, "tid": 106699, "ts": 58221758829.235, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221758829.605, "ph": "X", "cat": "fee", "dur": 0.211, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221758830.086, "ph": "X", "cat": "fee", "dur": 0.471, "name": "_imp._fix_co_filename"}, {"pid": 106699, "tid": 106699, "ts": 58221758801.994, "ph": "X", "cat": "fee", "dur": 28.633, "name": "_compile_bytecode (<frozen importlib._bootstrap_external>:727)"}, {"pid": 106699, "tid": 106699, "ts": 58221758770.905, "ph": "X", "cat": "fee", "dur": 59.833, "name": "get_code (<frozen importlib._bootstrap_external>:1007)"}, {"pid": 106699, "tid": 106699, "ts": 58221758836.829, "ph": "X", "cat": "fee", "dur": 1.082, "name": "__getattr__ (<frozen io>:61)"}, {"pid": 106699, "tid": 106699, "ts": 58221758840.406, "ph": "X", "cat": "fee", "dur": 0.08, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221758840.887, "ph": "X", "cat": "fee", "dur": 0.18, "name": "__init__ (<frozen importlib._bootstrap>:165)"}, {"pid": 106699, "tid": 106699, "ts": 58221758841.678, "ph": "X", "cat": "fee", "dur": 0.08, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758842.82, "ph": "X", "cat": "fee", "dur": 0.161, "name": "_thread.allocate_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758843.151, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_thread.allocate_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758842.68, "ph": "X", "cat": "fee", "dur": 0.741, "name": "__init__ (<frozen importlib._bootstrap>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221758844.153, "ph": "X", "cat": "fee", "dur": 0.08, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758841.548, "ph": "X", "cat": "fee", "dur": 2.765, "name": "_get_module_lock (<frozen importlib._bootstrap>:179)"}, {"pid": 106699, "tid": 106699, "ts": 58221758844.674, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_thread.get_ident"}, {"pid": 106699, "tid": 106699, "ts": 58221758845.766, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_thread.lock.__exit__"}, {"pid": 106699, "tid": 106699, "ts": 58221758844.564, "ph": "X", "cat": "fee", "dur": 1.532, "name": "acquire (<frozen importlib._bootstrap>:100)"}, {"pid": 106699, "tid": 106699, "ts": 58221758841.378, "ph": "X", "cat": "fee", "dur": 4.829, "name": "__enter__ (<frozen importlib._bootstrap>:169)"}, {"pid": 106699, "tid": 106699, "ts": 58221758846.467, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221758846.828, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221758848.02, "ph": "X", "cat": "fee", "dur": 0.04, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758847.91, "ph": "X", "cat": "fee", "dur": 0.26, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221758848.792, "ph": "X", "cat": "fee", "dur": 0.42, "name": "builtins.locals"}, {"pid": 106699, "tid": 106699, "ts": 58221758849.383, "ph": "X", "cat": "fee", "dur": 0.461, "name": "str.format"}, {"pid": 106699, "tid": 106699, "ts": 58221758850.124, "ph": "X", "cat": "fee", "dur": 0.23, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221758850.555, "ph": "X", "cat": "fee", "dur": 0.06, "name": "<lambda> (/home/tim/.local/lib/python3.11/site-packages/_distutils_hack/__init__.py:96)"}, {"pid": 106699, "tid": 106699, "ts": 58221758848.541, "ph": "X", "cat": "fee", "dur": 2.164, "name": "find_spec (/home/tim/.local/lib/python3.11/site-packages/_distutils_hack/__init__.py:89)"}, {"pid": 106699, "tid": 106699, "ts": 58221758851.076, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758850.986, "ph": "X", "cat": "fee", "dur": 0.17, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221758851.637, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758851.557, "ph": "X", "cat": "fee", "dur": 0.15, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221758852.088, "ph": "X", "cat": "fee", "dur": 0.35, "name": "_imp.is_builtin"}, {"pid": 106699, "tid": 106699, "ts": 58221758851.968, "ph": "X", "cat": "fee", "dur": 0.561, "name": "find_spec (<frozen importlib._bootstrap>:748)"}, {"pid": 106699, "tid": 106699, "ts": 58221758852.809, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758852.729, "ph": "X", "cat": "fee", "dur": 0.16, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221758853.17, "ph": "X", "cat": "fee", "dur": 0.04, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758853.11, "ph": "X", "cat": "fee", "dur": 0.13, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221758853.791, "ph": "X", "cat": "fee", "dur": 0.311, "name": "_imp.find_frozen"}, {"pid": 106699, "tid": 106699, "ts": 58221758853.651, "ph": "X", "cat": "fee", "dur": 0.531, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:233)"}, {"pid": 106699, "tid": 106699, "ts": 58221758853.44, "ph": "X", "cat": "fee", "dur": 0.892, "name": "find_spec (<frozen importlib._bootstrap>:920)"}, {"pid": 106699, "tid": 106699, "ts": 58221758854.612, "ph": "X", "cat": "fee", "dur": 0.041, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758854.522, "ph": "X", "cat": "fee", "dur": 0.161, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221758854.993, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758854.903, "ph": "X", "cat": "fee", "dur": 0.16, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221758855.825, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221758856.095, "ph": "X", "cat": "fee", "dur": 0.311, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221758856.626, "ph": "X", "cat": "fee", "dur": 0.121, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221758857.067, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221758857.548, "ph": "X", "cat": "fee", "dur": 2.675, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221758857.408, "ph": "X", "cat": "fee", "dur": 2.875, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221758860.804, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221758862.026, "ph": "X", "cat": "fee", "dur": 0.101, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758862.297, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758861.796, "ph": "X", "cat": "fee", "dur": 0.631, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221758862.517, "ph": "X", "cat": "fee", "dur": 0.201, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221758861.536, "ph": "X", "cat": "fee", "dur": 1.292, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221758863.229, "ph": "X", "cat": "fee", "dur": 0.19, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221758864.281, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758864.501, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758864.12, "ph": "X", "cat": "fee", "dur": 0.461, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221758864.681, "ph": "X", "cat": "fee", "dur": 0.091, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221758863.96, "ph": "X", "cat": "fee", "dur": 0.882, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221758865.122, "ph": "X", "cat": "fee", "dur": 0.131, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221758865.954, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758866.144, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758865.834, "ph": "X", "cat": "fee", "dur": 0.481, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221758866.405, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221758865.703, "ph": "X", "cat": "fee", "dur": 0.842, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221758866.725, "ph": "X", "cat": "fee", "dur": 0.121, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221758867.467, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758867.597, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758867.346, "ph": "X", "cat": "fee", "dur": 0.361, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221758867.767, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221758867.206, "ph": "X", "cat": "fee", "dur": 0.671, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221758868.028, "ph": "X", "cat": "fee", "dur": 0.12, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221758868.739, "ph": "X", "cat": "fee", "dur": 1.914, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221758868.629, "ph": "X", "cat": "fee", "dur": 2.064, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221758868.549, "ph": "X", "cat": "fee", "dur": 2.394, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:150)"}, {"pid": 106699, "tid": 106699, "ts": 58221758868.418, "ph": "X", "cat": "fee", "dur": 2.726, "name": "_path_isfile (<frozen importlib._bootstrap_external>:159)"}, {"pid": 106699, "tid": 106699, "ts": 58221758871.604, "ph": "X", "cat": "fee", "dur": 0.161, "name": "__init__ (<frozen importlib._bootstrap_external>:1097)"}, {"pid": 106699, "tid": 106699, "ts": 58221758872.236, "ph": "X", "cat": "fee", "dur": 0.06, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221758872.536, "ph": "X", "cat": "fee", "dur": 0.251, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221758872.416, "ph": "X", "cat": "fee", "dur": 0.421, "name": "_path_isabs (<frozen importlib._bootstrap_external>:180)"}, {"pid": 106699, "tid": 106699, "ts": 58221758873.258, "ph": "X", "cat": "fee", "dur": 0.37, "name": "__init__ (<frozen importlib._bootstrap>:357)"}, {"pid": 106699, "tid": 106699, "ts": 58221758872.075, "ph": "X", "cat": "fee", "dur": 2.225, "name": "spec_from_file_location (<frozen importlib._bootstrap_external>:778)"}, {"pid": 106699, "tid": 106699, "ts": 58221758871.364, "ph": "X", "cat": "fee", "dur": 3.056, "name": "_get_spec (<frozen importlib._bootstrap_external>:1599)"}, {"pid": 106699, "tid": 106699, "ts": 58221758856.937, "ph": "X", "cat": "fee", "dur": 17.673, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221758855.614, "ph": "X", "cat": "fee", "dur": 19.237, "name": "_get_spec (<frozen importlib._bootstrap_external>:1464)"}, {"pid": 106699, "tid": 106699, "ts": 58221758855.274, "ph": "X", "cat": "fee", "dur": 19.747, "name": "find_spec (<frozen importlib._bootstrap_external>:1496)"}, {"pid": 106699, "tid": 106699, "ts": 58221758875.392, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758875.241, "ph": "X", "cat": "fee", "dur": 0.321, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221758847.309, "ph": "X", "cat": "fee", "dur": 28.553, "name": "_find_spec (<frozen importlib._bootstrap>:1054)"}, {"pid": 106699, "tid": 106699, "ts": 58221758876.303, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221758876.654, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221758876.854, "ph": "X", "cat": "fee", "dur": 0.05, "name": "create_module (<frozen importlib._bootstrap_external>:931)"}, {"pid": 106699, "tid": 106699, "ts": 58221758877.105, "ph": "X", "cat": "fee", "dur": 0.381, "name": "_new_module (<frozen importlib._bootstrap>:48)"}, {"pid": 106699, "tid": 106699, "ts": 58221758877.806, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221758878.006, "ph": "X", "cat": "fee", "dur": 0.051, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221758878.347, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221758878.728, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221758878.548, "ph": "X", "cat": "fee", "dur": 0.36, "name": "parent (<frozen importlib._bootstrap>:405)"}, {"pid": 106699, "tid": 106699, "ts": 58221758879.159, "ph": "X", "cat": "fee", "dur": 0.951, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221758880.301, "ph": "X", "cat": "fee", "dur": 0.07, "name": "has_location (<frozen importlib._bootstrap>:413)"}, {"pid": 106699, "tid": 106699, "ts": 58221758880.501, "ph": "X", "cat": "fee", "dur": 0.681, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221758881.443, "ph": "X", "cat": "fee", "dur": 0.601, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221758883.176, "ph": "X", "cat": "fee", "dur": 0.301, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221758884.018, "ph": "X", "cat": "fee", "dur": 0.07, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221758885.561, "ph": "X", "cat": "fee", "dur": 0.28, "name": "str.rfind"}, {"pid": 106699, "tid": 106699, "ts": 58221758885.28, "ph": "X", "cat": "fee", "dur": 0.762, "name": "<genexpr> (<frozen importlib._bootstrap_external>:134)"}, {"pid": 106699, "tid": 106699, "ts": 58221758886.152, "ph": "X", "cat": "fee", "dur": 0.12, "name": "<genexpr> (<frozen importlib._bootstrap_external>:134)"}, {"pid": 106699, "tid": 106699, "ts": 58221758885.01, "ph": "X", "cat": "fee", "dur": 1.442, "name": "builtins.max"}, {"pid": 106699, "tid": 106699, "ts": 58221758884.358, "ph": "X", "cat": "fee", "dur": 3.016, "name": "_path_split (<frozen importlib._bootstrap_external>:132)"}, {"pid": 106699, "tid": 106699, "ts": 58221758887.895, "ph": "X", "cat": "fee", "dur": 0.16, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221758888.777, "ph": "X", "cat": "fee", "dur": 0.17, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221758891.141, "ph": "X", "cat": "fee", "dur": 0.161, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758891.622, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758891.883, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758890.46, "ph": "X", "cat": "fee", "dur": 1.573, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221758892.193, "ph": "X", "cat": "fee", "dur": 0.231, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221758890.139, "ph": "X", "cat": "fee", "dur": 2.405, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221758883.797, "ph": "X", "cat": "fee", "dur": 9.037, "name": "cache_from_source (<frozen importlib._bootstrap_external>:437)"}, {"pid": 106699, "tid": 106699, "ts": 58221758882.826, "ph": "X", "cat": "fee", "dur": 10.229, "name": "_get_cached (<frozen importlib._bootstrap_external>:567)"}, {"pid": 106699, "tid": 106699, "ts": 58221758882.194, "ph": "X", "cat": "fee", "dur": 11.101, "name": "cached (<frozen importlib._bootstrap>:392)"}, {"pid": 106699, "tid": 106699, "ts": 58221758893.576, "ph": "X", "cat": "fee", "dur": 0.12, "name": "cached (<frozen importlib._bootstrap>:392)"}, {"pid": 106699, "tid": 106699, "ts": 58221758877.666, "ph": "X", "cat": "fee", "dur": 16.2, "name": "_init_module_attrs (<frozen importlib._bootstrap>:493)"}, {"pid": 106699, "tid": 106699, "ts": 58221758876.544, "ph": "X", "cat": "fee", "dur": 17.463, "name": "module_from_spec (<frozen importlib._bootstrap>:566)"}, {"pid": 106699, "tid": 106699, "ts": 58221758895.82, "ph": "X", "cat": "fee", "dur": 0.1, "name": "get_filename (<frozen importlib._bootstrap_external>:1122)"}, {"pid": 106699, "tid": 106699, "ts": 58221758895.159, "ph": "X", "cat": "fee", "dur": 1.002, "name": "_check_name_wrapper (<frozen importlib._bootstrap_external>:599)"}, {"pid": 106699, "tid": 106699, "ts": 58221758896.682, "ph": "X", "cat": "fee", "dur": 0.07, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221758897.754, "ph": "X", "cat": "fee", "dur": 0.15, "name": "str.rfind"}, {"pid": 106699, "tid": 106699, "ts": 58221758897.543, "ph": "X", "cat": "fee", "dur": 0.431, "name": "<genexpr> (<frozen importlib._bootstrap_external>:134)"}, {"pid": 106699, "tid": 106699, "ts": 58221758898.074, "ph": "X", "cat": "fee", "dur": 0.11, "name": "<genexpr> (<frozen importlib._bootstrap_external>:134)"}, {"pid": 106699, "tid": 106699, "ts": 58221758897.403, "ph": "X", "cat": "fee", "dur": 0.972, "name": "builtins.max"}, {"pid": 106699, "tid": 106699, "ts": 58221758897.042, "ph": "X", "cat": "fee", "dur": 2.004, "name": "_path_split (<frozen importlib._bootstrap_external>:132)"}, {"pid": 106699, "tid": 106699, "ts": 58221758899.377, "ph": "X", "cat": "fee", "dur": 0.12, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221758899.948, "ph": "X", "cat": "fee", "dur": 0.11, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221758901.36, "ph": "X", "cat": "fee", "dur": 0.111, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758901.761, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758902.022, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221758901.13, "ph": "X", "cat": "fee", "dur": 1.072, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221758902.483, "ph": "X", "cat": "fee", "dur": 0.14, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221758900.849, "ph": "X", "cat": "fee", "dur": 1.914, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221758896.521, "ph": "X", "cat": "fee", "dur": 6.322, "name": "cache_from_source (<frozen importlib._bootstrap_external>:437)"}, {"pid": 106699, "tid": 106699, "ts": 58221758903.545, "ph": "X", "cat": "fee", "dur": 3.055, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221758903.384, "ph": "X", "cat": "fee", "dur": 3.286, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221758903.204, "ph": "X", "cat": "fee", "dur": 3.887, "name": "path_stats (<frozen importlib._bootstrap_external>:1146)"}, {"pid": 106699, "tid": 106699, "ts": 58221758908.213, "ph": "X", "cat": "fee", "dur": 0.141, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221758908.664, "ph": "X", "cat": "fee", "dur": 14.558, "name": "io.open_code"}, {"pid": 106699, "tid": 106699, "ts": 58221758923.993, "ph": "X", "cat": "fee", "dur": 3.827, "name": "_io.BufferedReader.read"}, {"pid": 106699, "tid": 106699, "ts": 58221758927.98, "ph": "X", "cat": "fee", "dur": 2.074, "name": "_io.BufferedReader.__exit__"}, {"pid": 106699, "tid": 106699, "ts": 58221758907.973, "ph": "X", "cat": "fee", "dur": 22.242, "name": "get_data (<frozen importlib._bootstrap_external>:1127)"}, {"pid": 106699, "tid": 106699, "ts": 58221758931.748, "ph": "X", "cat": "fee", "dur": 0.15, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221758932.379, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221758932.729, "ph": "X", "cat": "fee", "dur": 0.211, "name": "type.from_bytes"}, {"pid": 106699, "tid": 106699, "ts": 58221758932.249, "ph": "X", "cat": "fee", "dur": 0.871, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:84)"}, {"pid": 106699, "tid": 106699, "ts": 58221758931.156, "ph": "X", "cat": "fee", "dur": 2.215, "name": "_classify_pyc (<frozen importlib._bootstrap_external>:642)"}, {"pid": 106699, "tid": 106699, "ts": 58221758934.853, "ph": "X", "cat": "fee", "dur": 0.061, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221758935.114, "ph": "X", "cat": "fee", "dur": 0.09, "name": "type.from_bytes"}, {"pid": 106699, "tid": 106699, "ts": 58221758934.763, "ph": "X", "cat": "fee", "dur": 0.501, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:84)"}, {"pid": 106699, "tid": 106699, "ts": 58221758936.166, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221758936.366, "ph": "X", "cat": "fee", "dur": 0.07, "name": "type.from_bytes"}, {"pid": 106699, "tid": 106699, "ts": 58221758936.096, "ph": "X", "cat": "fee", "dur": 0.401, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:84)"}, {"pid": 106699, "tid": 106699, "ts": 58221758934.493, "ph": "X", "cat": "fee", "dur": 2.234, "name": "_validate_timestamp_pyc (<frozen importlib._bootstrap_external>:675)"}, {"pid": 106699, "tid": 106699, "ts": 58221758937.218, "ph": "X", "cat": "fee", "dur": 0.32, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221758938.1, "ph": "X", "cat": "fee", "dur": 30.647, "name": "marshal.loads"}, {"pid": 106699, "tid": 106699, "ts": 58221758969.088, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221758969.709, "ph": "X", "cat": "fee", "dur": 0.341, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221758970.571, "ph": "X", "cat": "fee", "dur": 0.621, "name": "_imp._fix_co_filename"}, {"pid": 106699, "tid": 106699, "ts": 58221758937.929, "ph": "X", "cat": "fee", "dur": 33.363, "name": "_compile_bytecode (<frozen importlib._bootstrap_external>:727)"}, {"pid": 106699, "tid": 106699, "ts": 58221758894.918, "ph": "X", "cat": "fee", "dur": 76.574, "name": "get_code (<frozen importlib._bootstrap_external>:1007)"}, {"pid": 106699, "tid": 106699, "ts": 58221758975.31, "ph": "X", "cat": "fee", "dur": 6.091, "name": "<module> (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:1)"}, {"pid": 106699, "tid": 106699, "ts": 58221758973.055, "ph": "X", "cat": "fee", "dur": 8.546, "name": "builtins.exec"}, {"pid": 106699, "tid": 106699, "ts": 58221758972.795, "ph": "X", "cat": "fee", "dur": 8.947, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:233)"}, {"pid": 106699, "tid": 106699, "ts": 58221758894.648, "ph": "X", "cat": "fee", "dur": 87.344, "name": "exec_module (<frozen importlib._bootstrap_external>:934)"}, {"pid": 106699, "tid": 106699, "ts": 58221758983.154, "ph": "X", "cat": "fee", "dur": 0.191, "name": "dict.pop"}, {"pid": 106699, "tid": 106699, "ts": 58221758983.936, "ph": "X", "cat": "fee", "dur": 0.23, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221758876.133, "ph": "X", "cat": "fee", "dur": 108.344, "name": "_load_unlocked (<frozen importlib._bootstrap>:666)"}, {"pid": 106699, "tid": 106699, "ts": 58221758846.718, "ph": "X", "cat": "fee", "dur": 138.139, "name": "_find_and_load_unlocked (<frozen importlib._bootstrap>:1120)"}, {"pid": 106699, "tid": 106699, "ts": 58221758985.649, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_thread.get_ident"}, {"pid": 106699, "tid": 106699, "ts": 58221758987.062, "ph": "X", "cat": "fee", "dur": 0.13, "name": "_thread.lock.__exit__"}, {"pid": 106699, "tid": 106699, "ts": 58221758985.499, "ph": "X", "cat": "fee", "dur": 1.803, "name": "release (<frozen importlib._bootstrap>:125)"}, {"pid": 106699, "tid": 106699, "ts": 58221758985.238, "ph": "X", "cat": "fee", "dur": 2.174, "name": "__exit__ (<frozen importlib._bootstrap>:173)"}, {"pid": 106699, "tid": 106699, "ts": 58221758988.094, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758988.374, "ph": "X", "cat": "fee", "dur": 0.07, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221758988.775, "ph": "X", "cat": "fee", "dur": 0.08, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758987.873, "ph": "X", "cat": "fee", "dur": 1.052, "name": "cb (<frozen importlib._bootstrap>:198)"}, {"pid": 106699, "tid": 106699, "ts": 58221758840.145, "ph": "X", "cat": "fee", "dur": 149.281, "name": "_find_and_load (<frozen importlib._bootstrap>:1165)"}, {"pid": 106699, "tid": 106699, "ts": 58221758997.181, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221758997.862, "ph": "X", "cat": "fee", "dur": 0.17, "name": "__init__ (<frozen importlib._bootstrap>:165)"}, {"pid": 106699, "tid": 106699, "ts": 58221758998.533, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759000.236, "ph": "X", "cat": "fee", "dur": 0.181, "name": "_thread.allocate_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759000.667, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_thread.allocate_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759000.046, "ph": "X", "cat": "fee", "dur": 1.042, "name": "__init__ (<frozen importlib._bootstrap>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759002.03, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221758998.433, "ph": "X", "cat": "fee", "dur": 3.737, "name": "_get_module_lock (<frozen importlib._bootstrap>:179)"}, {"pid": 106699, "tid": 106699, "ts": 58221759002.711, "ph": "X", "cat": "fee", "dur": 0.08, "name": "_thread.get_ident"}, {"pid": 106699, "tid": 106699, "ts": 58221759003.963, "ph": "X", "cat": "fee", "dur": 0.111, "name": "_thread.lock.__exit__"}, {"pid": 106699, "tid": 106699, "ts": 58221759002.601, "ph": "X", "cat": "fee", "dur": 1.893, "name": "acquire (<frozen importlib._bootstrap>:100)"}, {"pid": 106699, "tid": 106699, "ts": 58221758998.243, "ph": "X", "cat": "fee", "dur": 6.362, "name": "__enter__ (<frozen importlib._bootstrap>:169)"}, {"pid": 106699, "tid": 106699, "ts": 58221759004.965, "ph": "X", "cat": "fee", "dur": 0.06, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221759005.586, "ph": "X", "cat": "fee", "dur": 0.161, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759007.47, "ph": "X", "cat": "fee", "dur": 0.08, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759007.32, "ph": "X", "cat": "fee", "dur": 0.31, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221759008.572, "ph": "X", "cat": "fee", "dur": 0.541, "name": "builtins.locals"}, {"pid": 106699, "tid": 106699, "ts": 58221759009.374, "ph": "X", "cat": "fee", "dur": 0.771, "name": "str.format"}, {"pid": 106699, "tid": 106699, "ts": 58221759010.586, "ph": "X", "cat": "fee", "dur": 0.461, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759011.297, "ph": "X", "cat": "fee", "dur": 0.1, "name": "<lambda> (/home/tim/.local/lib/python3.11/site-packages/_distutils_hack/__init__.py:96)"}, {"pid": 106699, "tid": 106699, "ts": 58221759008.171, "ph": "X", "cat": "fee", "dur": 3.437, "name": "find_spec (/home/tim/.local/lib/python3.11/site-packages/_distutils_hack/__init__.py:89)"}, {"pid": 106699, "tid": 106699, "ts": 58221759012.219, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759012.039, "ph": "X", "cat": "fee", "dur": 0.32, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221759013.281, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759013.091, "ph": "X", "cat": "fee", "dur": 0.32, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221759014.052, "ph": "X", "cat": "fee", "dur": 0.281, "name": "_imp.is_builtin"}, {"pid": 106699, "tid": 106699, "ts": 58221759013.882, "ph": "X", "cat": "fee", "dur": 0.591, "name": "find_spec (<frozen importlib._bootstrap>:748)"}, {"pid": 106699, "tid": 106699, "ts": 58221759014.874, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759014.754, "ph": "X", "cat": "fee", "dur": 0.24, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221759015.485, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759015.365, "ph": "X", "cat": "fee", "dur": 0.24, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221759016.497, "ph": "X", "cat": "fee", "dur": 0.331, "name": "_imp.find_frozen"}, {"pid": 106699, "tid": 106699, "ts": 58221759016.327, "ph": "X", "cat": "fee", "dur": 0.591, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:233)"}, {"pid": 106699, "tid": 106699, "ts": 58221759015.966, "ph": "X", "cat": "fee", "dur": 1.162, "name": "find_spec (<frozen importlib._bootstrap>:920)"}, {"pid": 106699, "tid": 106699, "ts": 58221759017.569, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759017.429, "ph": "X", "cat": "fee", "dur": 0.25, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221759018.35, "ph": "X", "cat": "fee", "dur": 0.041, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759018.29, "ph": "X", "cat": "fee", "dur": 0.131, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221759019.372, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759019.633, "ph": "X", "cat": "fee", "dur": 0.401, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221759020.434, "ph": "X", "cat": "fee", "dur": 0.171, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759021.476, "ph": "X", "cat": "fee", "dur": 0.091, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759022.759, "ph": "X", "cat": "fee", "dur": 9.037, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759022.608, "ph": "X", "cat": "fee", "dur": 9.258, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759032.507, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759033.93, "ph": "X", "cat": "fee", "dur": 0.26, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759034.651, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759033.639, "ph": "X", "cat": "fee", "dur": 1.182, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759035.142, "ph": "X", "cat": "fee", "dur": 0.561, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759033.349, "ph": "X", "cat": "fee", "dur": 2.895, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759037.496, "ph": "X", "cat": "fee", "dur": 0.722, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759039.47, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759039.681, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759039.16, "ph": "X", "cat": "fee", "dur": 0.651, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759039.931, "ph": "X", "cat": "fee", "dur": 0.13, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759038.979, "ph": "X", "cat": "fee", "dur": 1.152, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759040.402, "ph": "X", "cat": "fee", "dur": 0.12, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759041.464, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759041.694, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759041.344, "ph": "X", "cat": "fee", "dur": 0.471, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759041.905, "ph": "X", "cat": "fee", "dur": 0.15, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759041.033, "ph": "X", "cat": "fee", "dur": 1.082, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759042.346, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759043.077, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759043.227, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759042.977, "ph": "X", "cat": "fee", "dur": 0.35, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759043.398, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759042.837, "ph": "X", "cat": "fee", "dur": 0.711, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759043.728, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759044.53, "ph": "X", "cat": "fee", "dur": 2.254, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759044.409, "ph": "X", "cat": "fee", "dur": 2.445, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759044.319, "ph": "X", "cat": "fee", "dur": 2.896, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:150)"}, {"pid": 106699, "tid": 106699, "ts": 58221759044.139, "ph": "X", "cat": "fee", "dur": 3.286, "name": "_path_isfile (<frozen importlib._bootstrap_external>:159)"}, {"pid": 106699, "tid": 106699, "ts": 58221759047.916, "ph": "X", "cat": "fee", "dur": 0.16, "name": "__init__ (<frozen importlib._bootstrap_external>:1097)"}, {"pid": 106699, "tid": 106699, "ts": 58221759048.958, "ph": "X", "cat": "fee", "dur": 0.08, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221759049.309, "ph": "X", "cat": "fee", "dur": 0.29, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221759049.178, "ph": "X", "cat": "fee", "dur": 0.491, "name": "_path_isabs (<frozen importlib._bootstrap_external>:180)"}, {"pid": 106699, "tid": 106699, "ts": 58221759050.331, "ph": "X", "cat": "fee", "dur": 0.36, "name": "__init__ (<frozen importlib._bootstrap>:357)"}, {"pid": 106699, "tid": 106699, "ts": 58221759048.507, "ph": "X", "cat": "fee", "dur": 2.775, "name": "spec_from_file_location (<frozen importlib._bootstrap_external>:778)"}, {"pid": 106699, "tid": 106699, "ts": 58221759047.656, "ph": "X", "cat": "fee", "dur": 3.727, "name": "_get_spec (<frozen importlib._bootstrap_external>:1599)"}, {"pid": 106699, "tid": 106699, "ts": 58221759021.276, "ph": "X", "cat": "fee", "dur": 30.267, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221759019.102, "ph": "X", "cat": "fee", "dur": 32.731, "name": "_get_spec (<frozen importlib._bootstrap_external>:1464)"}, {"pid": 106699, "tid": 106699, "ts": 58221759018.671, "ph": "X", "cat": "fee", "dur": 33.333, "name": "find_spec (<frozen importlib._bootstrap_external>:1496)"}, {"pid": 106699, "tid": 106699, "ts": 58221759052.354, "ph": "X", "cat": "fee", "dur": 0.061, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759052.214, "ph": "X", "cat": "fee", "dur": 0.251, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221759006.218, "ph": "X", "cat": "fee", "dur": 46.577, "name": "_find_spec (<frozen importlib._bootstrap>:1054)"}, {"pid": 106699, "tid": 106699, "ts": 58221759053.286, "ph": "X", "cat": "fee", "dur": 0.16, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759053.687, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759053.897, "ph": "X", "cat": "fee", "dur": 0.06, "name": "create_module (<frozen importlib._bootstrap_external>:931)"}, {"pid": 106699, "tid": 106699, "ts": 58221759054.168, "ph": "X", "cat": "fee", "dur": 0.461, "name": "_new_module (<frozen importlib._bootstrap>:48)"}, {"pid": 106699, "tid": 106699, "ts": 58221759055.009, "ph": "X", "cat": "fee", "dur": 0.101, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759055.23, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759055.56, "ph": "X", "cat": "fee", "dur": 0.051, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759055.971, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759055.801, "ph": "X", "cat": "fee", "dur": 0.401, "name": "parent (<frozen importlib._bootstrap>:405)"}, {"pid": 106699, "tid": 106699, "ts": 58221759056.482, "ph": "X", "cat": "fee", "dur": 1.323, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759058.015, "ph": "X", "cat": "fee", "dur": 0.06, "name": "has_location (<frozen importlib._bootstrap>:413)"}, {"pid": 106699, "tid": 106699, "ts": 58221759058.225, "ph": "X", "cat": "fee", "dur": 0.702, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759059.237, "ph": "X", "cat": "fee", "dur": 0.622, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759060.66, "ph": "X", "cat": "fee", "dur": 0.22, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221759061.301, "ph": "X", "cat": "fee", "dur": 0.03, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221759062.373, "ph": "X", "cat": "fee", "dur": 0.281, "name": "str.rfind"}, {"pid": 106699, "tid": 106699, "ts": 58221759062.183, "ph": "X", "cat": "fee", "dur": 0.551, "name": "<genexpr> (<frozen importlib._bootstrap_external>:134)"}, {"pid": 106699, "tid": 106699, "ts": 58221759062.864, "ph": "X", "cat": "fee", "dur": 0.11, "name": "<genexpr> (<frozen importlib._bootstrap_external>:134)"}, {"pid": 106699, "tid": 106699, "ts": 58221759061.922, "ph": "X", "cat": "fee", "dur": 1.193, "name": "builtins.max"}, {"pid": 106699, "tid": 106699, "ts": 58221759061.502, "ph": "X", "cat": "fee", "dur": 2.424, "name": "_path_split (<frozen importlib._bootstrap_external>:132)"}, {"pid": 106699, "tid": 106699, "ts": 58221759064.237, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759064.928, "ph": "X", "cat": "fee", "dur": 0.13, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759066.361, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759066.591, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759066.762, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759066.17, "ph": "X", "cat": "fee", "dur": 0.742, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759067.022, "ph": "X", "cat": "fee", "dur": 0.15, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759065.96, "ph": "X", "cat": "fee", "dur": 1.282, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759061.151, "ph": "X", "cat": "fee", "dur": 6.202, "name": "cache_from_source (<frozen importlib._bootstrap_external>:437)"}, {"pid": 106699, "tid": 106699, "ts": 58221759060.37, "ph": "X", "cat": "fee", "dur": 7.133, "name": "_get_cached (<frozen importlib._bootstrap_external>:567)"}, {"pid": 106699, "tid": 106699, "ts": 58221759060.019, "ph": "X", "cat": "fee", "dur": 7.664, "name": "cached (<frozen importlib._bootstrap>:392)"}, {"pid": 106699, "tid": 106699, "ts": 58221759067.854, "ph": "X", "cat": "fee", "dur": 0.07, "name": "cached (<frozen importlib._bootstrap>:392)"}, {"pid": 106699, "tid": 106699, "ts": 58221759054.879, "ph": "X", "cat": "fee", "dur": 13.185, "name": "_init_module_attrs (<frozen importlib._bootstrap>:493)"}, {"pid": 106699, "tid": 106699, "ts": 58221759053.597, "ph": "X", "cat": "fee", "dur": 14.567, "name": "module_from_spec (<frozen importlib._bootstrap>:566)"}, {"pid": 106699, "tid": 106699, "ts": 58221759069.477, "ph": "X", "cat": "fee", "dur": 0.09, "name": "get_filename (<frozen importlib._bootstrap_external>:1122)"}, {"pid": 106699, "tid": 106699, "ts": 58221759068.986, "ph": "X", "cat": "fee", "dur": 0.751, "name": "_check_name_wrapper (<frozen importlib._bootstrap_external>:599)"}, {"pid": 106699, "tid": 106699, "ts": 58221759070.138, "ph": "X", "cat": "fee", "dur": 0.03, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221759070.899, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rfind"}, {"pid": 106699, "tid": 106699, "ts": 58221759070.739, "ph": "X", "cat": "fee", "dur": 0.321, "name": "<genexpr> (<frozen importlib._bootstrap_external>:134)"}, {"pid": 106699, "tid": 106699, "ts": 58221759071.13, "ph": "X", "cat": "fee", "dur": 0.1, "name": "<genexpr> (<frozen importlib._bootstrap_external>:134)"}, {"pid": 106699, "tid": 106699, "ts": 58221759070.619, "ph": "X", "cat": "fee", "dur": 0.701, "name": "builtins.max"}, {"pid": 106699, "tid": 106699, "ts": 58221759070.308, "ph": "X", "cat": "fee", "dur": 1.473, "name": "_path_split (<frozen importlib._bootstrap_external>:132)"}, {"pid": 106699, "tid": 106699, "ts": 58221759071.991, "ph": "X", "cat": "fee", "dur": 0.081, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759072.462, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759073.434, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759073.634, "ph": "X", "cat": "fee", "dur": 0.031, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759073.815, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759073.284, "ph": "X", "cat": "fee", "dur": 0.651, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759074.025, "ph": "X", "cat": "fee", "dur": 0.13, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759073.123, "ph": "X", "cat": "fee", "dur": 1.073, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759070.018, "ph": "X", "cat": "fee", "dur": 4.228, "name": "cache_from_source (<frozen importlib._bootstrap_external>:437)"}, {"pid": 106699, "tid": 106699, "ts": 58221759074.676, "ph": "X", "cat": "fee", "dur": 2.154, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759074.576, "ph": "X", "cat": "fee", "dur": 2.315, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759074.466, "ph": "X", "cat": "fee", "dur": 2.755, "name": "path_stats (<frozen importlib._bootstrap_external>:1146)"}, {"pid": 106699, "tid": 106699, "ts": 58221759078.073, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759078.423, "ph": "X", "cat": "fee", "dur": 8.476, "name": "io.open_code"}, {"pid": 106699, "tid": 106699, "ts": 58221759087.621, "ph": "X", "cat": "fee", "dur": 5.48, "name": "_io.BufferedReader.read"}, {"pid": 106699, "tid": 106699, "ts": 58221759093.201, "ph": "X", "cat": "fee", "dur": 1.784, "name": "_io.BufferedReader.__exit__"}, {"pid": 106699, "tid": 106699, "ts": 58221759077.882, "ph": "X", "cat": "fee", "dur": 17.203, "name": "get_data (<frozen importlib._bootstrap_external>:1127)"}, {"pid": 106699, "tid": 106699, "ts": 58221759096.237, "ph": "X", "cat": "fee", "dur": 0.12, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221759096.728, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221759097.089, "ph": "X", "cat": "fee", "dur": 0.19, "name": "type.from_bytes"}, {"pid": 106699, "tid": 106699, "ts": 58221759096.648, "ph": "X", "cat": "fee", "dur": 0.691, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:84)"}, {"pid": 106699, "tid": 106699, "ts": 58221759095.806, "ph": "X", "cat": "fee", "dur": 1.733, "name": "_classify_pyc (<frozen importlib._bootstrap_external>:642)"}, {"pid": 106699, "tid": 106699, "ts": 58221759098.631, "ph": "X", "cat": "fee", "dur": 0.031, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221759098.782, "ph": "X", "cat": "fee", "dur": 0.06, "name": "type.from_bytes"}, {"pid": 106699, "tid": 106699, "ts": 58221759098.581, "ph": "X", "cat": "fee", "dur": 0.311, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:84)"}, {"pid": 106699, "tid": 106699, "ts": 58221759099.283, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221759099.413, "ph": "X", "cat": "fee", "dur": 0.04, "name": "type.from_bytes"}, {"pid": 106699, "tid": 106699, "ts": 58221759099.233, "ph": "X", "cat": "fee", "dur": 0.26, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:84)"}, {"pid": 106699, "tid": 106699, "ts": 58221759098.391, "ph": "X", "cat": "fee", "dur": 1.272, "name": "_validate_timestamp_pyc (<frozen importlib._bootstrap_external>:675)"}, {"pid": 106699, "tid": 106699, "ts": 58221759100.014, "ph": "X", "cat": "fee", "dur": 0.271, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759100.725, "ph": "X", "cat": "fee", "dur": 38.062, "name": "marshal.loads"}, {"pid": 106699, "tid": 106699, "ts": 58221759139.058, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759139.468, "ph": "X", "cat": "fee", "dur": 0.231, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759139.969, "ph": "X", "cat": "fee", "dur": 0.501, "name": "_imp._fix_co_filename"}, {"pid": 106699, "tid": 106699, "ts": 58221759100.575, "ph": "X", "cat": "fee", "dur": 39.955, "name": "_compile_bytecode (<frozen importlib._bootstrap_external>:727)"}, {"pid": 106699, "tid": 106699, "ts": 58221759068.805, "ph": "X", "cat": "fee", "dur": 71.825, "name": "get_code (<frozen importlib._bootstrap_external>:1007)"}, {"pid": 106699, "tid": 106699, "ts": 58221759150.379, "ph": "X", "cat": "fee", "dur": 0.942, "name": "Salsa20 (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/pureSalsa20.py:195)"}, {"pid": 106699, "tid": 106699, "ts": 58221759149.487, "ph": "X", "cat": "fee", "dur": 8.576, "name": "builtins.__build_class__"}, {"pid": 106699, "tid": 106699, "ts": 58221759143.977, "ph": "X", "cat": "fee", "dur": 14.717, "name": "<module> (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/pureSalsa20.py:1)"}, {"pid": 106699, "tid": 106699, "ts": 58221759141.652, "ph": "X", "cat": "fee", "dur": 17.143, "name": "builtins.exec"}, {"pid": 106699, "tid": 106699, "ts": 58221759141.502, "ph": "X", "cat": "fee", "dur": 17.353, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:233)"}, {"pid": 106699, "tid": 106699, "ts": 58221759068.625, "ph": "X", "cat": "fee", "dur": 90.35, "name": "exec_module (<frozen importlib._bootstrap_external>:934)"}, {"pid": 106699, "tid": 106699, "ts": 58221759159.877, "ph": "X", "cat": "fee", "dur": 0.14, "name": "dict.pop"}, {"pid": 106699, "tid": 106699, "ts": 58221759160.498, "ph": "X", "cat": "fee", "dur": 0.15, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759053.086, "ph": "X", "cat": "fee", "dur": 107.732, "name": "_load_unlocked (<frozen importlib._bootstrap>:666)"}, {"pid": 106699, "tid": 106699, "ts": 58221759005.396, "ph": "X", "cat": "fee", "dur": 155.623, "name": "_find_and_load_unlocked (<frozen importlib._bootstrap>:1120)"}, {"pid": 106699, "tid": 106699, "ts": 58221759161.67, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_thread.get_ident"}, {"pid": 106699, "tid": 106699, "ts": 58221759162.862, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_thread.lock.__exit__"}, {"pid": 106699, "tid": 106699, "ts": 58221759161.53, "ph": "X", "cat": "fee", "dur": 1.523, "name": "release (<frozen importlib._bootstrap>:125)"}, {"pid": 106699, "tid": 106699, "ts": 58221759161.319, "ph": "X", "cat": "fee", "dur": 1.904, "name": "__exit__ (<frozen importlib._bootstrap>:173)"}, {"pid": 106699, "tid": 106699, "ts": 58221759163.774, "ph": "X", "cat": "fee", "dur": 0.08, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759164.065, "ph": "X", "cat": "fee", "dur": 0.07, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221759164.395, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759163.624, "ph": "X", "cat": "fee", "dur": 0.901, "name": "cb (<frozen importlib._bootstrap>:198)"}, {"pid": 106699, "tid": 106699, "ts": 58221758996.73, "ph": "X", "cat": "fee", "dur": 168.216, "name": "_find_and_load (<frozen importlib._bootstrap>:1165)"}, {"pid": 106699, "tid": 106699, "ts": 58221759168.142, "ph": "X", "cat": "fee", "dur": 0.07, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221759168.563, "ph": "X", "cat": "fee", "dur": 0.16, "name": "__init__ (<frozen importlib._bootstrap>:165)"}, {"pid": 106699, "tid": 106699, "ts": 58221759169.224, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759170.306, "ph": "X", "cat": "fee", "dur": 0.131, "name": "_thread.allocate_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759170.557, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_thread.allocate_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759170.196, "ph": "X", "cat": "fee", "dur": 0.711, "name": "__init__ (<frozen importlib._bootstrap>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759171.489, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759169.124, "ph": "X", "cat": "fee", "dur": 2.495, "name": "_get_module_lock (<frozen importlib._bootstrap>:179)"}, {"pid": 106699, "tid": 106699, "ts": 58221759171.939, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_thread.get_ident"}, {"pid": 106699, "tid": 106699, "ts": 58221759172.741, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_thread.lock.__exit__"}, {"pid": 106699, "tid": 106699, "ts": 58221759171.859, "ph": "X", "cat": "fee", "dur": 1.112, "name": "acquire (<frozen importlib._bootstrap>:100)"}, {"pid": 106699, "tid": 106699, "ts": 58221759168.964, "ph": "X", "cat": "fee", "dur": 4.087, "name": "__enter__ (<frozen importlib._bootstrap>:169)"}, {"pid": 106699, "tid": 106699, "ts": 58221759173.272, "ph": "X", "cat": "fee", "dur": 0.03, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221759173.653, "ph": "X", "cat": "fee", "dur": 0.11, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759174.945, "ph": "X", "cat": "fee", "dur": 0.04, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759174.815, "ph": "X", "cat": "fee", "dur": 0.3, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221759175.716, "ph": "X", "cat": "fee", "dur": 0.321, "name": "builtins.locals"}, {"pid": 106699, "tid": 106699, "ts": 58221759176.157, "ph": "X", "cat": "fee", "dur": 0.511, "name": "str.format"}, {"pid": 106699, "tid": 106699, "ts": 58221759176.969, "ph": "X", "cat": "fee", "dur": 0.24, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759177.38, "ph": "X", "cat": "fee", "dur": 0.07, "name": "<lambda> (/home/tim/.local/lib/python3.11/site-packages/_distutils_hack/__init__.py:96)"}, {"pid": 106699, "tid": 106699, "ts": 58221759175.456, "ph": "X", "cat": "fee", "dur": 2.074, "name": "find_spec (/home/tim/.local/lib/python3.11/site-packages/_distutils_hack/__init__.py:89)"}, {"pid": 106699, "tid": 106699, "ts": 58221759177.981, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759177.85, "ph": "X", "cat": "fee", "dur": 0.211, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221759178.582, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759178.492, "ph": "X", "cat": "fee", "dur": 0.16, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221759179.153, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_imp.is_builtin"}, {"pid": 106699, "tid": 106699, "ts": 58221759179.003, "ph": "X", "cat": "fee", "dur": 0.541, "name": "find_spec (<frozen importlib._bootstrap>:748)"}, {"pid": 106699, "tid": 106699, "ts": 58221759179.794, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759179.714, "ph": "X", "cat": "fee", "dur": 0.15, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221759180.265, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759180.195, "ph": "X", "cat": "fee", "dur": 0.13, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221759180.846, "ph": "X", "cat": "fee", "dur": 0.331, "name": "_imp.find_frozen"}, {"pid": 106699, "tid": 106699, "ts": 58221759180.726, "ph": "X", "cat": "fee", "dur": 0.491, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:233)"}, {"pid": 106699, "tid": 106699, "ts": 58221759180.536, "ph": "X", "cat": "fee", "dur": 0.811, "name": "find_spec (<frozen importlib._bootstrap>:920)"}, {"pid": 106699, "tid": 106699, "ts": 58221759181.618, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759181.507, "ph": "X", "cat": "fee", "dur": 0.191, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221759182.038, "ph": "X", "cat": "fee", "dur": 0.04, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759181.968, "ph": "X", "cat": "fee", "dur": 0.14, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221759183.02, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759183.291, "ph": "X", "cat": "fee", "dur": 0.28, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221759183.732, "ph": "X", "cat": "fee", "dur": 0.15, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759184.192, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759184.643, "ph": "X", "cat": "fee", "dur": 2.715, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759184.483, "ph": "X", "cat": "fee", "dur": 2.945, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759188.0, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759189.372, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759189.663, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759189.152, "ph": "X", "cat": "fee", "dur": 0.701, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759189.983, "ph": "X", "cat": "fee", "dur": 0.211, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759188.881, "ph": "X", "cat": "fee", "dur": 1.403, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759190.665, "ph": "X", "cat": "fee", "dur": 0.24, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759191.737, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759191.927, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759191.596, "ph": "X", "cat": "fee", "dur": 0.431, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759192.117, "ph": "X", "cat": "fee", "dur": 0.121, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759191.446, "ph": "X", "cat": "fee", "dur": 0.852, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759192.528, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759193.3, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759193.46, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759193.199, "ph": "X", "cat": "fee", "dur": 0.341, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759193.62, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759193.059, "ph": "X", "cat": "fee", "dur": 0.701, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759193.961, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759194.642, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759194.782, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759194.542, "ph": "X", "cat": "fee", "dur": 0.32, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759194.933, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759194.372, "ph": "X", "cat": "fee", "dur": 0.691, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759195.213, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759195.834, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759195.965, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759195.734, "ph": "X", "cat": "fee", "dur": 0.311, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759196.125, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759195.604, "ph": "X", "cat": "fee", "dur": 0.651, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759196.415, "ph": "X", "cat": "fee", "dur": 0.091, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759184.082, "ph": "X", "cat": "fee", "dur": 12.684, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221759197.117, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759197.337, "ph": "X", "cat": "fee", "dur": 0.19, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221759197.678, "ph": "X", "cat": "fee", "dur": 0.15, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759198.079, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759198.459, "ph": "X", "cat": "fee", "dur": 2.084, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759198.369, "ph": "X", "cat": "fee", "dur": 2.204, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759200.934, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759201.836, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759202.006, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759201.695, "ph": "X", "cat": "fee", "dur": 0.401, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759202.196, "ph": "X", "cat": "fee", "dur": 0.171, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759201.515, "ph": "X", "cat": "fee", "dur": 0.912, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759202.637, "ph": "X", "cat": "fee", "dur": 0.15, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759203.429, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759203.579, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759203.318, "ph": "X", "cat": "fee", "dur": 0.351, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759203.749, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759203.178, "ph": "X", "cat": "fee", "dur": 0.711, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759204.12, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759204.811, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759204.961, "ph": "X", "cat": "fee", "dur": 0.031, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759204.711, "ph": "X", "cat": "fee", "dur": 0.331, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759205.122, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759204.581, "ph": "X", "cat": "fee", "dur": 0.681, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759205.452, "ph": "X", "cat": "fee", "dur": 0.091, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759206.204, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759206.334, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759206.094, "ph": "X", "cat": "fee", "dur": 0.33, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759206.494, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759205.963, "ph": "X", "cat": "fee", "dur": 0.642, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759206.775, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759207.396, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759207.526, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759207.296, "ph": "X", "cat": "fee", "dur": 0.33, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759207.687, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759207.176, "ph": "X", "cat": "fee", "dur": 0.601, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759207.937, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759197.968, "ph": "X", "cat": "fee", "dur": 10.39, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221759208.608, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759208.789, "ph": "X", "cat": "fee", "dur": 0.25, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221759209.209, "ph": "X", "cat": "fee", "dur": 0.031, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759209.34, "ph": "X", "cat": "fee", "dur": 0.14, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221759209.58, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759209.821, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759210.231, "ph": "X", "cat": "fee", "dur": 1.653, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759210.141, "ph": "X", "cat": "fee", "dur": 1.774, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759212.215, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759213.037, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759213.197, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759212.916, "ph": "X", "cat": "fee", "dur": 0.381, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759213.367, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759212.776, "ph": "X", "cat": "fee", "dur": 0.691, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759213.658, "ph": "X", "cat": "fee", "dur": 0.15, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759214.489, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759214.63, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759214.389, "ph": "X", "cat": "fee", "dur": 0.341, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759214.79, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759214.269, "ph": "X", "cat": "fee", "dur": 0.631, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759215.091, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759215.832, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759215.972, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759215.732, "ph": "X", "cat": "fee", "dur": 0.32, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759216.122, "ph": "X", "cat": "fee", "dur": 0.071, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759215.581, "ph": "X", "cat": "fee", "dur": 0.652, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759216.403, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759217.154, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759217.285, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759217.054, "ph": "X", "cat": "fee", "dur": 0.361, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759217.485, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759216.914, "ph": "X", "cat": "fee", "dur": 0.661, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759217.746, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759218.377, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759218.517, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759218.277, "ph": "X", "cat": "fee", "dur": 0.33, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759218.677, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759218.146, "ph": "X", "cat": "fee", "dur": 0.621, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759218.928, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759209.73, "ph": "X", "cat": "fee", "dur": 9.468, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221759219.389, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759219.549, "ph": "X", "cat": "fee", "dur": 0.13, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221759219.799, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759220.07, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759220.35, "ph": "X", "cat": "fee", "dur": 1.684, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759220.27, "ph": "X", "cat": "fee", "dur": 1.804, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759222.354, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759223.035, "ph": "X", "cat": "fee", "dur": 0.031, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759223.196, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759222.905, "ph": "X", "cat": "fee", "dur": 0.381, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759223.356, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759222.765, "ph": "X", "cat": "fee", "dur": 0.681, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759223.627, "ph": "X", "cat": "fee", "dur": 0.13, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759224.398, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759224.528, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759224.308, "ph": "X", "cat": "fee", "dur": 0.31, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759224.699, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759224.178, "ph": "X", "cat": "fee", "dur": 0.631, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759224.979, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759225.62, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759225.741, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759225.52, "ph": "X", "cat": "fee", "dur": 0.311, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759225.901, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759225.39, "ph": "X", "cat": "fee", "dur": 0.601, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759226.161, "ph": "X", "cat": "fee", "dur": 0.111, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759226.893, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759227.023, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759226.793, "ph": "X", "cat": "fee", "dur": 0.33, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759227.193, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759226.662, "ph": "X", "cat": "fee", "dur": 0.621, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759227.444, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759228.165, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759228.295, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759228.065, "ph": "X", "cat": "fee", "dur": 0.331, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759228.476, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759227.935, "ph": "X", "cat": "fee", "dur": 0.651, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759228.746, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759219.95, "ph": "X", "cat": "fee", "dur": 9.147, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221759229.297, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759229.448, "ph": "X", "cat": "fee", "dur": 0.14, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221759229.698, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759229.938, "ph": "X", "cat": "fee", "dur": 0.051, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759230.239, "ph": "X", "cat": "fee", "dur": 2.555, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759230.159, "ph": "X", "cat": "fee", "dur": 2.675, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759233.144, "ph": "X", "cat": "fee", "dur": 0.031, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759234.096, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759234.227, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759233.986, "ph": "X", "cat": "fee", "dur": 0.321, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759234.377, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759233.856, "ph": "X", "cat": "fee", "dur": 0.641, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759234.667, "ph": "X", "cat": "fee", "dur": 0.121, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759235.439, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759235.569, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759235.349, "ph": "X", "cat": "fee", "dur": 0.31, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759235.729, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759235.218, "ph": "X", "cat": "fee", "dur": 0.622, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759236.01, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759236.631, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759236.761, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759236.541, "ph": "X", "cat": "fee", "dur": 0.31, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759236.912, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759236.421, "ph": "X", "cat": "fee", "dur": 0.591, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759237.172, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759237.883, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759238.014, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759237.793, "ph": "X", "cat": "fee", "dur": 0.311, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759238.174, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759237.673, "ph": "X", "cat": "fee", "dur": 0.591, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759238.444, "ph": "X", "cat": "fee", "dur": 0.091, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759239.156, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759239.286, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759239.056, "ph": "X", "cat": "fee", "dur": 0.33, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759239.456, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759238.925, "ph": "X", "cat": "fee", "dur": 0.622, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759239.707, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759229.858, "ph": "X", "cat": "fee", "dur": 10.25, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221759240.258, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759240.438, "ph": "X", "cat": "fee", "dur": 0.231, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221759240.779, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759241.029, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759241.4, "ph": "X", "cat": "fee", "dur": 1.713, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759241.31, "ph": "X", "cat": "fee", "dur": 1.853, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759243.474, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759244.205, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759244.346, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759244.095, "ph": "X", "cat": "fee", "dur": 0.341, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759244.506, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759243.945, "ph": "X", "cat": "fee", "dur": 0.661, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759244.786, "ph": "X", "cat": "fee", "dur": 0.121, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759245.788, "ph": "X", "cat": "fee", "dur": 2.615, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759245.698, "ph": "X", "cat": "fee", "dur": 2.745, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759245.598, "ph": "X", "cat": "fee", "dur": 3.146, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:150)"}, {"pid": 106699, "tid": 106699, "ts": 58221759245.468, "ph": "X", "cat": "fee", "dur": 3.476, "name": "_path_isfile (<frozen importlib._bootstrap_external>:159)"}, {"pid": 106699, "tid": 106699, "ts": 58221759250.287, "ph": "X", "cat": "fee", "dur": 0.521, "name": "__init__ (<frozen importlib._bootstrap_external>:1220)"}, {"pid": 106699, "tid": 106699, "ts": 58221759251.269, "ph": "X", "cat": "fee", "dur": 0.06, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221759251.609, "ph": "X", "cat": "fee", "dur": 0.211, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221759251.469, "ph": "X", "cat": "fee", "dur": 0.401, "name": "_path_isabs (<frozen importlib._bootstrap_external>:180)"}, {"pid": 106699, "tid": 106699, "ts": 58221759252.411, "ph": "X", "cat": "fee", "dur": 0.38, "name": "__init__ (<frozen importlib._bootstrap>:357)"}, {"pid": 106699, "tid": 106699, "ts": 58221759251.108, "ph": "X", "cat": "fee", "dur": 2.255, "name": "spec_from_file_location (<frozen importlib._bootstrap_external>:778)"}, {"pid": 106699, "tid": 106699, "ts": 58221759249.255, "ph": "X", "cat": "fee", "dur": 4.188, "name": "_get_spec (<frozen importlib._bootstrap_external>:1599)"}, {"pid": 106699, "tid": 106699, "ts": 58221759240.959, "ph": "X", "cat": "fee", "dur": 12.624, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221759182.77, "ph": "X", "cat": "fee", "dur": 71.013, "name": "_get_spec (<frozen importlib._bootstrap_external>:1464)"}, {"pid": 106699, "tid": 106699, "ts": 58221759182.359, "ph": "X", "cat": "fee", "dur": 71.595, "name": "find_spec (<frozen importlib._bootstrap_external>:1496)"}, {"pid": 106699, "tid": 106699, "ts": 58221759254.294, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759254.164, "ph": "X", "cat": "fee", "dur": 0.24, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221759174.133, "ph": "X", "cat": "fee", "dur": 80.582, "name": "_find_spec (<frozen importlib._bootstrap>:1054)"}, {"pid": 106699, "tid": 106699, "ts": 58221759255.136, "ph": "X", "cat": "fee", "dur": 0.14, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759255.547, "ph": "X", "cat": "fee", "dur": 0.23, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759257.28, "ph": "X", "cat": "fee", "dur": 193.915, "name": "_imp.create_dynamic"}, {"pid": 106699, "tid": 106699, "ts": 58221759257.17, "ph": "X", "cat": "fee", "dur": 194.285, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:233)"}, {"pid": 106699, "tid": 106699, "ts": 58221759452.878, "ph": "X", "cat": "fee", "dur": 0.521, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759256.849, "ph": "X", "cat": "fee", "dur": 196.75, "name": "create_module (<frozen importlib._bootstrap_external>:1231)"}, {"pid": 106699, "tid": 106699, "ts": 58221759454.361, "ph": "X", "cat": "fee", "dur": 0.14, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759454.591, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759454.952, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759455.563, "ph": "X", "cat": "fee", "dur": 0.16, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759455.262, "ph": "X", "cat": "fee", "dur": 0.672, "name": "parent (<frozen importlib._bootstrap>:405)"}, {"pid": 106699, "tid": 106699, "ts": 58221759456.234, "ph": "X", "cat": "fee", "dur": 1.864, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759458.368, "ph": "X", "cat": "fee", "dur": 0.08, "name": "has_location (<frozen importlib._bootstrap>:413)"}, {"pid": 106699, "tid": 106699, "ts": 58221759458.599, "ph": "X", "cat": "fee", "dur": 0.15, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759458.849, "ph": "X", "cat": "fee", "dur": 0.771, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759460.512, "ph": "X", "cat": "fee", "dur": 0.391, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221759461.153, "ph": "X", "cat": "fee", "dur": 0.101, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221759460.182, "ph": "X", "cat": "fee", "dur": 1.132, "name": "_get_cached (<frozen importlib._bootstrap_external>:567)"}, {"pid": 106699, "tid": 106699, "ts": 58221759459.761, "ph": "X", "cat": "fee", "dur": 1.843, "name": "cached (<frozen importlib._bootstrap>:392)"}, {"pid": 106699, "tid": 106699, "ts": 58221759454.12, "ph": "X", "cat": "fee", "dur": 7.584, "name": "_init_module_attrs (<frozen importlib._bootstrap>:493)"}, {"pid": 106699, "tid": 106699, "ts": 58221759255.446, "ph": "X", "cat": "fee", "dur": 206.399, "name": "module_from_spec (<frozen importlib._bootstrap>:566)"}, {"pid": 106699, "tid": 106699, "ts": 58221759463.868, "ph": "X", "cat": "fee", "dur": 0.221, "name": "_imp.exec_dynamic"}, {"pid": 106699, "tid": 106699, "ts": 58221759463.708, "ph": "X", "cat": "fee", "dur": 0.441, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:233)"}, {"pid": 106699, "tid": 106699, "ts": 58221759464.57, "ph": "X", "cat": "fee", "dur": 0.25, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759463.197, "ph": "X", "cat": "fee", "dur": 1.723, "name": "exec_module (<frozen importlib._bootstrap_external>:1239)"}, {"pid": 106699, "tid": 106699, "ts": 58221759465.181, "ph": "X", "cat": "fee", "dur": 0.14, "name": "dict.pop"}, {"pid": 106699, "tid": 106699, "ts": 58221759465.682, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759254.976, "ph": "X", "cat": "fee", "dur": 210.986, "name": "_load_unlocked (<frozen importlib._bootstrap>:666)"}, {"pid": 106699, "tid": 106699, "ts": 58221759173.532, "ph": "X", "cat": "fee", "dur": 292.681, "name": "_find_and_load_unlocked (<frozen importlib._bootstrap>:1120)"}, {"pid": 106699, "tid": 106699, "ts": 58221759467.115, "ph": "X", "cat": "fee", "dur": 0.22, "name": "_thread.get_ident"}, {"pid": 106699, "tid": 106699, "ts": 58221759468.547, "ph": "X", "cat": "fee", "dur": 0.141, "name": "_thread.lock.__exit__"}, {"pid": 106699, "tid": 106699, "ts": 58221759466.964, "ph": "X", "cat": "fee", "dur": 1.824, "name": "release (<frozen importlib._bootstrap>:125)"}, {"pid": 106699, "tid": 106699, "ts": 58221759466.624, "ph": "X", "cat": "fee", "dur": 2.254, "name": "__exit__ (<frozen importlib._bootstrap>:173)"}, {"pid": 106699, "tid": 106699, "ts": 58221759469.439, "ph": "X", "cat": "fee", "dur": 0.12, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759469.739, "ph": "X", "cat": "fee", "dur": 0.111, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221759470.16, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759469.309, "ph": "X", "cat": "fee", "dur": 1.062, "name": "cb (<frozen importlib._bootstrap>:198)"}, {"pid": 106699, "tid": 106699, "ts": 58221759167.902, "ph": "X", "cat": "fee", "dur": 303.0, "name": "_find_and_load (<frozen importlib._bootstrap>:1165)"}, {"pid": 106699, "tid": 106699, "ts": 58221759473.436, "ph": "X", "cat": "fee", "dur": 0.071, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221759473.957, "ph": "X", "cat": "fee", "dur": 0.171, "name": "__init__ (<frozen importlib._bootstrap>:165)"}, {"pid": 106699, "tid": 106699, "ts": 58221759474.609, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759475.721, "ph": "X", "cat": "fee", "dur": 0.18, "name": "_thread.allocate_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759476.061, "ph": "X", "cat": "fee", "dur": 0.071, "name": "_thread.allocate_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759475.59, "ph": "X", "cat": "fee", "dur": 0.742, "name": "__init__ (<frozen importlib._bootstrap>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759477.063, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759474.498, "ph": "X", "cat": "fee", "dur": 2.696, "name": "_get_module_lock (<frozen importlib._bootstrap>:179)"}, {"pid": 106699, "tid": 106699, "ts": 58221759477.544, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_thread.get_ident"}, {"pid": 106699, "tid": 106699, "ts": 58221759478.396, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_thread.lock.__exit__"}, {"pid": 106699, "tid": 106699, "ts": 58221759477.464, "ph": "X", "cat": "fee", "dur": 1.172, "name": "acquire (<frozen importlib._bootstrap>:100)"}, {"pid": 106699, "tid": 106699, "ts": 58221759474.328, "ph": "X", "cat": "fee", "dur": 4.479, "name": "__enter__ (<frozen importlib._bootstrap>:169)"}, {"pid": 106699, "tid": 106699, "ts": 58221759479.057, "ph": "X", "cat": "fee", "dur": 0.05, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221759479.448, "ph": "X", "cat": "fee", "dur": 0.16, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759481.101, "ph": "X", "cat": "fee", "dur": 0.05, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221759481.411, "ph": "X", "cat": "fee", "dur": 0.101, "name": "__init__ (<frozen importlib._bootstrap>:165)"}, {"pid": 106699, "tid": 106699, "ts": 58221759481.932, "ph": "X", "cat": "fee", "dur": 0.061, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759482.684, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_thread.allocate_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759482.904, "ph": "X", "cat": "fee", "dur": 0.141, "name": "_thread.allocate_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759482.604, "ph": "X", "cat": "fee", "dur": 0.601, "name": "__init__ (<frozen importlib._bootstrap>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759483.786, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759481.852, "ph": "X", "cat": "fee", "dur": 2.064, "name": "_get_module_lock (<frozen importlib._bootstrap>:179)"}, {"pid": 106699, "tid": 106699, "ts": 58221759484.167, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_thread.get_ident"}, {"pid": 106699, "tid": 106699, "ts": 58221759484.898, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_thread.lock.__exit__"}, {"pid": 106699, "tid": 106699, "ts": 58221759484.096, "ph": "X", "cat": "fee", "dur": 0.972, "name": "acquire (<frozen importlib._bootstrap>:100)"}, {"pid": 106699, "tid": 106699, "ts": 58221759481.722, "ph": "X", "cat": "fee", "dur": 3.436, "name": "__enter__ (<frozen importlib._bootstrap>:169)"}, {"pid": 106699, "tid": 106699, "ts": 58221759485.359, "ph": "X", "cat": "fee", "dur": 0.03, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221759485.649, "ph": "X", "cat": "fee", "dur": 0.091, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759486.862, "ph": "X", "cat": "fee", "dur": 0.04, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759486.762, "ph": "X", "cat": "fee", "dur": 0.2, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221759487.663, "ph": "X", "cat": "fee", "dur": 0.531, "name": "builtins.locals"}, {"pid": 106699, "tid": 106699, "ts": 58221759488.314, "ph": "X", "cat": "fee", "dur": 0.842, "name": "str.format"}, {"pid": 106699, "tid": 106699, "ts": 58221759489.487, "ph": "X", "cat": "fee", "dur": 0.21, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759489.897, "ph": "X", "cat": "fee", "dur": 0.051, "name": "<lambda> (/home/tim/.local/lib/python3.11/site-packages/_distutils_hack/__init__.py:96)"}, {"pid": 106699, "tid": 106699, "ts": 58221759487.413, "ph": "X", "cat": "fee", "dur": 2.625, "name": "find_spec (/home/tim/.local/lib/python3.11/site-packages/_distutils_hack/__init__.py:89)"}, {"pid": 106699, "tid": 106699, "ts": 58221759490.489, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759490.368, "ph": "X", "cat": "fee", "dur": 0.241, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221759491.12, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759491.04, "ph": "X", "cat": "fee", "dur": 0.2, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221759491.671, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_imp.is_builtin"}, {"pid": 106699, "tid": 106699, "ts": 58221759491.541, "ph": "X", "cat": "fee", "dur": 0.551, "name": "find_spec (<frozen importlib._bootstrap>:748)"}, {"pid": 106699, "tid": 106699, "ts": 58221759492.372, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759492.292, "ph": "X", "cat": "fee", "dur": 0.17, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221759492.743, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759492.683, "ph": "X", "cat": "fee", "dur": 0.15, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221759493.434, "ph": "X", "cat": "fee", "dur": 0.291, "name": "_imp.find_frozen"}, {"pid": 106699, "tid": 106699, "ts": 58221759493.354, "ph": "X", "cat": "fee", "dur": 0.431, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:233)"}, {"pid": 106699, "tid": 106699, "ts": 58221759493.113, "ph": "X", "cat": "fee", "dur": 0.852, "name": "find_spec (<frozen importlib._bootstrap>:920)"}, {"pid": 106699, "tid": 106699, "ts": 58221759494.246, "ph": "X", "cat": "fee", "dur": 0.04, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759494.145, "ph": "X", "cat": "fee", "dur": 0.181, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221759494.636, "ph": "X", "cat": "fee", "dur": 0.04, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759494.566, "ph": "X", "cat": "fee", "dur": 0.16, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221759495.618, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759495.899, "ph": "X", "cat": "fee", "dur": 0.37, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221759496.49, "ph": "X", "cat": "fee", "dur": 0.14, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759496.951, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759497.492, "ph": "X", "cat": "fee", "dur": 3.787, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759497.321, "ph": "X", "cat": "fee", "dur": 4.028, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759502.03, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759503.132, "ph": "X", "cat": "fee", "dur": 0.131, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759503.503, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759502.852, "ph": "X", "cat": "fee", "dur": 0.841, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759503.834, "ph": "X", "cat": "fee", "dur": 0.23, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759502.521, "ph": "X", "cat": "fee", "dur": 1.673, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759505.056, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759505.276, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759504.926, "ph": "X", "cat": "fee", "dur": 0.511, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759505.507, "ph": "X", "cat": "fee", "dur": 0.16, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759504.785, "ph": "X", "cat": "fee", "dur": 0.952, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759506.298, "ph": "X", "cat": "fee", "dur": 7.464, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759506.178, "ph": "X", "cat": "fee", "dur": 7.735, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759506.068, "ph": "X", "cat": "fee", "dur": 8.536, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:150)"}, {"pid": 106699, "tid": 106699, "ts": 58221759505.908, "ph": "X", "cat": "fee", "dur": 8.816, "name": "_path_isfile (<frozen importlib._bootstrap_external>:159)"}, {"pid": 106699, "tid": 106699, "ts": 58221759515.516, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759515.746, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759515.355, "ph": "X", "cat": "fee", "dur": 0.531, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759515.976, "ph": "X", "cat": "fee", "dur": 0.131, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759515.155, "ph": "X", "cat": "fee", "dur": 1.032, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759516.718, "ph": "X", "cat": "fee", "dur": 3.266, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759516.608, "ph": "X", "cat": "fee", "dur": 3.476, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759516.517, "ph": "X", "cat": "fee", "dur": 3.928, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:150)"}, {"pid": 106699, "tid": 106699, "ts": 58221759516.397, "ph": "X", "cat": "fee", "dur": 4.128, "name": "_path_isfile (<frozen importlib._bootstrap_external>:159)"}, {"pid": 106699, "tid": 106699, "ts": 58221759521.176, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759521.437, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759521.036, "ph": "X", "cat": "fee", "dur": 0.501, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759521.647, "ph": "X", "cat": "fee", "dur": 0.11, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759520.906, "ph": "X", "cat": "fee", "dur": 0.901, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759522.198, "ph": "X", "cat": "fee", "dur": 2.645, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759522.108, "ph": "X", "cat": "fee", "dur": 2.805, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759522.038, "ph": "X", "cat": "fee", "dur": 3.106, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:150)"}, {"pid": 106699, "tid": 106699, "ts": 58221759521.938, "ph": "X", "cat": "fee", "dur": 3.266, "name": "_path_isfile (<frozen importlib._bootstrap_external>:159)"}, {"pid": 106699, "tid": 106699, "ts": 58221759525.715, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759525.855, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759525.605, "ph": "X", "cat": "fee", "dur": 0.36, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759526.045, "ph": "X", "cat": "fee", "dur": 0.071, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759525.474, "ph": "X", "cat": "fee", "dur": 0.692, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759526.506, "ph": "X", "cat": "fee", "dur": 2.495, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759526.426, "ph": "X", "cat": "fee", "dur": 2.645, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759526.356, "ph": "X", "cat": "fee", "dur": 2.936, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:150)"}, {"pid": 106699, "tid": 106699, "ts": 58221759526.286, "ph": "X", "cat": "fee", "dur": 3.056, "name": "_path_isfile (<frozen importlib._bootstrap_external>:159)"}, {"pid": 106699, "tid": 106699, "ts": 58221759529.843, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759529.983, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759529.732, "ph": "X", "cat": "fee", "dur": 0.351, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759530.143, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759529.602, "ph": "X", "cat": "fee", "dur": 0.661, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759530.594, "ph": "X", "cat": "fee", "dur": 2.625, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759530.514, "ph": "X", "cat": "fee", "dur": 2.755, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759530.434, "ph": "X", "cat": "fee", "dur": 3.025, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:150)"}, {"pid": 106699, "tid": 106699, "ts": 58221759530.364, "ph": "X", "cat": "fee", "dur": 3.155, "name": "_path_isfile (<frozen importlib._bootstrap_external>:159)"}, {"pid": 106699, "tid": 106699, "ts": 58221759534.091, "ph": "X", "cat": "fee", "dur": 1.843, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759534.0, "ph": "X", "cat": "fee", "dur": 2.004, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759533.93, "ph": "X", "cat": "fee", "dur": 2.445, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:150)"}, {"pid": 106699, "tid": 106699, "ts": 58221759533.77, "ph": "X", "cat": "fee", "dur": 2.865, "name": "_path_isdir (<frozen importlib._bootstrap_external>:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221759537.297, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759537.437, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759537.166, "ph": "X", "cat": "fee", "dur": 0.381, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759537.617, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759537.026, "ph": "X", "cat": "fee", "dur": 0.741, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759538.208, "ph": "X", "cat": "fee", "dur": 0.301, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759539.431, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759539.611, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759539.29, "ph": "X", "cat": "fee", "dur": 0.421, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759539.811, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759539.14, "ph": "X", "cat": "fee", "dur": 0.802, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759540.142, "ph": "X", "cat": "fee", "dur": 0.13, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759540.893, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759541.034, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759540.793, "ph": "X", "cat": "fee", "dur": 0.331, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759541.194, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759540.673, "ph": "X", "cat": "fee", "dur": 0.651, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759541.504, "ph": "X", "cat": "fee", "dur": 0.101, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759542.156, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759542.296, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759542.056, "ph": "X", "cat": "fee", "dur": 0.33, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759542.466, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759541.935, "ph": "X", "cat": "fee", "dur": 0.662, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759542.757, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759543.398, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759543.518, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759543.298, "ph": "X", "cat": "fee", "dur": 0.3, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759543.679, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759543.168, "ph": "X", "cat": "fee", "dur": 0.641, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759543.989, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759544.47, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759544.971, "ph": "X", "cat": "fee", "dur": 0.451, "name": "__init__ (<frozen importlib._bootstrap>:357)"}, {"pid": 106699, "tid": 106699, "ts": 58221759496.85, "ph": "X", "cat": "fee", "dur": 48.832, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221759546.103, "ph": "X", "cat": "fee", "dur": 0.07, "name": "list.extend"}, {"pid": 106699, "tid": 106699, "ts": 58221759546.364, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759546.684, "ph": "X", "cat": "fee", "dur": 0.351, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221759547.225, "ph": "X", "cat": "fee", "dur": 0.12, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759547.636, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759548.067, "ph": "X", "cat": "fee", "dur": 1.943, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759547.967, "ph": "X", "cat": "fee", "dur": 2.094, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759550.471, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759551.543, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759551.734, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759551.333, "ph": "X", "cat": "fee", "dur": 0.491, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759551.894, "ph": "X", "cat": "fee", "dur": 0.14, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759551.123, "ph": "X", "cat": "fee", "dur": 1.011, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759552.385, "ph": "X", "cat": "fee", "dur": 0.18, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759553.307, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759553.457, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759553.176, "ph": "X", "cat": "fee", "dur": 0.371, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759553.687, "ph": "X", "cat": "fee", "dur": 0.071, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759553.036, "ph": "X", "cat": "fee", "dur": 0.772, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759554.058, "ph": "X", "cat": "fee", "dur": 0.12, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759554.88, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759555.03, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759554.779, "ph": "X", "cat": "fee", "dur": 0.331, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759555.18, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759554.659, "ph": "X", "cat": "fee", "dur": 0.651, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759555.511, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759556.292, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759556.413, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759556.182, "ph": "X", "cat": "fee", "dur": 0.341, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759556.593, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759556.052, "ph": "X", "cat": "fee", "dur": 0.651, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759556.873, "ph": "X", "cat": "fee", "dur": 0.101, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759557.495, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759557.635, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759557.394, "ph": "X", "cat": "fee", "dur": 0.331, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759557.805, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759557.264, "ph": "X", "cat": "fee", "dur": 0.641, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759558.076, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759547.516, "ph": "X", "cat": "fee", "dur": 10.97, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221759558.867, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759559.057, "ph": "X", "cat": "fee", "dur": 0.201, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221759559.418, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759559.588, "ph": "X", "cat": "fee", "dur": 0.141, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221759559.839, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759560.15, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759560.49, "ph": "X", "cat": "fee", "dur": 1.774, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759560.4, "ph": "X", "cat": "fee", "dur": 1.924, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759562.654, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759563.486, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759563.656, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759563.336, "ph": "X", "cat": "fee", "dur": 0.42, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759563.826, "ph": "X", "cat": "fee", "dur": 0.071, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759563.155, "ph": "X", "cat": "fee", "dur": 0.812, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759564.187, "ph": "X", "cat": "fee", "dur": 0.12, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759564.908, "ph": "X", "cat": "fee", "dur": 0.031, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759565.049, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759564.788, "ph": "X", "cat": "fee", "dur": 0.341, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759565.219, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759564.668, "ph": "X", "cat": "fee", "dur": 0.651, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759565.54, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759566.291, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759566.421, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759566.201, "ph": "X", "cat": "fee", "dur": 0.3, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759566.572, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759566.071, "ph": "X", "cat": "fee", "dur": 0.621, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759566.852, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759567.473, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759567.604, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759567.373, "ph": "X", "cat": "fee", "dur": 0.321, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759567.764, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759567.253, "ph": "X", "cat": "fee", "dur": 0.621, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759568.024, "ph": "X", "cat": "fee", "dur": 0.091, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759568.696, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759568.826, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759568.605, "ph": "X", "cat": "fee", "dur": 0.311, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759568.986, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759568.475, "ph": "X", "cat": "fee", "dur": 0.611, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759569.247, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759560.059, "ph": "X", "cat": "fee", "dur": 9.538, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221759569.798, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759569.948, "ph": "X", "cat": "fee", "dur": 0.18, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221759570.249, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759570.499, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759570.8, "ph": "X", "cat": "fee", "dur": 1.713, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759570.719, "ph": "X", "cat": "fee", "dur": 1.844, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759572.863, "ph": "X", "cat": "fee", "dur": 0.061, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759573.705, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759573.845, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759573.595, "ph": "X", "cat": "fee", "dur": 0.34, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759574.026, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759573.455, "ph": "X", "cat": "fee", "dur": 0.691, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759574.366, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759575.178, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759575.318, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759575.078, "ph": "X", "cat": "fee", "dur": 0.33, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759575.508, "ph": "X", "cat": "fee", "dur": 0.071, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759574.897, "ph": "X", "cat": "fee", "dur": 0.722, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759575.799, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759576.51, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759576.641, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759576.42, "ph": "X", "cat": "fee", "dur": 0.301, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759576.821, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759576.28, "ph": "X", "cat": "fee", "dur": 0.641, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759577.111, "ph": "X", "cat": "fee", "dur": 0.101, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759577.763, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759577.893, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759577.673, "ph": "X", "cat": "fee", "dur": 0.32, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759578.053, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759577.542, "ph": "X", "cat": "fee", "dur": 0.621, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759578.344, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759578.945, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759579.075, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759578.845, "ph": "X", "cat": "fee", "dur": 0.33, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759579.235, "ph": "X", "cat": "fee", "dur": 0.061, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759578.724, "ph": "X", "cat": "fee", "dur": 0.612, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759579.506, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759570.419, "ph": "X", "cat": "fee", "dur": 9.418, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221759580.067, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759580.237, "ph": "X", "cat": "fee", "dur": 0.171, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221759580.528, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759580.848, "ph": "X", "cat": "fee", "dur": 0.051, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759581.139, "ph": "X", "cat": "fee", "dur": 2.024, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759581.069, "ph": "X", "cat": "fee", "dur": 2.154, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759583.544, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759584.345, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759584.475, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759584.205, "ph": "X", "cat": "fee", "dur": 0.36, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759584.636, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759584.034, "ph": "X", "cat": "fee", "dur": 0.702, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759584.916, "ph": "X", "cat": "fee", "dur": 0.14, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759585.788, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759585.918, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759585.688, "ph": "X", "cat": "fee", "dur": 0.31, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759586.068, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759585.547, "ph": "X", "cat": "fee", "dur": 0.621, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759586.359, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759587.1, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759587.23, "ph": "X", "cat": "fee", "dur": 0.031, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759587.01, "ph": "X", "cat": "fee", "dur": 0.301, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759587.381, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759586.87, "ph": "X", "cat": "fee", "dur": 0.611, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759587.651, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759588.353, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759588.483, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759588.242, "ph": "X", "cat": "fee", "dur": 0.341, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759588.653, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759588.112, "ph": "X", "cat": "fee", "dur": 0.631, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759588.914, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759589.565, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759589.695, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759589.475, "ph": "X", "cat": "fee", "dur": 0.32, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759589.865, "ph": "X", "cat": "fee", "dur": 0.051, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759589.354, "ph": "X", "cat": "fee", "dur": 0.602, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759590.116, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759580.768, "ph": "X", "cat": "fee", "dur": 9.669, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221759590.637, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759590.787, "ph": "X", "cat": "fee", "dur": 0.191, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221759591.078, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759591.308, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759591.589, "ph": "X", "cat": "fee", "dur": 1.703, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759591.499, "ph": "X", "cat": "fee", "dur": 1.833, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759593.623, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759594.324, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759594.464, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759594.204, "ph": "X", "cat": "fee", "dur": 0.36, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759594.634, "ph": "X", "cat": "fee", "dur": 0.051, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759594.073, "ph": "X", "cat": "fee", "dur": 0.652, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759594.905, "ph": "X", "cat": "fee", "dur": 0.14, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759595.686, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759595.827, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759595.596, "ph": "X", "cat": "fee", "dur": 0.311, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759595.987, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759595.466, "ph": "X", "cat": "fee", "dur": 0.641, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759596.267, "ph": "X", "cat": "fee", "dur": 0.101, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759597.029, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759597.159, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759596.929, "ph": "X", "cat": "fee", "dur": 0.31, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759597.309, "ph": "X", "cat": "fee", "dur": 0.071, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759596.809, "ph": "X", "cat": "fee", "dur": 0.611, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759597.6, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759598.371, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759598.502, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759598.271, "ph": "X", "cat": "fee", "dur": 0.321, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759598.662, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759598.151, "ph": "X", "cat": "fee", "dur": 0.621, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759598.943, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759599.694, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759599.834, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759599.594, "ph": "X", "cat": "fee", "dur": 0.36, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759600.025, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759599.474, "ph": "X", "cat": "fee", "dur": 0.641, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759600.285, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759591.238, "ph": "X", "cat": "fee", "dur": 9.408, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221759600.866, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759601.026, "ph": "X", "cat": "fee", "dur": 0.722, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221759601.848, "ph": "X", "cat": "fee", "dur": 0.14, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759602.209, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759602.529, "ph": "X", "cat": "fee", "dur": 1.994, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759602.429, "ph": "X", "cat": "fee", "dur": 2.154, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759604.964, "ph": "X", "cat": "fee", "dur": 0.04, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759605.996, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759606.146, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759605.856, "ph": "X", "cat": "fee", "dur": 0.38, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759606.296, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759605.685, "ph": "X", "cat": "fee", "dur": 0.752, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759606.637, "ph": "X", "cat": "fee", "dur": 0.13, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759607.449, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759607.579, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759607.338, "ph": "X", "cat": "fee", "dur": 0.331, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759607.739, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759607.188, "ph": "X", "cat": "fee", "dur": 0.651, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759608.02, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759608.631, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759608.761, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759608.541, "ph": "X", "cat": "fee", "dur": 0.3, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759608.921, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759608.42, "ph": "X", "cat": "fee", "dur": 0.622, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759609.202, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759609.923, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759610.043, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759609.823, "ph": "X", "cat": "fee", "dur": 0.331, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759610.224, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759609.703, "ph": "X", "cat": "fee", "dur": 0.661, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759610.524, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759611.125, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759611.266, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759611.025, "ph": "X", "cat": "fee", "dur": 0.331, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759611.426, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759610.905, "ph": "X", "cat": "fee", "dur": 0.621, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759611.676, "ph": "X", "cat": "fee", "dur": 0.101, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759602.139, "ph": "X", "cat": "fee", "dur": 9.798, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221759612.328, "ph": "X", "cat": "fee", "dur": 0.33, "name": "__init__ (<frozen importlib._bootstrap>:357)"}, {"pid": 106699, "tid": 106699, "ts": 58221759495.328, "ph": "X", "cat": "fee", "dur": 117.491, "name": "_get_spec (<frozen importlib._bootstrap_external>:1464)"}, {"pid": 106699, "tid": 106699, "ts": 58221759616.836, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759616.706, "ph": "X", "cat": "fee", "dur": 0.441, "name": "_find_parent_path_names (<frozen importlib._bootstrap_external>:1283)"}, {"pid": 106699, "tid": 106699, "ts": 58221759617.497, "ph": "X", "cat": "fee", "dur": 0.111, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759615.884, "ph": "X", "cat": "fee", "dur": 1.774, "name": "_get_parent_path (<frozen importlib._bootstrap_external>:1293)"}, {"pid": 106699, "tid": 106699, "ts": 58221759614.672, "ph": "X", "cat": "fee", "dur": 3.827, "name": "__init__ (<frozen importlib._bootstrap_external>:1276)"}, {"pid": 106699, "tid": 106699, "ts": 58221759494.997, "ph": "X", "cat": "fee", "dur": 123.683, "name": "find_spec (<frozen importlib._bootstrap_external>:1496)"}, {"pid": 106699, "tid": 106699, "ts": 58221759619.07, "ph": "X", "cat": "fee", "dur": 0.091, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759618.91, "ph": "X", "cat": "fee", "dur": 0.321, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221759486.03, "ph": "X", "cat": "fee", "dur": 133.631, "name": "_find_spec (<frozen importlib._bootstrap>:1054)"}, {"pid": 106699, "tid": 106699, "ts": 58221759620.283, "ph": "X", "cat": "fee", "dur": 0.27, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759620.673, "ph": "X", "cat": "fee", "dur": 0.171, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759621.014, "ph": "X", "cat": "fee", "dur": 0.531, "name": "_new_module (<frozen importlib._bootstrap>:48)"}, {"pid": 106699, "tid": 106699, "ts": 58221759621.906, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759622.106, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759623.178, "ph": "X", "cat": "fee", "dur": 2.835, "name": "type.__new__"}, {"pid": 106699, "tid": 106699, "ts": 58221759626.725, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759626.995, "ph": "X", "cat": "fee", "dur": 0.121, "name": "parent (<frozen importlib._bootstrap>:405)"}, {"pid": 106699, "tid": 106699, "ts": 58221759627.406, "ph": "X", "cat": "fee", "dur": 1.473, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759629.159, "ph": "X", "cat": "fee", "dur": 0.06, "name": "has_location (<frozen importlib._bootstrap>:413)"}, {"pid": 106699, "tid": 106699, "ts": 58221759621.775, "ph": "X", "cat": "fee", "dur": 7.545, "name": "_init_module_attrs (<frozen importlib._bootstrap>:493)"}, {"pid": 106699, "tid": 106699, "ts": 58221759620.162, "ph": "X", "cat": "fee", "dur": 9.278, "name": "module_from_spec (<frozen importlib._bootstrap>:566)"}, {"pid": 106699, "tid": 106699, "ts": 58221759630.412, "ph": "X", "cat": "fee", "dur": 0.05, "name": "exec_module (<frozen importlib._bootstrap_external>:1363)"}, {"pid": 106699, "tid": 106699, "ts": 58221759630.672, "ph": "X", "cat": "fee", "dur": 0.1, "name": "dict.pop"}, {"pid": 106699, "tid": 106699, "ts": 58221759631.143, "ph": "X", "cat": "fee", "dur": 0.18, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759619.972, "ph": "X", "cat": "fee", "dur": 11.532, "name": "_load_unlocked (<frozen importlib._bootstrap>:666)"}, {"pid": 106699, "tid": 106699, "ts": 58221759485.569, "ph": "X", "cat": "fee", "dur": 146.115, "name": "_find_and_load_unlocked (<frozen importlib._bootstrap>:1120)"}, {"pid": 106699, "tid": 106699, "ts": 58221759632.325, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_thread.get_ident"}, {"pid": 106699, "tid": 106699, "ts": 58221759633.347, "ph": "X", "cat": "fee", "dur": 0.08, "name": "_thread.lock.__exit__"}, {"pid": 106699, "tid": 106699, "ts": 58221759632.175, "ph": "X", "cat": "fee", "dur": 1.403, "name": "release (<frozen importlib._bootstrap>:125)"}, {"pid": 106699, "tid": 106699, "ts": 58221759631.955, "ph": "X", "cat": "fee", "dur": 1.733, "name": "__exit__ (<frozen importlib._bootstrap>:173)"}, {"pid": 106699, "tid": 106699, "ts": 58221759634.069, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759634.299, "ph": "X", "cat": "fee", "dur": 0.09, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221759634.68, "ph": "X", "cat": "fee", "dur": 0.04, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759633.948, "ph": "X", "cat": "fee", "dur": 0.832, "name": "cb (<frozen importlib._bootstrap>:198)"}, {"pid": 106699, "tid": 106699, "ts": 58221759480.941, "ph": "X", "cat": "fee", "dur": 154.23, "name": "_find_and_load (<frozen importlib._bootstrap>:1165)"}, {"pid": 106699, "tid": 106699, "ts": 58221759480.259, "ph": "X", "cat": "fee", "dur": 155.202, "name": "builtins.__import__"}, {"pid": 106699, "tid": 106699, "ts": 58221759480.139, "ph": "X", "cat": "fee", "dur": 155.432, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:233)"}, {"pid": 106699, "tid": 106699, "ts": 58221759636.142, "ph": "X", "cat": "fee", "dur": 0.131, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759637.375, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759637.265, "ph": "X", "cat": "fee", "dur": 0.19, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221759637.976, "ph": "X", "cat": "fee", "dur": 0.24, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221759637.806, "ph": "X", "cat": "fee", "dur": 0.491, "name": "find_spec (/home/tim/.local/lib/python3.11/site-packages/_distutils_hack/__init__.py:89)"}, {"pid": 106699, "tid": 106699, "ts": 58221759638.577, "ph": "X", "cat": "fee", "dur": 0.04, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759638.487, "ph": "X", "cat": "fee", "dur": 0.16, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221759639.058, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759638.988, "ph": "X", "cat": "fee", "dur": 0.22, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221759639.629, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_imp.is_builtin"}, {"pid": 106699, "tid": 106699, "ts": 58221759639.499, "ph": "X", "cat": "fee", "dur": 0.421, "name": "find_spec (<frozen importlib._bootstrap>:748)"}, {"pid": 106699, "tid": 106699, "ts": 58221759640.18, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759640.09, "ph": "X", "cat": "fee", "dur": 0.17, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221759640.561, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759640.481, "ph": "X", "cat": "fee", "dur": 0.15, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221759641.152, "ph": "X", "cat": "fee", "dur": 0.25, "name": "_imp.find_frozen"}, {"pid": 106699, "tid": 106699, "ts": 58221759641.022, "ph": "X", "cat": "fee", "dur": 0.41, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:233)"}, {"pid": 106699, "tid": 106699, "ts": 58221759640.851, "ph": "X", "cat": "fee", "dur": 0.762, "name": "find_spec (<frozen importlib._bootstrap>:920)"}, {"pid": 106699, "tid": 106699, "ts": 58221759641.853, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759641.783, "ph": "X", "cat": "fee", "dur": 0.21, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221759642.274, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759642.204, "ph": "X", "cat": "fee", "dur": 0.14, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221759645.31, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759645.19, "ph": "X", "cat": "fee", "dur": 0.5, "name": "_find_parent_path_names (<frozen importlib._bootstrap_external>:1283)"}, {"pid": 106699, "tid": 106699, "ts": 58221759645.981, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759645.059, "ph": "X", "cat": "fee", "dur": 1.042, "name": "_get_parent_path (<frozen importlib._bootstrap_external>:1293)"}, {"pid": 106699, "tid": 106699, "ts": 58221759644.909, "ph": "X", "cat": "fee", "dur": 1.673, "name": "_recalculate (<frozen importlib._bootstrap_external>:1297)"}, {"pid": 106699, "tid": 106699, "ts": 58221759646.813, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.iter"}, {"pid": 106699, "tid": 106699, "ts": 58221759643.486, "ph": "X", "cat": "fee", "dur": 3.447, "name": "__iter__ (<frozen importlib._bootstrap_external>:1311)"}, {"pid": 106699, "tid": 106699, "ts": 58221759647.133, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759649.217, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759649.748, "ph": "X", "cat": "fee", "dur": 2.254, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759649.638, "ph": "X", "cat": "fee", "dur": 2.434, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759649.007, "ph": "X", "cat": "fee", "dur": 4.408, "name": "__init__ (<frozen zipimport>:64)"}, {"pid": 106699, "tid": 106699, "ts": 58221759655.299, "ph": "X", "cat": "fee", "dur": 1.653, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759655.198, "ph": "X", "cat": "fee", "dur": 1.784, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759655.078, "ph": "X", "cat": "fee", "dur": 2.154, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:150)"}, {"pid": 106699, "tid": 106699, "ts": 58221759654.888, "ph": "X", "cat": "fee", "dur": 2.514, "name": "_path_isdir (<frozen importlib._bootstrap_external>:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221759658.955, "ph": "X", "cat": "fee", "dur": 0.161, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1565)"}, {"pid": 106699, "tid": 106699, "ts": 58221759659.196, "ph": "X", "cat": "fee", "dur": 0.11, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1565)"}, {"pid": 106699, "tid": 106699, "ts": 58221759659.356, "ph": "X", "cat": "fee", "dur": 0.07, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1565)"}, {"pid": 106699, "tid": 106699, "ts": 58221759659.466, "ph": "X", "cat": "fee", "dur": 0.07, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1565)"}, {"pid": 106699, "tid": 106699, "ts": 58221759658.725, "ph": "X", "cat": "fee", "dur": 1.022, "name": "list.extend"}, {"pid": 106699, "tid": 106699, "ts": 58221759660.428, "ph": "X", "cat": "fee", "dur": 0.1, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1565)"}, {"pid": 106699, "tid": 106699, "ts": 58221759660.609, "ph": "X", "cat": "fee", "dur": 0.06, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1565)"}, {"pid": 106699, "tid": 106699, "ts": 58221759660.238, "ph": "X", "cat": "fee", "dur": 0.561, "name": "list.extend"}, {"pid": 106699, "tid": 106699, "ts": 58221759661.25, "ph": "X", "cat": "fee", "dur": 0.08, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1565)"}, {"pid": 106699, "tid": 106699, "ts": 58221759661.38, "ph": "X", "cat": "fee", "dur": 0.07, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1565)"}, {"pid": 106699, "tid": 106699, "ts": 58221759661.109, "ph": "X", "cat": "fee", "dur": 0.441, "name": "list.extend"}, {"pid": 106699, "tid": 106699, "ts": 58221759662.041, "ph": "X", "cat": "fee", "dur": 0.181, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221759661.911, "ph": "X", "cat": "fee", "dur": 0.351, "name": "_path_isabs (<frozen importlib._bootstrap_external>:180)"}, {"pid": 106699, "tid": 106699, "ts": 58221759658.144, "ph": "X", "cat": "fee", "dur": 4.568, "name": "__init__ (<frozen importlib._bootstrap_external>:1559)"}, {"pid": 106699, "tid": 106699, "ts": 58221759654.747, "ph": "X", "cat": "fee", "dur": 8.206, "name": "path_hook_for_FileFinder (<frozen importlib._bootstrap_external>:1696)"}, {"pid": 106699, "tid": 106699, "ts": 58221759648.175, "ph": "X", "cat": "fee", "dur": 14.878, "name": "_path_hooks (<frozen importlib._bootstrap_external>:1408)"}, {"pid": 106699, "tid": 106699, "ts": 58221759647.344, "ph": "X", "cat": "fee", "dur": 16.08, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221759663.604, "ph": "X", "cat": "fee", "dur": 0.12, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759664.035, "ph": "X", "cat": "fee", "dur": 0.13, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759664.556, "ph": "X", "cat": "fee", "dur": 1.683, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759664.436, "ph": "X", "cat": "fee", "dur": 1.853, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759667.081, "ph": "X", "cat": "fee", "dur": 11.441, "name": "posix.listdir"}, {"pid": 106699, "tid": 106699, "ts": 58221759678.783, "ph": "X", "cat": "fee", "dur": 0.12, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221759679.815, "ph": "X", "cat": "fee", "dur": 0.14, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221759666.87, "ph": "X", "cat": "fee", "dur": 13.185, "name": "_fill_cache (<frozen importlib._bootstrap_external>:1655)"}, {"pid": 106699, "tid": 106699, "ts": 58221759680.386, "ph": "X", "cat": "fee", "dur": 0.04, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759681.558, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759681.838, "ph": "X", "cat": "fee", "dur": 0.051, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759681.337, "ph": "X", "cat": "fee", "dur": 0.632, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759682.089, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759681.077, "ph": "X", "cat": "fee", "dur": 1.302, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759682.74, "ph": "X", "cat": "fee", "dur": 0.211, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759683.642, "ph": "X", "cat": "fee", "dur": 2.144, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759683.572, "ph": "X", "cat": "fee", "dur": 2.274, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759683.472, "ph": "X", "cat": "fee", "dur": 2.564, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:150)"}, {"pid": 106699, "tid": 106699, "ts": 58221759683.341, "ph": "X", "cat": "fee", "dur": 2.916, "name": "_path_isfile (<frozen importlib._bootstrap_external>:159)"}, {"pid": 106699, "tid": 106699, "ts": 58221759686.898, "ph": "X", "cat": "fee", "dur": 0.21, "name": "__init__ (<frozen importlib._bootstrap_external>:1220)"}, {"pid": 106699, "tid": 106699, "ts": 58221759687.73, "ph": "X", "cat": "fee", "dur": 0.07, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221759688.03, "ph": "X", "cat": "fee", "dur": 0.12, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221759687.93, "ph": "X", "cat": "fee", "dur": 0.27, "name": "_path_isabs (<frozen importlib._bootstrap_external>:180)"}, {"pid": 106699, "tid": 106699, "ts": 58221759688.751, "ph": "X", "cat": "fee", "dur": 0.361, "name": "__init__ (<frozen importlib._bootstrap>:357)"}, {"pid": 106699, "tid": 106699, "ts": 58221759687.519, "ph": "X", "cat": "fee", "dur": 2.204, "name": "spec_from_file_location (<frozen importlib._bootstrap_external>:778)"}, {"pid": 106699, "tid": 106699, "ts": 58221759686.577, "ph": "X", "cat": "fee", "dur": 3.256, "name": "_get_spec (<frozen importlib._bootstrap_external>:1599)"}, {"pid": 106699, "tid": 106699, "ts": 58221759663.925, "ph": "X", "cat": "fee", "dur": 26.059, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221759642.775, "ph": "X", "cat": "fee", "dur": 47.469, "name": "_get_spec (<frozen importlib._bootstrap_external>:1464)"}, {"pid": 106699, "tid": 106699, "ts": 58221759642.565, "ph": "X", "cat": "fee", "dur": 47.85, "name": "find_spec (<frozen importlib._bootstrap_external>:1496)"}, {"pid": 106699, "tid": 106699, "ts": 58221759690.805, "ph": "X", "cat": "fee", "dur": 0.08, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759690.665, "ph": "X", "cat": "fee", "dur": 0.261, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221759636.583, "ph": "X", "cat": "fee", "dur": 54.753, "name": "_find_spec (<frozen importlib._bootstrap>:1054)"}, {"pid": 106699, "tid": 106699, "ts": 58221759691.657, "ph": "X", "cat": "fee", "dur": 0.08, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221759692.048, "ph": "X", "cat": "fee", "dur": 0.12, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759692.408, "ph": "X", "cat": "fee", "dur": 0.171, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759793.008, "ph": "X", "cat": "fee", "dur": 0.27, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759792.587, "ph": "X", "cat": "fee", "dur": 0.962, "name": "parent (<frozen importlib._bootstrap>:405)"}, {"pid": 106699, "tid": 106699, "ts": 58221759693.15, "ph": "X", "cat": "fee", "dur": 100.97, "name": "_imp.create_dynamic"}, {"pid": 106699, "tid": 106699, "ts": 58221759693.019, "ph": "X", "cat": "fee", "dur": 101.221, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:233)"}, {"pid": 106699, "tid": 106699, "ts": 58221759794.921, "ph": "X", "cat": "fee", "dur": 0.351, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759692.769, "ph": "X", "cat": "fee", "dur": 102.643, "name": "create_module (<frozen importlib._bootstrap_external>:1231)"}, {"pid": 106699, "tid": 106699, "ts": 58221759795.973, "ph": "X", "cat": "fee", "dur": 0.12, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759796.214, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759796.344, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759796.624, "ph": "X", "cat": "fee", "dur": 1.593, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759798.458, "ph": "X", "cat": "fee", "dur": 0.07, "name": "has_location (<frozen importlib._bootstrap>:413)"}, {"pid": 106699, "tid": 106699, "ts": 58221759798.698, "ph": "X", "cat": "fee", "dur": 0.151, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759798.939, "ph": "X", "cat": "fee", "dur": 0.601, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759800.351, "ph": "X", "cat": "fee", "dur": 0.311, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221759800.902, "ph": "X", "cat": "fee", "dur": 0.081, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221759800.031, "ph": "X", "cat": "fee", "dur": 1.032, "name": "_get_cached (<frozen importlib._bootstrap_external>:567)"}, {"pid": 106699, "tid": 106699, "ts": 58221759799.67, "ph": "X", "cat": "fee", "dur": 1.543, "name": "cached (<frozen importlib._bootstrap>:392)"}, {"pid": 106699, "tid": 106699, "ts": 58221759795.793, "ph": "X", "cat": "fee", "dur": 5.51, "name": "_init_module_attrs (<frozen importlib._bootstrap>:493)"}, {"pid": 106699, "tid": 106699, "ts": 58221759692.308, "ph": "X", "cat": "fee", "dur": 109.095, "name": "module_from_spec (<frozen importlib._bootstrap>:566)"}, {"pid": 106699, "tid": 106699, "ts": 58221759937.389, "ph": "X", "cat": "fee", "dur": 1.894, "name": "_check_methods (<frozen _collections_abc>:78)"}, {"pid": 106699, "tid": 106699, "ts": 58221759935.556, "ph": "X", "cat": "fee", "dur": 3.937, "name": "__subclasshook__ (<frozen _collections_abc>:362)"}, {"pid": 106699, "tid": 106699, "ts": 58221759933.893, "ph": "X", "cat": "fee", "dur": 8.215, "name": "_abc._abc_subclasscheck"}, {"pid": 106699, "tid": 106699, "ts": 58221759933.732, "ph": "X", "cat": "fee", "dur": 8.466, "name": "__subclasscheck__ (<frozen abc>:121)"}, {"pid": 106699, "tid": 106699, "ts": 58221759932.931, "ph": "X", "cat": "fee", "dur": 9.468, "name": "_abc._abc_register"}, {"pid": 106699, "tid": 106699, "ts": 58221759932.3, "ph": "X", "cat": "fee", "dur": 10.169, "name": "register (<frozen abc>:110)"}, {"pid": 106699, "tid": 106699, "ts": 58221759930.266, "ph": "X", "cat": "fee", "dur": 12.353, "name": "<module> (<string>:1)"}, {"pid": 106699, "tid": 106699, "ts": 58221759945.795, "ph": "X", "cat": "fee", "dur": 0.11, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221759946.416, "ph": "X", "cat": "fee", "dur": 0.22, "name": "__init__ (<frozen importlib._bootstrap>:165)"}, {"pid": 106699, "tid": 106699, "ts": 58221759947.188, "ph": "X", "cat": "fee", "dur": 0.16, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759948.7, "ph": "X", "cat": "fee", "dur": 0.211, "name": "_thread.allocate_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759949.041, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_thread.allocate_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759948.52, "ph": "X", "cat": "fee", "dur": 0.822, "name": "__init__ (<frozen importlib._bootstrap>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759950.093, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759947.037, "ph": "X", "cat": "fee", "dur": 3.206, "name": "_get_module_lock (<frozen importlib._bootstrap>:179)"}, {"pid": 106699, "tid": 106699, "ts": 58221759950.624, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_thread.get_ident"}, {"pid": 106699, "tid": 106699, "ts": 58221759951.796, "ph": "X", "cat": "fee", "dur": 0.13, "name": "_thread.lock.__exit__"}, {"pid": 106699, "tid": 106699, "ts": 58221759950.534, "ph": "X", "cat": "fee", "dur": 1.683, "name": "acquire (<frozen importlib._bootstrap>:100)"}, {"pid": 106699, "tid": 106699, "ts": 58221759946.867, "ph": "X", "cat": "fee", "dur": 5.44, "name": "__enter__ (<frozen importlib._bootstrap>:169)"}, {"pid": 106699, "tid": 106699, "ts": 58221759952.568, "ph": "X", "cat": "fee", "dur": 0.07, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221759953.019, "ph": "X", "cat": "fee", "dur": 0.11, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759954.461, "ph": "X", "cat": "fee", "dur": 0.04, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759954.341, "ph": "X", "cat": "fee", "dur": 0.26, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221759955.253, "ph": "X", "cat": "fee", "dur": 0.41, "name": "builtins.locals"}, {"pid": 106699, "tid": 106699, "ts": 58221759955.874, "ph": "X", "cat": "fee", "dur": 0.631, "name": "str.format"}, {"pid": 106699, "tid": 106699, "ts": 58221759956.876, "ph": "X", "cat": "fee", "dur": 0.31, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759957.357, "ph": "X", "cat": "fee", "dur": 0.05, "name": "<lambda> (/home/tim/.local/lib/python3.11/site-packages/_distutils_hack/__init__.py:96)"}, {"pid": 106699, "tid": 106699, "ts": 58221759954.992, "ph": "X", "cat": "fee", "dur": 2.545, "name": "find_spec (/home/tim/.local/lib/python3.11/site-packages/_distutils_hack/__init__.py:89)"}, {"pid": 106699, "tid": 106699, "ts": 58221759957.998, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759957.858, "ph": "X", "cat": "fee", "dur": 0.25, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221759958.609, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759958.519, "ph": "X", "cat": "fee", "dur": 0.2, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221759959.17, "ph": "X", "cat": "fee", "dur": 0.22, "name": "_imp.is_builtin"}, {"pid": 106699, "tid": 106699, "ts": 58221759959.02, "ph": "X", "cat": "fee", "dur": 0.461, "name": "find_spec (<frozen importlib._bootstrap>:748)"}, {"pid": 106699, "tid": 106699, "ts": 58221759959.761, "ph": "X", "cat": "fee", "dur": 0.04, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759959.691, "ph": "X", "cat": "fee", "dur": 0.14, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221759960.102, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759960.042, "ph": "X", "cat": "fee", "dur": 0.13, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221759961.034, "ph": "X", "cat": "fee", "dur": 0.27, "name": "_imp.find_frozen"}, {"pid": 106699, "tid": 106699, "ts": 58221759960.913, "ph": "X", "cat": "fee", "dur": 0.451, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:233)"}, {"pid": 106699, "tid": 106699, "ts": 58221759960.673, "ph": "X", "cat": "fee", "dur": 0.872, "name": "find_spec (<frozen importlib._bootstrap>:920)"}, {"pid": 106699, "tid": 106699, "ts": 58221759961.825, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759961.735, "ph": "X", "cat": "fee", "dur": 0.16, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221759962.156, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221759962.096, "ph": "X", "cat": "fee", "dur": 0.13, "name": "__enter__ (<frozen importlib._bootstrap>:1026)"}, {"pid": 106699, "tid": 106699, "ts": 58221759963.067, "ph": "X", "cat": "fee", "dur": 0.081, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759963.378, "ph": "X", "cat": "fee", "dur": 0.331, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221759963.959, "ph": "X", "cat": "fee", "dur": 0.11, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759964.39, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759964.921, "ph": "X", "cat": "fee", "dur": 4.007, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759964.771, "ph": "X", "cat": "fee", "dur": 4.218, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759969.65, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759971.052, "ph": "X", "cat": "fee", "dur": 0.111, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759971.413, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759970.742, "ph": "X", "cat": "fee", "dur": 0.851, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759971.734, "ph": "X", "cat": "fee", "dur": 0.25, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759970.451, "ph": "X", "cat": "fee", "dur": 1.924, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759972.786, "ph": "X", "cat": "fee", "dur": 0.27, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759973.948, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759974.208, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759973.808, "ph": "X", "cat": "fee", "dur": 0.521, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759974.409, "ph": "X", "cat": "fee", "dur": 0.13, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759973.647, "ph": "X", "cat": "fee", "dur": 1.012, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759974.93, "ph": "X", "cat": "fee", "dur": 0.15, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759975.731, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759975.922, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759975.611, "ph": "X", "cat": "fee", "dur": 0.411, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759976.092, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759975.481, "ph": "X", "cat": "fee", "dur": 0.751, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759976.402, "ph": "X", "cat": "fee", "dur": 0.111, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759977.134, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759977.264, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759977.034, "ph": "X", "cat": "fee", "dur": 0.34, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759977.444, "ph": "X", "cat": "fee", "dur": 0.061, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759976.883, "ph": "X", "cat": "fee", "dur": 0.662, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759977.705, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759978.316, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759978.466, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759978.216, "ph": "X", "cat": "fee", "dur": 0.331, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759978.617, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759978.096, "ph": "X", "cat": "fee", "dur": 0.641, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759978.897, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759964.27, "ph": "X", "cat": "fee", "dur": 14.958, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221759979.558, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759979.749, "ph": "X", "cat": "fee", "dur": 0.17, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221759980.089, "ph": "X", "cat": "fee", "dur": 0.111, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759980.45, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759980.791, "ph": "X", "cat": "fee", "dur": 1.903, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759980.721, "ph": "X", "cat": "fee", "dur": 2.053, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759983.195, "ph": "X", "cat": "fee", "dur": 0.04, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759984.057, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759984.237, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759983.907, "ph": "X", "cat": "fee", "dur": 0.43, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759984.408, "ph": "X", "cat": "fee", "dur": 0.18, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759983.756, "ph": "X", "cat": "fee", "dur": 0.892, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759984.858, "ph": "X", "cat": "fee", "dur": 0.121, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759985.73, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759985.87, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759985.63, "ph": "X", "cat": "fee", "dur": 0.34, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759986.041, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759985.48, "ph": "X", "cat": "fee", "dur": 0.681, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759986.361, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759987.002, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759987.143, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759986.912, "ph": "X", "cat": "fee", "dur": 0.381, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759987.373, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759986.782, "ph": "X", "cat": "fee", "dur": 0.701, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759987.664, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759988.315, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759988.445, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759988.215, "ph": "X", "cat": "fee", "dur": 0.34, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759988.625, "ph": "X", "cat": "fee", "dur": 0.051, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759988.074, "ph": "X", "cat": "fee", "dur": 0.652, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759988.896, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759989.637, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759989.768, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759989.537, "ph": "X", "cat": "fee", "dur": 0.331, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759989.938, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759989.417, "ph": "X", "cat": "fee", "dur": 0.611, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759990.188, "ph": "X", "cat": "fee", "dur": 0.101, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759980.35, "ph": "X", "cat": "fee", "dur": 10.239, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221759990.84, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759991.04, "ph": "X", "cat": "fee", "dur": 0.24, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221759991.431, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221759991.561, "ph": "X", "cat": "fee", "dur": 0.15, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221759991.801, "ph": "X", "cat": "fee", "dur": 0.061, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759992.062, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221759992.352, "ph": "X", "cat": "fee", "dur": 1.724, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221759992.272, "ph": "X", "cat": "fee", "dur": 1.864, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221759994.426, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221759995.268, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759995.408, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759995.118, "ph": "X", "cat": "fee", "dur": 0.39, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759995.589, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759994.967, "ph": "X", "cat": "fee", "dur": 0.732, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759995.909, "ph": "X", "cat": "fee", "dur": 0.15, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759996.751, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759996.911, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759996.641, "ph": "X", "cat": "fee", "dur": 0.36, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759997.071, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759996.51, "ph": "X", "cat": "fee", "dur": 0.652, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759997.332, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759998.073, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759998.193, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759997.973, "ph": "X", "cat": "fee", "dur": 0.311, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759998.364, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759997.853, "ph": "X", "cat": "fee", "dur": 0.601, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759998.624, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759999.346, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759999.486, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221759999.245, "ph": "X", "cat": "fee", "dur": 0.401, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221759999.716, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221759999.115, "ph": "X", "cat": "fee", "dur": 0.702, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221759999.967, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221760000.578, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760000.708, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760000.478, "ph": "X", "cat": "fee", "dur": 0.33, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221760000.869, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760000.348, "ph": "X", "cat": "fee", "dur": 0.611, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221760001.119, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759992.002, "ph": "X", "cat": "fee", "dur": 9.598, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221760001.77, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760001.951, "ph": "X", "cat": "fee", "dur": 0.15, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221760002.211, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760002.441, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221760002.712, "ph": "X", "cat": "fee", "dur": 1.723, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221760002.632, "ph": "X", "cat": "fee", "dur": 1.843, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221760004.726, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221760005.698, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760005.838, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760005.557, "ph": "X", "cat": "fee", "dur": 0.361, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221760005.988, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760005.407, "ph": "X", "cat": "fee", "dur": 0.681, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221760006.269, "ph": "X", "cat": "fee", "dur": 0.12, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221760006.99, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760007.12, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760006.9, "ph": "X", "cat": "fee", "dur": 0.31, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221760007.281, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760006.76, "ph": "X", "cat": "fee", "dur": 0.631, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221760007.571, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221760008.172, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760008.302, "ph": "X", "cat": "fee", "dur": 0.031, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760008.072, "ph": "X", "cat": "fee", "dur": 0.311, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221760008.453, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760007.952, "ph": "X", "cat": "fee", "dur": 0.621, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221760008.743, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221760009.364, "ph": "X", "cat": "fee", "dur": 0.031, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760009.485, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760009.264, "ph": "X", "cat": "fee", "dur": 0.321, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221760009.655, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760009.134, "ph": "X", "cat": "fee", "dur": 0.631, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221760009.936, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221760010.537, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760010.667, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760010.437, "ph": "X", "cat": "fee", "dur": 0.32, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221760010.827, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760010.306, "ph": "X", "cat": "fee", "dur": 0.611, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221760011.088, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221760002.371, "ph": "X", "cat": "fee", "dur": 8.977, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221760011.559, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760011.709, "ph": "X", "cat": "fee", "dur": 0.13, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221760011.939, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760012.17, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221760012.44, "ph": "X", "cat": "fee", "dur": 1.734, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221760012.36, "ph": "X", "cat": "fee", "dur": 1.844, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221760014.484, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221760015.205, "ph": "X", "cat": "fee", "dur": 0.031, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760015.336, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760015.065, "ph": "X", "cat": "fee", "dur": 0.361, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221760015.496, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760014.935, "ph": "X", "cat": "fee", "dur": 0.661, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221760015.767, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221760016.528, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760016.658, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760016.428, "ph": "X", "cat": "fee", "dur": 0.31, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221760016.808, "ph": "X", "cat": "fee", "dur": 0.051, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760016.288, "ph": "X", "cat": "fee", "dur": 0.611, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221760017.069, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221760017.66, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760017.79, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760017.56, "ph": "X", "cat": "fee", "dur": 0.31, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221760017.941, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760017.44, "ph": "X", "cat": "fee", "dur": 0.601, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221760018.211, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221760018.912, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760019.043, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760018.802, "ph": "X", "cat": "fee", "dur": 0.341, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221760019.203, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760018.682, "ph": "X", "cat": "fee", "dur": 0.621, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221760019.463, "ph": "X", "cat": "fee", "dur": 0.101, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221760020.135, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760020.265, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760020.045, "ph": "X", "cat": "fee", "dur": 0.32, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221760020.425, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760019.924, "ph": "X", "cat": "fee", "dur": 0.611, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221760020.706, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221760012.09, "ph": "X", "cat": "fee", "dur": 8.956, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221760021.217, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760021.367, "ph": "X", "cat": "fee", "dur": 0.12, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221760021.577, "ph": "X", "cat": "fee", "dur": 0.061, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760021.798, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221760022.048, "ph": "X", "cat": "fee", "dur": 1.724, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221760021.968, "ph": "X", "cat": "fee", "dur": 1.844, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221760024.082, "ph": "X", "cat": "fee", "dur": 0.04, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221760024.814, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760024.944, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760024.693, "ph": "X", "cat": "fee", "dur": 0.341, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221760025.124, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760024.553, "ph": "X", "cat": "fee", "dur": 0.661, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221760025.385, "ph": "X", "cat": "fee", "dur": 0.12, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221760026.176, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760026.306, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760026.076, "ph": "X", "cat": "fee", "dur": 0.321, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221760026.467, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760025.946, "ph": "X", "cat": "fee", "dur": 0.611, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221760026.727, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221760027.529, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760027.659, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760027.438, "ph": "X", "cat": "fee", "dur": 0.301, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221760027.809, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760027.298, "ph": "X", "cat": "fee", "dur": 0.611, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221760028.07, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221760028.781, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760028.911, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760028.681, "ph": "X", "cat": "fee", "dur": 0.32, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221760029.092, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760028.561, "ph": "X", "cat": "fee", "dur": 0.621, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221760029.352, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221760030.174, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760030.334, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760030.073, "ph": "X", "cat": "fee", "dur": 0.361, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221760030.514, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760029.953, "ph": "X", "cat": "fee", "dur": 0.661, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221760030.785, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221760021.728, "ph": "X", "cat": "fee", "dur": 9.377, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221760031.256, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760031.416, "ph": "X", "cat": "fee", "dur": 0.311, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1421)"}, {"pid": 106699, "tid": 106699, "ts": 58221760031.827, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760032.047, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rpartition"}, {"pid": 106699, "tid": 106699, "ts": 58221760032.308, "ph": "X", "cat": "fee", "dur": 1.873, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221760032.238, "ph": "X", "cat": "fee", "dur": 2.003, "name": "_path_stat (<frozen importlib._bootstrap_external>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221760034.512, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_relax_case (<frozen importlib._bootstrap_external>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221760035.123, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760035.263, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760035.003, "ph": "X", "cat": "fee", "dur": 0.34, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221760035.413, "ph": "X", "cat": "fee", "dur": 0.071, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760034.872, "ph": "X", "cat": "fee", "dur": 0.662, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221760035.714, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221760036.365, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760036.485, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760036.265, "ph": "X", "cat": "fee", "dur": 0.311, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221760036.646, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760036.145, "ph": "X", "cat": "fee", "dur": 0.601, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221760036.906, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221760037.558, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760037.688, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760037.467, "ph": "X", "cat": "fee", "dur": 0.301, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221760037.838, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760037.347, "ph": "X", "cat": "fee", "dur": 0.581, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221760038.089, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221760038.68, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760038.8, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760038.569, "ph": "X", "cat": "fee", "dur": 0.331, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221760038.97, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760038.449, "ph": "X", "cat": "fee", "dur": 0.601, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221760039.211, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221760039.782, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760039.902, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.rstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760039.682, "ph": "X", "cat": "fee", "dur": 0.32, "name": "<listcomp> (<frozen importlib._bootstrap_external>:128)"}, {"pid": 106699, "tid": 106699, "ts": 58221760040.072, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760039.561, "ph": "X", "cat": "fee", "dur": 0.591, "name": "_path_join (<frozen importlib._bootstrap_external>:126)"}, {"pid": 106699, "tid": 106699, "ts": 58221760040.313, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221760031.967, "ph": "X", "cat": "fee", "dur": 8.596, "name": "find_spec (<frozen importlib._bootstrap_external>:1604)"}, {"pid": 106699, "tid": 106699, "ts": 58221760041.014, "ph": "X", "cat": "fee", "dur": 0.431, "name": "__init__ (<frozen importlib._bootstrap>:357)"}, {"pid": 106699, "tid": 106699, "ts": 58221759962.797, "ph": "X", "cat": "fee", "dur": 78.838, "name": "_get_spec (<frozen importlib._bootstrap_external>:1464)"}, {"pid": 106699, "tid": 106699, "ts": 58221759962.436, "ph": "X", "cat": "fee", "dur": 79.48, "name": "find_spec (<frozen importlib._bootstrap_external>:1496)"}, {"pid": 106699, "tid": 106699, "ts": 58221760042.367, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221760042.236, "ph": "X", "cat": "fee", "dur": 0.231, "name": "__exit__ (<frozen importlib._bootstrap>:1030)"}, {"pid": 106699, "tid": 106699, "ts": 58221759953.519, "ph": "X", "cat": "fee", "dur": 89.178, "name": "_find_spec (<frozen importlib._bootstrap>:1054)"}, {"pid": 106699, "tid": 106699, "ts": 58221760043.168, "ph": "X", "cat": "fee", "dur": 0.481, "name": "str.format"}, {"pid": 106699, "tid": 106699, "ts": 58221759952.858, "ph": "X", "cat": "fee", "dur": 91.643, "name": "_find_and_load_unlocked (<frozen importlib._bootstrap>:1120)"}, {"pid": 106699, "tid": 106699, "ts": 58221760045.362, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_thread.get_ident"}, {"pid": 106699, "tid": 106699, "ts": 58221760046.384, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_thread.lock.__exit__"}, {"pid": 106699, "tid": 106699, "ts": 58221760045.222, "ph": "X", "cat": "fee", "dur": 1.362, "name": "release (<frozen importlib._bootstrap>:125)"}, {"pid": 106699, "tid": 106699, "ts": 58221760044.991, "ph": "X", "cat": "fee", "dur": 1.704, "name": "__exit__ (<frozen importlib._bootstrap>:173)"}, {"pid": 106699, "tid": 106699, "ts": 58221760047.336, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221760047.546, "ph": "X", "cat": "fee", "dur": 0.07, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760047.877, "ph": "X", "cat": "fee", "dur": 0.05, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221760047.246, "ph": "X", "cat": "fee", "dur": 0.731, "name": "cb (<frozen importlib._bootstrap>:198)"}, {"pid": 106699, "tid": 106699, "ts": 58221759945.434, "ph": "X", "cat": "fee", "dur": 102.984, "name": "_find_and_load (<frozen importlib._bootstrap>:1165)"}, {"pid": 106699, "tid": 106699, "ts": 58221760053.968, "ph": "X", "cat": "fee", "dur": 0.852, "name": "__getattr__ (<frozen io>:61)"}, {"pid": 106699, "tid": 106699, "ts": 58221759802.435, "ph": "X", "cat": "fee", "dur": 257.915, "name": "_imp.exec_dynamic"}, {"pid": 106699, "tid": 106699, "ts": 58221759802.255, "ph": "X", "cat": "fee", "dur": 258.176, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:233)"}, {"pid": 106699, "tid": 106699, "ts": 58221760061.062, "ph": "X", "cat": "fee", "dur": 0.27, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759801.974, "ph": "X", "cat": "fee", "dur": 259.569, "name": "exec_module (<frozen importlib._bootstrap_external>:1239)"}, {"pid": 106699, "tid": 106699, "ts": 58221760062.094, "ph": "X", "cat": "fee", "dur": 0.12, "name": "dict.pop"}, {"pid": 106699, "tid": 106699, "ts": 58221760062.585, "ph": "X", "cat": "fee", "dur": 0.13, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221759691.877, "ph": "X", "cat": "fee", "dur": 370.988, "name": "_load_unlocked (<frozen importlib._bootstrap>:666)"}, {"pid": 106699, "tid": 106699, "ts": 58221760063.176, "ph": "X", "cat": "fee", "dur": 0.17, "name": "list.pop"}, {"pid": 106699, "tid": 106699, "ts": 58221760063.737, "ph": "X", "cat": "fee", "dur": 0.28, "name": "builtins.setattr"}, {"pid": 106699, "tid": 106699, "ts": 58221759479.338, "ph": "X", "cat": "fee", "dur": 584.769, "name": "_find_and_load_unlocked (<frozen importlib._bootstrap>:1120)"}, {"pid": 106699, "tid": 106699, "ts": 58221760064.709, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_thread.get_ident"}, {"pid": 106699, "tid": 106699, "ts": 58221760065.53, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_thread.lock.__exit__"}, {"pid": 106699, "tid": 106699, "ts": 58221760064.608, "ph": "X", "cat": "fee", "dur": 1.072, "name": "release (<frozen importlib._bootstrap>:125)"}, {"pid": 106699, "tid": 106699, "ts": 58221760064.408, "ph": "X", "cat": "fee", "dur": 1.433, "name": "__exit__ (<frozen importlib._bootstrap>:173)"}, {"pid": 106699, "tid": 106699, "ts": 58221760066.181, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221760066.362, "ph": "X", "cat": "fee", "dur": 0.07, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760066.642, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221760066.081, "ph": "X", "cat": "fee", "dur": 0.641, "name": "cb (<frozen importlib._bootstrap>:198)"}, {"pid": 106699, "tid": 106699, "ts": 58221759473.216, "ph": "X", "cat": "fee", "dur": 593.827, "name": "_find_and_load (<frozen importlib._bootstrap>:1165)"}, {"pid": 106699, "tid": 106699, "ts": 58221760069.347, "ph": "X", "cat": "fee", "dur": 0.722, "name": "MDD (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/readmdict.py:45)"}, {"pid": 106699, "tid": 106699, "ts": 58221760068.355, "ph": "X", "cat": "fee", "dur": 9.859, "name": "builtins.__build_class__"}, {"pid": 106699, "tid": 106699, "ts": 58221760080.859, "ph": "X", "cat": "fee", "dur": 0.561, "name": "MDX (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/readmdict.py:131)"}, {"pid": 106699, "tid": 106699, "ts": 58221760078.545, "ph": "X", "cat": "fee", "dur": 8.696, "name": "builtins.__build_class__"}, {"pid": 106699, "tid": 106699, "ts": 58221758833.763, "ph": "X", "cat": "fee", "dur": 1253.598, "name": "<module> (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/readmdict.py:1)"}, {"pid": 106699, "tid": 106699, "ts": 58221758831.729, "ph": "X", "cat": "fee", "dur": 1255.772, "name": "builtins.exec"}, {"pid": 106699, "tid": 106699, "ts": 58221758831.569, "ph": "X", "cat": "fee", "dur": 1256.003, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:233)"}, {"pid": 106699, "tid": 106699, "ts": 58221758770.695, "ph": "X", "cat": "fee", "dur": 1317.047, "name": "exec_module (<frozen importlib._bootstrap_external>:934)"}, {"pid": 106699, "tid": 106699, "ts": 58221760088.704, "ph": "X", "cat": "fee", "dur": 0.1, "name": "dict.pop"}, {"pid": 106699, "tid": 106699, "ts": 58221760089.114, "ph": "X", "cat": "fee", "dur": 0.181, "name": "_verbose_message (<frozen importlib._bootstrap>:244)"}, {"pid": 106699, "tid": 106699, "ts": 58221758754.144, "ph": "X", "cat": "fee", "dur": 1335.321, "name": "_load_unlocked (<frozen importlib._bootstrap>:666)"}, {"pid": 106699, "tid": 106699, "ts": 58221758720.36, "ph": "X", "cat": "fee", "dur": 1369.265, "name": "_find_and_load_unlocked (<frozen importlib._bootstrap>:1120)"}, {"pid": 106699, "tid": 106699, "ts": 58221760090.086, "ph": "X", "cat": "fee", "dur": 0.03, "name": "_thread.get_ident"}, {"pid": 106699, "tid": 106699, "ts": 58221760090.677, "ph": "X", "cat": "fee", "dur": 0.091, "name": "_thread.lock.__exit__"}, {"pid": 106699, "tid": 106699, "ts": 58221760089.966, "ph": "X", "cat": "fee", "dur": 0.872, "name": "release (<frozen importlib._bootstrap>:125)"}, {"pid": 106699, "tid": 106699, "ts": 58221760089.816, "ph": "X", "cat": "fee", "dur": 1.102, "name": "__exit__ (<frozen importlib._bootstrap>:173)"}, {"pid": 106699, "tid": 106699, "ts": 58221760091.238, "ph": "X", "cat": "fee", "dur": 0.031, "name": "_imp.acquire_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221760091.369, "ph": "X", "cat": "fee", "dur": 0.05, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760091.569, "ph": "X", "cat": "fee", "dur": 0.04, "name": "_imp.release_lock"}, {"pid": 106699, "tid": 106699, "ts": 58221760091.128, "ph": "X", "cat": "fee", "dur": 0.521, "name": "cb (<frozen importlib._bootstrap>:198)"}, {"pid": 106699, "tid": 106699, "ts": 58221758712.756, "ph": "X", "cat": "fee", "dur": 1379.204, "name": "_find_and_load (<frozen importlib._bootstrap>:1165)"}, {"pid": 106699, "tid": 106699, "ts": 58221760113.35, "ph": "X", "cat": "fee", "dur": 0.1, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760113.07, "ph": "X", "cat": "fee", "dur": 0.651, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760114.071, "ph": "X", "cat": "fee", "dur": 0.061, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760113.971, "ph": "X", "cat": "fee", "dur": 0.371, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760114.612, "ph": "X", "cat": "fee", "dur": 0.041, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760114.522, "ph": "X", "cat": "fee", "dur": 0.211, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760114.963, "ph": "X", "cat": "fee", "dur": 0.03, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760114.883, "ph": "X", "cat": "fee", "dur": 0.18, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760115.284, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760115.214, "ph": "X", "cat": "fee", "dur": 0.19, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760115.725, "ph": "X", "cat": "fee", "dur": 0.03, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760115.644, "ph": "X", "cat": "fee", "dur": 0.311, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760116.506, "ph": "X", "cat": "fee", "dur": 0.03, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760116.426, "ph": "X", "cat": "fee", "dur": 0.19, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760116.837, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760116.766, "ph": "X", "cat": "fee", "dur": 0.191, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760117.257, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760117.187, "ph": "X", "cat": "fee", "dur": 0.191, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760117.628, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760117.538, "ph": "X", "cat": "fee", "dur": 0.21, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760117.999, "ph": "X", "cat": "fee", "dur": 0.03, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760117.899, "ph": "X", "cat": "fee", "dur": 0.41, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760118.53, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760118.45, "ph": "X", "cat": "fee", "dur": 0.19, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760120.624, "ph": "X", "cat": "fee", "dur": 0.581, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760119.582, "ph": "X", "cat": "fee", "dur": 1.683, "name": "_get_handler (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1598)"}, {"pid": 106699, "tid": 106699, "ts": 58221760122.607, "ph": "X", "cat": "fee", "dur": 0.481, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760122.357, "ph": "X", "cat": "fee", "dur": 1.333, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:272)"}, {"pid": 106699, "tid": 106699, "ts": 58221760122.107, "ph": "X", "cat": "fee", "dur": 1.683, "name": "compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:225)"}, {"pid": 106699, "tid": 106699, "ts": 58221760110.926, "ph": "X", "cat": "fee", "dur": 13.024, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1337)"}, {"pid": 106699, "tid": 106699, "ts": 58221760125.533, "ph": "X", "cat": "fee", "dur": 0.09, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221760125.964, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760125.803, "ph": "X", "cat": "fee", "dur": 0.331, "name": "_get_sep (<frozen posixpath>:41)"}, {"pid": 106699, "tid": 106699, "ts": 58221760126.304, "ph": "X", "cat": "fee", "dur": 0.231, "name": "str.rfind"}, {"pid": 106699, "tid": 106699, "ts": 58221760125.212, "ph": "X", "cat": "fee", "dur": 1.744, "name": "basename (<frozen posixpath>:140)"}, {"pid": 106699, "tid": 106699, "ts": 58221760129.841, "ph": "X", "cat": "fee", "dur": 0.06, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760138.618, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760138.828, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.encode"}, {"pid": 106699, "tid": 106699, "ts": 58221760138.487, "ph": "X", "cat": "fee", "dur": 0.612, "name": "encode (<frozen os>:756)"}, {"pid": 106699, "tid": 106699, "ts": 58221760139.96, "ph": "X", "cat": "fee", "dur": 0.18, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58221760139.75, "ph": "X", "cat": "fee", "dur": 0.431, "name": "decode (<frozen os>:760)"}, {"pid": 106699, "tid": 106699, "ts": 58221760137.646, "ph": "X", "cat": "fee", "dur": 2.605, "name": "__getitem__ (<frozen os>:674)"}, {"pid": 106699, "tid": 106699, "ts": 58221760136.614, "ph": "X", "cat": "fee", "dur": 3.747, "name": "get (<frozen _collections_abc>:771)"}, {"pid": 106699, "tid": 106699, "ts": 58221760141.042, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760141.142, "ph": "X", "cat": "fee", "dur": 0.091, "name": "str.encode"}, {"pid": 106699, "tid": 106699, "ts": 58221760140.962, "ph": "X", "cat": "fee", "dur": 0.321, "name": "encode (<frozen os>:756)"}, {"pid": 106699, "tid": 106699, "ts": 58221760141.593, "ph": "X", "cat": "fee", "dur": 0.16, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58221760141.513, "ph": "X", "cat": "fee", "dur": 0.281, "name": "decode (<frozen os>:760)"}, {"pid": 106699, "tid": 106699, "ts": 58221760140.822, "ph": "X", "cat": "fee", "dur": 1.032, "name": "__getitem__ (<frozen os>:674)"}, {"pid": 106699, "tid": 106699, "ts": 58221760140.702, "ph": "X", "cat": "fee", "dur": 1.202, "name": "get (<frozen _collections_abc>:771)"}, {"pid": 106699, "tid": 106699, "ts": 58221760142.224, "ph": "X", "cat": "fee", "dur": 0.201, "name": "str.split"}, {"pid": 106699, "tid": 106699, "ts": 58221760142.795, "ph": "X", "cat": "fee", "dur": 0.061, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760149.919, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.lower"}, {"pid": 106699, "tid": 106699, "ts": 58221760150.43, "ph": "X", "cat": "fee", "dur": 0.15, "name": "str.split"}, {"pid": 106699, "tid": 106699, "ts": 58221760151.151, "ph": "X", "cat": "fee", "dur": 0.241, "name": "str.replace"}, {"pid": 106699, "tid": 106699, "ts": 58221760151.492, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.replace"}, {"pid": 106699, "tid": 106699, "ts": 58221760152.123, "ph": "X", "cat": "fee", "dur": 0.12, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760152.484, "ph": "X", "cat": "fee", "dur": 0.19, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760155.119, "ph": "X", "cat": "fee", "dur": 0.27, "name": "str.index"}, {"pid": 106699, "tid": 106699, "ts": 58221760157.303, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760157.673, "ph": "X", "cat": "fee", "dur": 0.171, "name": "str.isalnum"}, {"pid": 106699, "tid": 106699, "ts": 58221760158.064, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.isascii"}, {"pid": 106699, "tid": 106699, "ts": 58221760158.224, "ph": "X", "cat": "fee", "dur": 0.081, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760158.465, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.isalnum"}, {"pid": 106699, "tid": 106699, "ts": 58221760158.575, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.isascii"}, {"pid": 106699, "tid": 106699, "ts": 58221760158.675, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760158.806, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.isalnum"}, {"pid": 106699, "tid": 106699, "ts": 58221760158.906, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.isascii"}, {"pid": 106699, "tid": 106699, "ts": 58221760158.996, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760159.116, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.isalnum"}, {"pid": 106699, "tid": 106699, "ts": 58221760159.397, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.isalnum"}, {"pid": 106699, "tid": 106699, "ts": 58221760159.587, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760159.697, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.isascii"}, {"pid": 106699, "tid": 106699, "ts": 58221760159.797, "ph": "X", "cat": "fee", "dur": 0.091, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760160.088, "ph": "X", "cat": "fee", "dur": 0.17, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760157.162, "ph": "X", "cat": "fee", "dur": 3.146, "name": "normalize_encoding (/home/tim/mambaforge/envs/llm/lib/python3.11/encodings/__init__.py:43)"}, {"pid": 106699, "tid": 106699, "ts": 58221760160.849, "ph": "X", "cat": "fee", "dur": 0.051, "name": "str.lower"}, {"pid": 106699, "tid": 106699, "ts": 58221760160.99, "ph": "X", "cat": "fee", "dur": 0.25, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760161.39, "ph": "X", "cat": "fee", "dur": 0.041, "name": "str.lower"}, {"pid": 106699, "tid": 106699, "ts": 58221760154.828, "ph": "X", "cat": "fee", "dur": 7.073, "name": "_replace_encoding (/home/tim/mambaforge/envs/llm/lib/python3.11/locale.py:362)"}, {"pid": 106699, "tid": 106699, "ts": 58221760149.708, "ph": "X", "cat": "fee", "dur": 12.314, "name": "normalize (/home/tim/mambaforge/envs/llm/lib/python3.11/locale.py:396)"}, {"pid": 106699, "tid": 106699, "ts": 58221760162.272, "ph": "X", "cat": "fee", "dur": 0.16, "name": "str.find"}, {"pid": 106699, "tid": 106699, "ts": 58221760162.623, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.find"}, {"pid": 106699, "tid": 106699, "ts": 58221760163.164, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.find"}, {"pid": 106699, "tid": 106699, "ts": 58221760164.496, "ph": "X", "cat": "fee", "dur": 0.06, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760164.927, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760165.208, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760165.528, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760165.769, "ph": "X", "cat": "fee", "dur": 0.15, "name": "list.reverse"}, {"pid": 106699, "tid": 106699, "ts": 58221760145.47, "ph": "X", "cat": "fee", "dur": 20.519, "name": "_expand_lang (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:224)"}, {"pid": 106699, "tid": 106699, "ts": 58221760166.33, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760166.52, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760166.7, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760166.871, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760167.692, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.lower"}, {"pid": 106699, "tid": 106699, "ts": 58221760168.123, "ph": "X", "cat": "fee", "dur": 0.12, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760167.602, "ph": "X", "cat": "fee", "dur": 0.731, "name": "normalize (/home/tim/mambaforge/envs/llm/lib/python3.11/locale.py:396)"}, {"pid": 106699, "tid": 106699, "ts": 58221760168.564, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.find"}, {"pid": 106699, "tid": 106699, "ts": 58221760168.814, "ph": "X", "cat": "fee", "dur": 0.071, "name": "str.find"}, {"pid": 106699, "tid": 106699, "ts": 58221760168.975, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.find"}, {"pid": 106699, "tid": 106699, "ts": 58221760169.656, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760169.826, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.reverse"}, {"pid": 106699, "tid": 106699, "ts": 58221760167.201, "ph": "X", "cat": "fee", "dur": 2.705, "name": "_expand_lang (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:224)"}, {"pid": 106699, "tid": 106699, "ts": 58221760170.167, "ph": "X", "cat": "fee", "dur": 0.07, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760171.319, "ph": "X", "cat": "fee", "dur": 0.05, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221760171.62, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760171.499, "ph": "X", "cat": "fee", "dur": 0.281, "name": "_get_sep (<frozen posixpath>:41)"}, {"pid": 106699, "tid": 106699, "ts": 58221760172.431, "ph": "X", "cat": "fee", "dur": 0.15, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760172.752, "ph": "X", "cat": "fee", "dur": 0.11, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760173.193, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760173.353, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760173.664, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760173.834, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760171.139, "ph": "X", "cat": "fee", "dur": 3.056, "name": "join (<frozen posixpath>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221760175.437, "ph": "X", "cat": "fee", "dur": 4.188, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221760175.136, "ph": "X", "cat": "fee", "dur": 5.37, "name": "exists (<frozen genericpath>:16)"}, {"pid": 106699, "tid": 106699, "ts": 58221760181.108, "ph": "X", "cat": "fee", "dur": 0.04, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221760181.368, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760181.278, "ph": "X", "cat": "fee", "dur": 0.21, "name": "_get_sep (<frozen posixpath>:41)"}, {"pid": 106699, "tid": 106699, "ts": 58221760181.849, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760182.079, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760182.39, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760182.54, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760183.131, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760183.262, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760181.017, "ph": "X", "cat": "fee", "dur": 2.495, "name": "join (<frozen posixpath>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221760183.863, "ph": "X", "cat": "fee", "dur": 2.114, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221760183.773, "ph": "X", "cat": "fee", "dur": 2.494, "name": "exists (<frozen genericpath>:16)"}, {"pid": 106699, "tid": 106699, "ts": 58221760186.678, "ph": "X", "cat": "fee", "dur": 0.03, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221760186.878, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760186.808, "ph": "X", "cat": "fee", "dur": 0.151, "name": "_get_sep (<frozen posixpath>:41)"}, {"pid": 106699, "tid": 106699, "ts": 58221760187.199, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760187.379, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760187.63, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760187.76, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760187.97, "ph": "X", "cat": "fee", "dur": 0.061, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760188.101, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760186.608, "ph": "X", "cat": "fee", "dur": 1.713, "name": "join (<frozen posixpath>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221760188.622, "ph": "X", "cat": "fee", "dur": 1.673, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221760188.542, "ph": "X", "cat": "fee", "dur": 1.953, "name": "exists (<frozen genericpath>:16)"}, {"pid": 106699, "tid": 106699, "ts": 58221760190.876, "ph": "X", "cat": "fee", "dur": 0.03, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221760191.056, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760190.986, "ph": "X", "cat": "fee", "dur": 0.16, "name": "_get_sep (<frozen posixpath>:41)"}, {"pid": 106699, "tid": 106699, "ts": 58221760191.367, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760191.537, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760191.808, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760191.948, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760192.168, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760192.299, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760190.806, "ph": "X", "cat": "fee", "dur": 1.703, "name": "join (<frozen posixpath>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221760192.759, "ph": "X", "cat": "fee", "dur": 1.563, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221760192.689, "ph": "X", "cat": "fee", "dur": 1.824, "name": "exists (<frozen genericpath>:16)"}, {"pid": 106699, "tid": 106699, "ts": 58221760134.901, "ph": "X", "cat": "fee", "dur": 59.802, "name": "find (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:479)"}, {"pid": 106699, "tid": 106699, "ts": 58221760132.416, "ph": "X", "cat": "fee", "dur": 65.403, "name": "translation (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:519)"}, {"pid": 106699, "tid": 106699, "ts": 58221760129.581, "ph": "X", "cat": "fee", "dur": 68.779, "name": "dgettext (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:578)"}, {"pid": 106699, "tid": 106699, "ts": 58221760128.519, "ph": "X", "cat": "fee", "dur": 69.941, "name": "gettext (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:616)"}, {"pid": 106699, "tid": 106699, "ts": 58221760202.147, "ph": "X", "cat": "fee", "dur": 0.1, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760202.357, "ph": "X", "cat": "fee", "dur": 0.091, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760202.528, "ph": "X", "cat": "fee", "dur": 0.03, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760204.912, "ph": "X", "cat": "fee", "dur": 0.08, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760204.752, "ph": "X", "cat": "fee", "dur": 0.461, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760205.604, "ph": "X", "cat": "fee", "dur": 0.06, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760205.443, "ph": "X", "cat": "fee", "dur": 0.371, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760206.115, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760205.994, "ph": "X", "cat": "fee", "dur": 0.241, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760206.475, "ph": "X", "cat": "fee", "dur": 0.03, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760206.395, "ph": "X", "cat": "fee", "dur": 0.19, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760206.796, "ph": "X", "cat": "fee", "dur": 0.03, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760206.716, "ph": "X", "cat": "fee", "dur": 0.18, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760207.126, "ph": "X", "cat": "fee", "dur": 0.031, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760207.046, "ph": "X", "cat": "fee", "dur": 0.291, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760207.567, "ph": "X", "cat": "fee", "dur": 0.03, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760207.487, "ph": "X", "cat": "fee", "dur": 0.18, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760207.878, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760207.798, "ph": "X", "cat": "fee", "dur": 0.19, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760208.198, "ph": "X", "cat": "fee", "dur": 0.041, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760208.118, "ph": "X", "cat": "fee", "dur": 0.191, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760208.529, "ph": "X", "cat": "fee", "dur": 0.03, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760208.449, "ph": "X", "cat": "fee", "dur": 0.18, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760208.84, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760208.76, "ph": "X", "cat": "fee", "dur": 0.45, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760209.511, "ph": "X", "cat": "fee", "dur": 0.03, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760209.401, "ph": "X", "cat": "fee", "dur": 0.21, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760210.122, "ph": "X", "cat": "fee", "dur": 0.281, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760209.761, "ph": "X", "cat": "fee", "dur": 0.692, "name": "_get_handler (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1598)"}, {"pid": 106699, "tid": 106699, "ts": 58221760211.344, "ph": "X", "cat": "fee", "dur": 0.221, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760211.234, "ph": "X", "cat": "fee", "dur": 0.802, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:272)"}, {"pid": 106699, "tid": 106699, "ts": 58221760211.054, "ph": "X", "cat": "fee", "dur": 1.062, "name": "compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:225)"}, {"pid": 106699, "tid": 106699, "ts": 58221760203.79, "ph": "X", "cat": "fee", "dur": 8.486, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1337)"}, {"pid": 106699, "tid": 106699, "ts": 58221760201.826, "ph": "X", "cat": "fee", "dur": 11.402, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1647)"}, {"pid": 106699, "tid": 106699, "ts": 58221760213.619, "ph": "X", "cat": "fee", "dur": 0.06, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760199.242, "ph": "X", "cat": "fee", "dur": 14.507, "name": "add_argument_group (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1470)"}, {"pid": 106699, "tid": 106699, "ts": 58221760214.46, "ph": "X", "cat": "fee", "dur": 0.06, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760216.013, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760216.194, "ph": "X", "cat": "fee", "dur": 0.11, "name": "str.encode"}, {"pid": 106699, "tid": 106699, "ts": 58221760215.893, "ph": "X", "cat": "fee", "dur": 0.491, "name": "encode (<frozen os>:756)"}, {"pid": 106699, "tid": 106699, "ts": 58221760216.765, "ph": "X", "cat": "fee", "dur": 0.08, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58221760216.674, "ph": "X", "cat": "fee", "dur": 0.221, "name": "decode (<frozen os>:760)"}, {"pid": 106699, "tid": 106699, "ts": 58221760215.693, "ph": "X", "cat": "fee", "dur": 1.282, "name": "__getitem__ (<frozen os>:674)"}, {"pid": 106699, "tid": 106699, "ts": 58221760215.542, "ph": "X", "cat": "fee", "dur": 1.503, "name": "get (<frozen _collections_abc>:771)"}, {"pid": 106699, "tid": 106699, "ts": 58221760217.586, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760217.686, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.encode"}, {"pid": 106699, "tid": 106699, "ts": 58221760217.506, "ph": "X", "cat": "fee", "dur": 0.311, "name": "encode (<frozen os>:756)"}, {"pid": 106699, "tid": 106699, "ts": 58221760218.127, "ph": "X", "cat": "fee", "dur": 0.09, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58221760218.037, "ph": "X", "cat": "fee", "dur": 0.23, "name": "decode (<frozen os>:760)"}, {"pid": 106699, "tid": 106699, "ts": 58221760217.396, "ph": "X", "cat": "fee", "dur": 0.922, "name": "__getitem__ (<frozen os>:674)"}, {"pid": 106699, "tid": 106699, "ts": 58221760217.316, "ph": "X", "cat": "fee", "dur": 1.042, "name": "get (<frozen _collections_abc>:771)"}, {"pid": 106699, "tid": 106699, "ts": 58221760218.508, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.split"}, {"pid": 106699, "tid": 106699, "ts": 58221760218.818, "ph": "X", "cat": "fee", "dur": 0.041, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760219.61, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.lower"}, {"pid": 106699, "tid": 106699, "ts": 58221760220.011, "ph": "X", "cat": "fee", "dur": 0.14, "name": "str.split"}, {"pid": 106699, "tid": 106699, "ts": 58221760220.622, "ph": "X", "cat": "fee", "dur": 0.15, "name": "str.replace"}, {"pid": 106699, "tid": 106699, "ts": 58221760220.852, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.replace"}, {"pid": 106699, "tid": 106699, "ts": 58221760221.253, "ph": "X", "cat": "fee", "dur": 0.09, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760221.554, "ph": "X", "cat": "fee", "dur": 0.12, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760222.125, "ph": "X", "cat": "fee", "dur": 0.17, "name": "str.index"}, {"pid": 106699, "tid": 106699, "ts": 58221760222.846, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760223.167, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.isalnum"}, {"pid": 106699, "tid": 106699, "ts": 58221760223.467, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.isascii"}, {"pid": 106699, "tid": 106699, "ts": 58221760223.607, "ph": "X", "cat": "fee", "dur": 0.061, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760223.818, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.isalnum"}, {"pid": 106699, "tid": 106699, "ts": 58221760223.928, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.isascii"}, {"pid": 106699, "tid": 106699, "ts": 58221760224.028, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760224.169, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.isalnum"}, {"pid": 106699, "tid": 106699, "ts": 58221760224.269, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.isascii"}, {"pid": 106699, "tid": 106699, "ts": 58221760224.369, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760224.489, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.isalnum"}, {"pid": 106699, "tid": 106699, "ts": 58221760224.71, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.isalnum"}, {"pid": 106699, "tid": 106699, "ts": 58221760224.89, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760225.01, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.isascii"}, {"pid": 106699, "tid": 106699, "ts": 58221760225.12, "ph": "X", "cat": "fee", "dur": 0.05, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760225.331, "ph": "X", "cat": "fee", "dur": 0.11, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760222.726, "ph": "X", "cat": "fee", "dur": 2.755, "name": "normalize_encoding (/home/tim/mambaforge/envs/llm/lib/python3.11/encodings/__init__.py:43)"}, {"pid": 106699, "tid": 106699, "ts": 58221760225.802, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.lower"}, {"pid": 106699, "tid": 106699, "ts": 58221760225.932, "ph": "X", "cat": "fee", "dur": 0.1, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760226.192, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.lower"}, {"pid": 106699, "tid": 106699, "ts": 58221760221.954, "ph": "X", "cat": "fee", "dur": 4.689, "name": "_replace_encoding (/home/tim/mambaforge/envs/llm/lib/python3.11/locale.py:362)"}, {"pid": 106699, "tid": 106699, "ts": 58221760219.51, "ph": "X", "cat": "fee", "dur": 7.213, "name": "normalize (/home/tim/mambaforge/envs/llm/lib/python3.11/locale.py:396)"}, {"pid": 106699, "tid": 106699, "ts": 58221760226.924, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.find"}, {"pid": 106699, "tid": 106699, "ts": 58221760227.214, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.find"}, {"pid": 106699, "tid": 106699, "ts": 58221760227.675, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.find"}, {"pid": 106699, "tid": 106699, "ts": 58221760228.647, "ph": "X", "cat": "fee", "dur": 0.06, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760229.098, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760229.448, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760229.749, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760229.939, "ph": "X", "cat": "fee", "dur": 0.06, "name": "list.reverse"}, {"pid": 106699, "tid": 106699, "ts": 58221760219.139, "ph": "X", "cat": "fee", "dur": 10.911, "name": "_expand_lang (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:224)"}, {"pid": 106699, "tid": 106699, "ts": 58221760230.28, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760230.47, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760230.621, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760230.761, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760231.382, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.lower"}, {"pid": 106699, "tid": 106699, "ts": 58221760231.783, "ph": "X", "cat": "fee", "dur": 0.09, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760231.272, "ph": "X", "cat": "fee", "dur": 0.691, "name": "normalize (/home/tim/mambaforge/envs/llm/lib/python3.11/locale.py:396)"}, {"pid": 106699, "tid": 106699, "ts": 58221760232.184, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.find"}, {"pid": 106699, "tid": 106699, "ts": 58221760232.354, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.find"}, {"pid": 106699, "tid": 106699, "ts": 58221760232.534, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.find"}, {"pid": 106699, "tid": 106699, "ts": 58221760233.095, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760233.236, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.reverse"}, {"pid": 106699, "tid": 106699, "ts": 58221760231.031, "ph": "X", "cat": "fee", "dur": 2.305, "name": "_expand_lang (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:224)"}, {"pid": 106699, "tid": 106699, "ts": 58221760233.566, "ph": "X", "cat": "fee", "dur": 0.06, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760234.358, "ph": "X", "cat": "fee", "dur": 0.05, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221760234.598, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760234.518, "ph": "X", "cat": "fee", "dur": 0.18, "name": "_get_sep (<frozen posixpath>:41)"}, {"pid": 106699, "tid": 106699, "ts": 58221760235.119, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760235.33, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760235.66, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760235.81, "ph": "X", "cat": "fee", "dur": 0.061, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760236.101, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760236.261, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760234.237, "ph": "X", "cat": "fee", "dur": 2.295, "name": "join (<frozen posixpath>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221760236.872, "ph": "X", "cat": "fee", "dur": 2.014, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221760236.762, "ph": "X", "cat": "fee", "dur": 2.545, "name": "exists (<frozen genericpath>:16)"}, {"pid": 106699, "tid": 106699, "ts": 58221760239.818, "ph": "X", "cat": "fee", "dur": 0.04, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221760240.018, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760239.938, "ph": "X", "cat": "fee", "dur": 0.181, "name": "_get_sep (<frozen posixpath>:41)"}, {"pid": 106699, "tid": 106699, "ts": 58221760240.389, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760240.579, "ph": "X", "cat": "fee", "dur": 0.071, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760240.9, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760241.04, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760241.291, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760241.441, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760239.758, "ph": "X", "cat": "fee", "dur": 1.923, "name": "join (<frozen posixpath>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221760241.942, "ph": "X", "cat": "fee", "dur": 1.663, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221760241.852, "ph": "X", "cat": "fee", "dur": 1.973, "name": "exists (<frozen genericpath>:16)"}, {"pid": 106699, "tid": 106699, "ts": 58221760244.266, "ph": "X", "cat": "fee", "dur": 0.03, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221760244.447, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760244.377, "ph": "X", "cat": "fee", "dur": 0.16, "name": "_get_sep (<frozen posixpath>:41)"}, {"pid": 106699, "tid": 106699, "ts": 58221760244.807, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760244.958, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760245.208, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760245.348, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760245.559, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760245.719, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760244.196, "ph": "X", "cat": "fee", "dur": 1.743, "name": "join (<frozen posixpath>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221760246.22, "ph": "X", "cat": "fee", "dur": 1.473, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221760246.14, "ph": "X", "cat": "fee", "dur": 1.743, "name": "exists (<frozen genericpath>:16)"}, {"pid": 106699, "tid": 106699, "ts": 58221760248.284, "ph": "X", "cat": "fee", "dur": 0.03, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221760248.474, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760248.394, "ph": "X", "cat": "fee", "dur": 0.18, "name": "_get_sep (<frozen posixpath>:41)"}, {"pid": 106699, "tid": 106699, "ts": 58221760248.845, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760249.015, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760249.276, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760249.446, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760249.656, "ph": "X", "cat": "fee", "dur": 0.081, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760249.807, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760248.204, "ph": "X", "cat": "fee", "dur": 1.813, "name": "join (<frozen posixpath>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221760250.278, "ph": "X", "cat": "fee", "dur": 1.452, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221760250.197, "ph": "X", "cat": "fee", "dur": 1.724, "name": "exists (<frozen genericpath>:16)"}, {"pid": 106699, "tid": 106699, "ts": 58221760215.031, "ph": "X", "cat": "fee", "dur": 37.1, "name": "find (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:479)"}, {"pid": 106699, "tid": 106699, "ts": 58221760214.691, "ph": "X", "cat": "fee", "dur": 38.893, "name": "translation (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:519)"}, {"pid": 106699, "tid": 106699, "ts": 58221760214.27, "ph": "X", "cat": "fee", "dur": 39.685, "name": "dgettext (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:578)"}, {"pid": 106699, "tid": 106699, "ts": 58221760214.059, "ph": "X", "cat": "fee", "dur": 39.956, "name": "gettext (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:616)"}, {"pid": 106699, "tid": 106699, "ts": 58221760255.077, "ph": "X", "cat": "fee", "dur": 0.08, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760255.237, "ph": "X", "cat": "fee", "dur": 0.05, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760255.347, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760256.97, "ph": "X", "cat": "fee", "dur": 0.07, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760256.83, "ph": "X", "cat": "fee", "dur": 0.391, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760257.491, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760257.391, "ph": "X", "cat": "fee", "dur": 0.311, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760257.952, "ph": "X", "cat": "fee", "dur": 0.03, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760257.872, "ph": "X", "cat": "fee", "dur": 0.19, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760258.293, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760258.213, "ph": "X", "cat": "fee", "dur": 0.2, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760258.623, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760258.543, "ph": "X", "cat": "fee", "dur": 0.191, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760258.944, "ph": "X", "cat": "fee", "dur": 0.03, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760258.864, "ph": "X", "cat": "fee", "dur": 0.26, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760259.375, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760259.295, "ph": "X", "cat": "fee", "dur": 0.2, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760259.695, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760259.625, "ph": "X", "cat": "fee", "dur": 0.181, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760260.006, "ph": "X", "cat": "fee", "dur": 0.03, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760259.926, "ph": "X", "cat": "fee", "dur": 0.19, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760260.337, "ph": "X", "cat": "fee", "dur": 0.03, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760260.256, "ph": "X", "cat": "fee", "dur": 0.191, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760260.657, "ph": "X", "cat": "fee", "dur": 0.03, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760260.577, "ph": "X", "cat": "fee", "dur": 0.291, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760261.108, "ph": "X", "cat": "fee", "dur": 0.03, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760261.018, "ph": "X", "cat": "fee", "dur": 0.21, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760261.659, "ph": "X", "cat": "fee", "dur": 0.12, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760261.358, "ph": "X", "cat": "fee", "dur": 0.461, "name": "_get_handler (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1598)"}, {"pid": 106699, "tid": 106699, "ts": 58221760262.571, "ph": "X", "cat": "fee", "dur": 0.16, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760262.471, "ph": "X", "cat": "fee", "dur": 0.601, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:272)"}, {"pid": 106699, "tid": 106699, "ts": 58221760262.31, "ph": "X", "cat": "fee", "dur": 0.832, "name": "compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:225)"}, {"pid": 106699, "tid": 106699, "ts": 58221760256.139, "ph": "X", "cat": "fee", "dur": 7.123, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1337)"}, {"pid": 106699, "tid": 106699, "ts": 58221760254.836, "ph": "X", "cat": "fee", "dur": 9.127, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1647)"}, {"pid": 106699, "tid": 106699, "ts": 58221760264.234, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760254.235, "ph": "X", "cat": "fee", "dur": 10.099, "name": "add_argument_group (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1470)"}, {"pid": 106699, "tid": 106699, "ts": 58221760265.075, "ph": "X", "cat": "fee", "dur": 0.081, "name": "dict.setdefault"}, {"pid": 106699, "tid": 106699, "ts": 58221760264.945, "ph": "X", "cat": "fee", "dur": 0.381, "name": "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)"}, {"pid": 106699, "tid": 106699, "ts": 58221760266.749, "ph": "X", "cat": "fee", "dur": 0.03, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760268.893, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760269.053, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.encode"}, {"pid": 106699, "tid": 106699, "ts": 58221760268.772, "ph": "X", "cat": "fee", "dur": 0.431, "name": "encode (<frozen os>:756)"}, {"pid": 106699, "tid": 106699, "ts": 58221760269.614, "ph": "X", "cat": "fee", "dur": 0.07, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58221760269.514, "ph": "X", "cat": "fee", "dur": 0.2, "name": "decode (<frozen os>:760)"}, {"pid": 106699, "tid": 106699, "ts": 58221760268.612, "ph": "X", "cat": "fee", "dur": 1.162, "name": "__getitem__ (<frozen os>:674)"}, {"pid": 106699, "tid": 106699, "ts": 58221760268.452, "ph": "X", "cat": "fee", "dur": 1.392, "name": "get (<frozen _collections_abc>:771)"}, {"pid": 106699, "tid": 106699, "ts": 58221760270.385, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760270.496, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.encode"}, {"pid": 106699, "tid": 106699, "ts": 58221760270.305, "ph": "X", "cat": "fee", "dur": 0.301, "name": "encode (<frozen os>:756)"}, {"pid": 106699, "tid": 106699, "ts": 58221760270.866, "ph": "X", "cat": "fee", "dur": 0.07, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58221760270.796, "ph": "X", "cat": "fee", "dur": 0.261, "name": "decode (<frozen os>:760)"}, {"pid": 106699, "tid": 106699, "ts": 58221760270.215, "ph": "X", "cat": "fee", "dur": 0.952, "name": "__getitem__ (<frozen os>:674)"}, {"pid": 106699, "tid": 106699, "ts": 58221760270.125, "ph": "X", "cat": "fee", "dur": 1.142, "name": "get (<frozen _collections_abc>:771)"}, {"pid": 106699, "tid": 106699, "ts": 58221760271.407, "ph": "X", "cat": "fee", "dur": 0.081, "name": "str.split"}, {"pid": 106699, "tid": 106699, "ts": 58221760271.748, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760272.459, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.lower"}, {"pid": 106699, "tid": 106699, "ts": 58221760272.79, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.split"}, {"pid": 106699, "tid": 106699, "ts": 58221760273.301, "ph": "X", "cat": "fee", "dur": 0.11, "name": "str.replace"}, {"pid": 106699, "tid": 106699, "ts": 58221760273.501, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.replace"}, {"pid": 106699, "tid": 106699, "ts": 58221760273.852, "ph": "X", "cat": "fee", "dur": 0.06, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760274.153, "ph": "X", "cat": "fee", "dur": 0.07, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760275.174, "ph": "X", "cat": "fee", "dur": 0.141, "name": "str.index"}, {"pid": 106699, "tid": 106699, "ts": 58221760275.725, "ph": "X", "cat": "fee", "dur": 0.061, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760276.006, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.isalnum"}, {"pid": 106699, "tid": 106699, "ts": 58221760276.166, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.isascii"}, {"pid": 106699, "tid": 106699, "ts": 58221760276.287, "ph": "X", "cat": "fee", "dur": 0.07, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760276.497, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.isalnum"}, {"pid": 106699, "tid": 106699, "ts": 58221760276.617, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.isascii"}, {"pid": 106699, "tid": 106699, "ts": 58221760276.717, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760276.848, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.isalnum"}, {"pid": 106699, "tid": 106699, "ts": 58221760276.938, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.isascii"}, {"pid": 106699, "tid": 106699, "ts": 58221760277.038, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760277.138, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.isalnum"}, {"pid": 106699, "tid": 106699, "ts": 58221760277.369, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.isalnum"}, {"pid": 106699, "tid": 106699, "ts": 58221760277.519, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760277.629, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.isascii"}, {"pid": 106699, "tid": 106699, "ts": 58221760277.729, "ph": "X", "cat": "fee", "dur": 0.05, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760277.93, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760275.605, "ph": "X", "cat": "fee", "dur": 2.475, "name": "normalize_encoding (/home/tim/mambaforge/envs/llm/lib/python3.11/encodings/__init__.py:43)"}, {"pid": 106699, "tid": 106699, "ts": 58221760278.36, "ph": "X", "cat": "fee", "dur": 0.051, "name": "str.lower"}, {"pid": 106699, "tid": 106699, "ts": 58221760278.481, "ph": "X", "cat": "fee", "dur": 0.07, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760278.671, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.lower"}, {"pid": 106699, "tid": 106699, "ts": 58221760274.473, "ph": "X", "cat": "fee", "dur": 4.589, "name": "_replace_encoding (/home/tim/mambaforge/envs/llm/lib/python3.11/locale.py:362)"}, {"pid": 106699, "tid": 106699, "ts": 58221760272.379, "ph": "X", "cat": "fee", "dur": 6.763, "name": "normalize (/home/tim/mambaforge/envs/llm/lib/python3.11/locale.py:396)"}, {"pid": 106699, "tid": 106699, "ts": 58221760279.322, "ph": "X", "cat": "fee", "dur": 0.11, "name": "str.find"}, {"pid": 106699, "tid": 106699, "ts": 58221760279.603, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.find"}, {"pid": 106699, "tid": 106699, "ts": 58221760279.994, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.find"}, {"pid": 106699, "tid": 106699, "ts": 58221760280.895, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760281.286, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760281.607, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760281.907, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760282.087, "ph": "X", "cat": "fee", "dur": 0.041, "name": "list.reverse"}, {"pid": 106699, "tid": 106699, "ts": 58221760272.059, "ph": "X", "cat": "fee", "dur": 10.139, "name": "_expand_lang (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:224)"}, {"pid": 106699, "tid": 106699, "ts": 58221760282.408, "ph": "X", "cat": "fee", "dur": 0.05, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760282.598, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760282.749, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760282.879, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760283.51, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.lower"}, {"pid": 106699, "tid": 106699, "ts": 58221760283.911, "ph": "X", "cat": "fee", "dur": 0.08, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760283.43, "ph": "X", "cat": "fee", "dur": 0.641, "name": "normalize (/home/tim/mambaforge/envs/llm/lib/python3.11/locale.py:396)"}, {"pid": 106699, "tid": 106699, "ts": 58221760284.231, "ph": "X", "cat": "fee", "dur": 0.081, "name": "str.find"}, {"pid": 106699, "tid": 106699, "ts": 58221760284.452, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.find"}, {"pid": 106699, "tid": 106699, "ts": 58221760284.632, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.find"}, {"pid": 106699, "tid": 106699, "ts": 58221760285.173, "ph": "X", "cat": "fee", "dur": 0.05, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760285.344, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.reverse"}, {"pid": 106699, "tid": 106699, "ts": 58221760283.18, "ph": "X", "cat": "fee", "dur": 2.264, "name": "_expand_lang (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:224)"}, {"pid": 106699, "tid": 106699, "ts": 58221760285.674, "ph": "X", "cat": "fee", "dur": 0.05, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760286.456, "ph": "X", "cat": "fee", "dur": 0.04, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221760286.666, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760286.586, "ph": "X", "cat": "fee", "dur": 0.17, "name": "_get_sep (<frozen posixpath>:41)"}, {"pid": 106699, "tid": 106699, "ts": 58221760287.147, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760287.357, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760287.678, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760287.828, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760288.099, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760288.259, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760286.345, "ph": "X", "cat": "fee", "dur": 2.195, "name": "join (<frozen posixpath>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221760288.88, "ph": "X", "cat": "fee", "dur": 1.884, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221760288.77, "ph": "X", "cat": "fee", "dur": 2.324, "name": "exists (<frozen genericpath>:16)"}, {"pid": 106699, "tid": 106699, "ts": 58221760291.615, "ph": "X", "cat": "fee", "dur": 0.05, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221760291.846, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760291.746, "ph": "X", "cat": "fee", "dur": 0.19, "name": "_get_sep (<frozen posixpath>:41)"}, {"pid": 106699, "tid": 106699, "ts": 58221760292.196, "ph": "X", "cat": "fee", "dur": 0.091, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760292.367, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760292.637, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760292.788, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760293.018, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760293.158, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760291.555, "ph": "X", "cat": "fee", "dur": 1.814, "name": "join (<frozen posixpath>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221760293.679, "ph": "X", "cat": "fee", "dur": 1.613, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221760293.589, "ph": "X", "cat": "fee", "dur": 1.924, "name": "exists (<frozen genericpath>:16)"}, {"pid": 106699, "tid": 106699, "ts": 58221760295.944, "ph": "X", "cat": "fee", "dur": 0.03, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221760296.124, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760296.054, "ph": "X", "cat": "fee", "dur": 0.17, "name": "_get_sep (<frozen posixpath>:41)"}, {"pid": 106699, "tid": 106699, "ts": 58221760296.444, "ph": "X", "cat": "fee", "dur": 0.081, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760296.605, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760296.835, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760296.975, "ph": "X", "cat": "fee", "dur": 0.061, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760297.186, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760297.326, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760295.873, "ph": "X", "cat": "fee", "dur": 1.674, "name": "join (<frozen posixpath>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221760297.827, "ph": "X", "cat": "fee", "dur": 1.463, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221760297.757, "ph": "X", "cat": "fee", "dur": 1.723, "name": "exists (<frozen genericpath>:16)"}, {"pid": 106699, "tid": 106699, "ts": 58221760299.871, "ph": "X", "cat": "fee", "dur": 0.03, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221760300.041, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760299.971, "ph": "X", "cat": "fee", "dur": 0.17, "name": "_get_sep (<frozen posixpath>:41)"}, {"pid": 106699, "tid": 106699, "ts": 58221760300.362, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760300.542, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760300.803, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760300.943, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760301.163, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.startswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760301.304, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.endswith"}, {"pid": 106699, "tid": 106699, "ts": 58221760299.791, "ph": "X", "cat": "fee", "dur": 1.723, "name": "join (<frozen posixpath>:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221760301.754, "ph": "X", "cat": "fee", "dur": 1.473, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221760301.684, "ph": "X", "cat": "fee", "dur": 1.734, "name": "exists (<frozen genericpath>:16)"}, {"pid": 106699, "tid": 106699, "ts": 58221760268.101, "ph": "X", "cat": "fee", "dur": 35.467, "name": "find (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:479)"}, {"pid": 106699, "tid": 106699, "ts": 58221760266.909, "ph": "X", "cat": "fee", "dur": 37.921, "name": "translation (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:519)"}, {"pid": 106699, "tid": 106699, "ts": 58221760266.348, "ph": "X", "cat": "fee", "dur": 38.763, "name": "dgettext (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:578)"}, {"pid": 106699, "tid": 106699, "ts": 58221760266.077, "ph": "X", "cat": "fee", "dur": 39.114, "name": "gettext (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:616)"}, {"pid": 106699, "tid": 106699, "ts": 58221760309.148, "ph": "X", "cat": "fee", "dur": 0.111, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760312.414, "ph": "X", "cat": "fee", "dur": 0.051, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760312.565, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760312.945, "ph": "X", "cat": "fee", "dur": 0.041, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760313.066, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760313.236, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760313.527, "ph": "X", "cat": "fee", "dur": 0.09, "name": "dict.pop"}, {"pid": 106699, "tid": 106699, "ts": 58221760314.078, "ph": "X", "cat": "fee", "dur": 0.11, "name": "str.lstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760314.338, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.replace"}, {"pid": 106699, "tid": 106699, "ts": 58221760311.984, "ph": "X", "cat": "fee", "dur": 2.905, "name": "_get_optional_kwargs (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1560)"}, {"pid": 106699, "tid": 106699, "ts": 58221760315.901, "ph": "X", "cat": "fee", "dur": 0.08, "name": "dict.pop"}, {"pid": 106699, "tid": 106699, "ts": 58221760316.622, "ph": "X", "cat": "fee", "dur": 0.071, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760316.422, "ph": "X", "cat": "fee", "dur": 0.311, "name": "_registry_get (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1394)"}, {"pid": 106699, "tid": 106699, "ts": 58221760315.781, "ph": "X", "cat": "fee", "dur": 1.022, "name": "_pop_action_class (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1594)"}, {"pid": 106699, "tid": 106699, "ts": 58221760316.933, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.callable"}, {"pid": 106699, "tid": 106699, "ts": 58221760319.989, "ph": "X", "cat": "fee", "dur": 0.942, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:841)"}, {"pid": 106699, "tid": 106699, "ts": 58221760318.636, "ph": "X", "cat": "fee", "dur": 2.405, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1106)"}, {"pid": 106699, "tid": 106699, "ts": 58221760321.582, "ph": "X", "cat": "fee", "dur": 0.06, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760321.421, "ph": "X", "cat": "fee", "dur": 0.271, "name": "_registry_get (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1394)"}, {"pid": 106699, "tid": 106699, "ts": 58221760321.782, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.callable"}, {"pid": 106699, "tid": 106699, "ts": 58221760322.113, "ph": "X", "cat": "fee", "dur": 0.521, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760328.895, "ph": "X", "cat": "fee", "dur": 0.031, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760329.046, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.encode"}, {"pid": 106699, "tid": 106699, "ts": 58221760328.795, "ph": "X", "cat": "fee", "dur": 0.381, "name": "encode (<frozen os>:756)"}, {"pid": 106699, "tid": 106699, "ts": 58221760328.605, "ph": "X", "cat": "fee", "dur": 1.703, "name": "__getitem__ (<frozen os>:674)"}, {"pid": 106699, "tid": 106699, "ts": 58221760331.46, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760331.571, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.encode"}, {"pid": 106699, "tid": 106699, "ts": 58221760331.38, "ph": "X", "cat": "fee", "dur": 0.371, "name": "encode (<frozen os>:756)"}, {"pid": 106699, "tid": 106699, "ts": 58221760331.27, "ph": "X", "cat": "fee", "dur": 0.952, "name": "__getitem__ (<frozen os>:674)"}, {"pid": 106699, "tid": 106699, "ts": 58221760333.254, "ph": "X", "cat": "fee", "dur": 0.651, "name": "_io.TextIOWrapper.fileno"}, {"pid": 106699, "tid": 106699, "ts": 58221760333.985, "ph": "X", "cat": "fee", "dur": 1.383, "name": "posix.get_terminal_size"}, {"pid": 106699, "tid": 106699, "ts": 58221760328.264, "ph": "X", "cat": "fee", "dur": 8.065, "name": "get_terminal_size (/home/tim/mambaforge/envs/llm/lib/python3.11/shutil.py:1398)"}, {"pid": 106699, "tid": 106699, "ts": 58221760337.432, "ph": "X", "cat": "fee", "dur": 0.31, "name": "builtins.max"}, {"pid": 106699, "tid": 106699, "ts": 58221760337.792, "ph": "X", "cat": "fee", "dur": 0.14, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760339.215, "ph": "X", "cat": "fee", "dur": 0.521, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:206)"}, {"pid": 106699, "tid": 106699, "ts": 58221760340.738, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760341.87, "ph": "X", "cat": "fee", "dur": 0.13, "name": "value (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:1255)"}, {"pid": 106699, "tid": 106699, "ts": 58221760341.519, "ph": "X", "cat": "fee", "dur": 0.581, "name": "__get__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:193)"}, {"pid": 106699, "tid": 106699, "ts": 58221760340.638, "ph": "X", "cat": "fee", "dur": 2.114, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:272)"}, {"pid": 106699, "tid": 106699, "ts": 58221760340.427, "ph": "X", "cat": "fee", "dur": 2.375, "name": "compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:225)"}, {"pid": 106699, "tid": 106699, "ts": 58221760343.403, "ph": "X", "cat": "fee", "dur": 0.12, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760343.333, "ph": "X", "cat": "fee", "dur": 0.44, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:272)"}, {"pid": 106699, "tid": 106699, "ts": 58221760343.222, "ph": "X", "cat": "fee", "dur": 0.602, "name": "compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:225)"}, {"pid": 106699, "tid": 106699, "ts": 58221760325.008, "ph": "X", "cat": "fee", "dur": 18.996, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760322.994, "ph": "X", "cat": "fee", "dur": 21.21, "name": "_get_formatter (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2587)"}, {"pid": 106699, "tid": 106699, "ts": 58221760347.721, "ph": "X", "cat": "fee", "dur": 0.361, "name": "_metavar_formatter (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:585)"}, {"pid": 106699, "tid": 106699, "ts": 58221760349.534, "ph": "X", "cat": "fee", "dur": 0.111, "name": "<listcomp> (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:623)"}, {"pid": 106699, "tid": 106699, "ts": 58221760349.875, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760350.606, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760350.456, "ph": "X", "cat": "fee", "dur": 0.431, "name": "format (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:594)"}, {"pid": 106699, "tid": 106699, "ts": 58221760346.719, "ph": "X", "cat": "fee", "dur": 4.368, "name": "_format_args (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:601)"}, {"pid": 106699, "tid": 106699, "ts": 58221760355.596, "ph": "X", "cat": "fee", "dur": 0.531, "name": "_check_conflict (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1607)"}, {"pid": 106699, "tid": 106699, "ts": 58221760356.367, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760357.058, "ph": "X", "cat": "fee", "dur": 1.433, "name": "re.Pattern.match"}, {"pid": 106699, "tid": 106699, "ts": 58221760358.682, "ph": "X", "cat": "fee", "dur": 0.18, "name": "re.Pattern.match"}, {"pid": 106699, "tid": 106699, "ts": 58221760354.444, "ph": "X", "cat": "fee", "dur": 4.518, "name": "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1480)"}, {"pid": 106699, "tid": 106699, "ts": 58221760359.152, "ph": "X", "cat": "fee", "dur": 0.071, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760352.76, "ph": "X", "cat": "fee", "dur": 6.543, "name": "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1669)"}, {"pid": 106699, "tid": 106699, "ts": 58221760352.009, "ph": "X", "cat": "fee", "dur": 7.364, "name": "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1848)"}, {"pid": 106699, "tid": 106699, "ts": 58221760308.888, "ph": "X", "cat": "fee", "dur": 50.565, "name": "add_argument (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1419)"}, {"pid": 106699, "tid": 106699, "ts": 58221760107.399, "ph": "X", "cat": "fee", "dur": 252.405, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1737)"}, {"pid": 106699, "tid": 106699, "ts": 58221760360.615, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760361.567, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760361.717, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760362.068, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760362.158, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760362.328, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760362.539, "ph": "X", "cat": "fee", "dur": 0.06, "name": "dict.pop"}, {"pid": 106699, "tid": 106699, "ts": 58221760362.859, "ph": "X", "cat": "fee", "dur": 0.101, "name": "str.lstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760363.12, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.replace"}, {"pid": 106699, "tid": 106699, "ts": 58221760361.206, "ph": "X", "cat": "fee", "dur": 2.305, "name": "_get_optional_kwargs (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1560)"}, {"pid": 106699, "tid": 106699, "ts": 58221760364.422, "ph": "X", "cat": "fee", "dur": 0.06, "name": "dict.pop"}, {"pid": 106699, "tid": 106699, "ts": 58221760364.923, "ph": "X", "cat": "fee", "dur": 0.08, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760364.753, "ph": "X", "cat": "fee", "dur": 0.341, "name": "_registry_get (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1394)"}, {"pid": 106699, "tid": 106699, "ts": 58221760364.312, "ph": "X", "cat": "fee", "dur": 0.862, "name": "_pop_action_class (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1594)"}, {"pid": 106699, "tid": 106699, "ts": 58221760365.284, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.callable"}, {"pid": 106699, "tid": 106699, "ts": 58221760367.979, "ph": "X", "cat": "fee", "dur": 0.922, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:841)"}, {"pid": 106699, "tid": 106699, "ts": 58221760367.548, "ph": "X", "cat": "fee", "dur": 1.463, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:961)"}, {"pid": 106699, "tid": 106699, "ts": 58221760366.386, "ph": "X", "cat": "fee", "dur": 2.715, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:984)"}, {"pid": 106699, "tid": 106699, "ts": 58221760369.622, "ph": "X", "cat": "fee", "dur": 0.06, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760369.462, "ph": "X", "cat": "fee", "dur": 0.26, "name": "_registry_get (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1394)"}, {"pid": 106699, "tid": 106699, "ts": 58221760369.812, "ph": "X", "cat": "fee", "dur": 0.031, "name": "builtins.callable"}, {"pid": 106699, "tid": 106699, "ts": 58221760369.993, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760371.616, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760371.786, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.encode"}, {"pid": 106699, "tid": 106699, "ts": 58221760371.526, "ph": "X", "cat": "fee", "dur": 0.461, "name": "encode (<frozen os>:756)"}, {"pid": 106699, "tid": 106699, "ts": 58221760371.325, "ph": "X", "cat": "fee", "dur": 1.293, "name": "__getitem__ (<frozen os>:674)"}, {"pid": 106699, "tid": 106699, "ts": 58221760373.319, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760373.489, "ph": "X", "cat": "fee", "dur": 0.071, "name": "str.encode"}, {"pid": 106699, "tid": 106699, "ts": 58221760373.239, "ph": "X", "cat": "fee", "dur": 0.361, "name": "encode (<frozen os>:756)"}, {"pid": 106699, "tid": 106699, "ts": 58221760373.119, "ph": "X", "cat": "fee", "dur": 0.821, "name": "__getitem__ (<frozen os>:674)"}, {"pid": 106699, "tid": 106699, "ts": 58221760374.521, "ph": "X", "cat": "fee", "dur": 0.181, "name": "_io.TextIOWrapper.fileno"}, {"pid": 106699, "tid": 106699, "ts": 58221760374.742, "ph": "X", "cat": "fee", "dur": 0.631, "name": "posix.get_terminal_size"}, {"pid": 106699, "tid": 106699, "ts": 58221760371.065, "ph": "X", "cat": "fee", "dur": 4.839, "name": "get_terminal_size (/home/tim/mambaforge/envs/llm/lib/python3.11/shutil.py:1398)"}, {"pid": 106699, "tid": 106699, "ts": 58221760376.465, "ph": "X", "cat": "fee", "dur": 0.16, "name": "builtins.max"}, {"pid": 106699, "tid": 106699, "ts": 58221760376.665, "ph": "X", "cat": "fee", "dur": 0.111, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760377.307, "ph": "X", "cat": "fee", "dur": 0.19, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:206)"}, {"pid": 106699, "tid": 106699, "ts": 58221760378.138, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760378.629, "ph": "X", "cat": "fee", "dur": 0.1, "name": "value (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:1255)"}, {"pid": 106699, "tid": 106699, "ts": 58221760378.379, "ph": "X", "cat": "fee", "dur": 0.43, "name": "__get__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:193)"}, {"pid": 106699, "tid": 106699, "ts": 58221760378.048, "ph": "X", "cat": "fee", "dur": 1.082, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:272)"}, {"pid": 106699, "tid": 106699, "ts": 58221760377.868, "ph": "X", "cat": "fee", "dur": 1.372, "name": "compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:225)"}, {"pid": 106699, "tid": 106699, "ts": 58221760379.621, "ph": "X", "cat": "fee", "dur": 0.14, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760379.551, "ph": "X", "cat": "fee", "dur": 0.391, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:272)"}, {"pid": 106699, "tid": 106699, "ts": 58221760379.451, "ph": "X", "cat": "fee", "dur": 0.551, "name": "compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:225)"}, {"pid": 106699, "tid": 106699, "ts": 58221760370.654, "ph": "X", "cat": "fee", "dur": 9.448, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760370.253, "ph": "X", "cat": "fee", "dur": 10.009, "name": "_get_formatter (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2587)"}, {"pid": 106699, "tid": 106699, "ts": 58221760380.703, "ph": "X", "cat": "fee", "dur": 0.26, "name": "_metavar_formatter (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:585)"}, {"pid": 106699, "tid": 106699, "ts": 58221760381.785, "ph": "X", "cat": "fee", "dur": 0.09, "name": "<listcomp> (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:623)"}, {"pid": 106699, "tid": 106699, "ts": 58221760382.066, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760382.446, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760382.336, "ph": "X", "cat": "fee", "dur": 0.281, "name": "format (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:594)"}, {"pid": 106699, "tid": 106699, "ts": 58221760380.493, "ph": "X", "cat": "fee", "dur": 2.274, "name": "_format_args (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:601)"}, {"pid": 106699, "tid": 106699, "ts": 58221760383.739, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_check_conflict (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1607)"}, {"pid": 106699, "tid": 106699, "ts": 58221760384.32, "ph": "X", "cat": "fee", "dur": 0.05, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760384.901, "ph": "X", "cat": "fee", "dur": 0.25, "name": "re.Pattern.match"}, {"pid": 106699, "tid": 106699, "ts": 58221760385.302, "ph": "X", "cat": "fee", "dur": 0.14, "name": "re.Pattern.match"}, {"pid": 106699, "tid": 106699, "ts": 58221760383.608, "ph": "X", "cat": "fee", "dur": 1.964, "name": "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1480)"}, {"pid": 106699, "tid": 106699, "ts": 58221760385.692, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760383.288, "ph": "X", "cat": "fee", "dur": 2.494, "name": "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1669)"}, {"pid": 106699, "tid": 106699, "ts": 58221760383.027, "ph": "X", "cat": "fee", "dur": 2.836, "name": "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1848)"}, {"pid": 106699, "tid": 106699, "ts": 58221760360.455, "ph": "X", "cat": "fee", "dur": 25.458, "name": "add_argument (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1419)"}, {"pid": 106699, "tid": 106699, "ts": 58221760386.484, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760387.275, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760387.406, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760387.716, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760387.826, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760387.987, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760388.187, "ph": "X", "cat": "fee", "dur": 0.06, "name": "dict.pop"}, {"pid": 106699, "tid": 106699, "ts": 58221760388.498, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.lstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760388.718, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.replace"}, {"pid": 106699, "tid": 106699, "ts": 58221760386.955, "ph": "X", "cat": "fee", "dur": 2.094, "name": "_get_optional_kwargs (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1560)"}, {"pid": 106699, "tid": 106699, "ts": 58221760389.78, "ph": "X", "cat": "fee", "dur": 0.05, "name": "dict.pop"}, {"pid": 106699, "tid": 106699, "ts": 58221760390.161, "ph": "X", "cat": "fee", "dur": 0.07, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760390.0, "ph": "X", "cat": "fee", "dur": 0.281, "name": "_registry_get (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1394)"}, {"pid": 106699, "tid": 106699, "ts": 58221760389.67, "ph": "X", "cat": "fee", "dur": 0.681, "name": "_pop_action_class (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1594)"}, {"pid": 106699, "tid": 106699, "ts": 58221760390.441, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.callable"}, {"pid": 106699, "tid": 106699, "ts": 58221760391.674, "ph": "X", "cat": "fee", "dur": 0.3, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:841)"}, {"pid": 106699, "tid": 106699, "ts": 58221760391.343, "ph": "X", "cat": "fee", "dur": 0.721, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:961)"}, {"pid": 106699, "tid": 106699, "ts": 58221760390.912, "ph": "X", "cat": "fee", "dur": 1.212, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:984)"}, {"pid": 106699, "tid": 106699, "ts": 58221760392.535, "ph": "X", "cat": "fee", "dur": 0.05, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760392.405, "ph": "X", "cat": "fee", "dur": 0.21, "name": "_registry_get (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1394)"}, {"pid": 106699, "tid": 106699, "ts": 58221760392.716, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.callable"}, {"pid": 106699, "tid": 106699, "ts": 58221760392.866, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760394.389, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760394.549, "ph": "X", "cat": "fee", "dur": 0.08, "name": "str.encode"}, {"pid": 106699, "tid": 106699, "ts": 58221760394.299, "ph": "X", "cat": "fee", "dur": 0.39, "name": "encode (<frozen os>:756)"}, {"pid": 106699, "tid": 106699, "ts": 58221760394.138, "ph": "X", "cat": "fee", "dur": 1.062, "name": "__getitem__ (<frozen os>:674)"}, {"pid": 106699, "tid": 106699, "ts": 58221760395.821, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760395.922, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.encode"}, {"pid": 106699, "tid": 106699, "ts": 58221760395.751, "ph": "X", "cat": "fee", "dur": 0.271, "name": "encode (<frozen os>:756)"}, {"pid": 106699, "tid": 106699, "ts": 58221760395.641, "ph": "X", "cat": "fee", "dur": 0.701, "name": "__getitem__ (<frozen os>:674)"}, {"pid": 106699, "tid": 106699, "ts": 58221760396.833, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_io.TextIOWrapper.fileno"}, {"pid": 106699, "tid": 106699, "ts": 58221760396.984, "ph": "X", "cat": "fee", "dur": 0.41, "name": "posix.get_terminal_size"}, {"pid": 106699, "tid": 106699, "ts": 58221760393.938, "ph": "X", "cat": "fee", "dur": 3.917, "name": "get_terminal_size (/home/tim/mambaforge/envs/llm/lib/python3.11/shutil.py:1398)"}, {"pid": 106699, "tid": 106699, "ts": 58221760398.276, "ph": "X", "cat": "fee", "dur": 0.12, "name": "builtins.max"}, {"pid": 106699, "tid": 106699, "ts": 58221760398.436, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760398.927, "ph": "X", "cat": "fee", "dur": 0.161, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:206)"}, {"pid": 106699, "tid": 106699, "ts": 58221760399.639, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760400.039, "ph": "X", "cat": "fee", "dur": 0.09, "name": "value (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:1255)"}, {"pid": 106699, "tid": 106699, "ts": 58221760399.849, "ph": "X", "cat": "fee", "dur": 0.511, "name": "__get__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:193)"}, {"pid": 106699, "tid": 106699, "ts": 58221760399.548, "ph": "X", "cat": "fee", "dur": 1.122, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:272)"}, {"pid": 106699, "tid": 106699, "ts": 58221760399.418, "ph": "X", "cat": "fee", "dur": 1.313, "name": "compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:225)"}, {"pid": 106699, "tid": 106699, "ts": 58221760401.081, "ph": "X", "cat": "fee", "dur": 0.11, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760401.001, "ph": "X", "cat": "fee", "dur": 0.391, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:272)"}, {"pid": 106699, "tid": 106699, "ts": 58221760400.891, "ph": "X", "cat": "fee", "dur": 0.541, "name": "compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:225)"}, {"pid": 106699, "tid": 106699, "ts": 58221760393.607, "ph": "X", "cat": "fee", "dur": 7.905, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760393.086, "ph": "X", "cat": "fee", "dur": 8.566, "name": "_get_formatter (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2587)"}, {"pid": 106699, "tid": 106699, "ts": 58221760401.963, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_metavar_formatter (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:585)"}, {"pid": 106699, "tid": 106699, "ts": 58221760402.815, "ph": "X", "cat": "fee", "dur": 0.09, "name": "<listcomp> (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:623)"}, {"pid": 106699, "tid": 106699, "ts": 58221760403.055, "ph": "X", "cat": "fee", "dur": 0.03, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760403.336, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760403.225, "ph": "X", "cat": "fee", "dur": 0.261, "name": "format (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:594)"}, {"pid": 106699, "tid": 106699, "ts": 58221760401.823, "ph": "X", "cat": "fee", "dur": 1.773, "name": "_format_args (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:601)"}, {"pid": 106699, "tid": 106699, "ts": 58221760404.418, "ph": "X", "cat": "fee", "dur": 0.33, "name": "_check_conflict (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1607)"}, {"pid": 106699, "tid": 106699, "ts": 58221760404.908, "ph": "X", "cat": "fee", "dur": 0.031, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760405.429, "ph": "X", "cat": "fee", "dur": 0.231, "name": "re.Pattern.match"}, {"pid": 106699, "tid": 106699, "ts": 58221760405.79, "ph": "X", "cat": "fee", "dur": 0.14, "name": "re.Pattern.match"}, {"pid": 106699, "tid": 106699, "ts": 58221760404.287, "ph": "X", "cat": "fee", "dur": 1.714, "name": "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1480)"}, {"pid": 106699, "tid": 106699, "ts": 58221760406.101, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760404.027, "ph": "X", "cat": "fee", "dur": 2.154, "name": "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1669)"}, {"pid": 106699, "tid": 106699, "ts": 58221760403.816, "ph": "X", "cat": "fee", "dur": 2.455, "name": "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1848)"}, {"pid": 106699, "tid": 106699, "ts": 58221760386.334, "ph": "X", "cat": "fee", "dur": 19.987, "name": "add_argument (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1419)"}, {"pid": 106699, "tid": 106699, "ts": 58221760406.802, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760407.493, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760407.614, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760407.934, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760408.034, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760408.195, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760408.375, "ph": "X", "cat": "fee", "dur": 0.05, "name": "dict.pop"}, {"pid": 106699, "tid": 106699, "ts": 58221760408.635, "ph": "X", "cat": "fee", "dur": 0.071, "name": "str.lstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760408.816, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.replace"}, {"pid": 106699, "tid": 106699, "ts": 58221760407.213, "ph": "X", "cat": "fee", "dur": 1.933, "name": "_get_optional_kwargs (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1560)"}, {"pid": 106699, "tid": 106699, "ts": 58221760409.597, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.pop"}, {"pid": 106699, "tid": 106699, "ts": 58221760409.938, "ph": "X", "cat": "fee", "dur": 0.06, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760409.778, "ph": "X", "cat": "fee", "dur": 0.27, "name": "_registry_get (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1394)"}, {"pid": 106699, "tid": 106699, "ts": 58221760409.497, "ph": "X", "cat": "fee", "dur": 0.611, "name": "_pop_action_class (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1594)"}, {"pid": 106699, "tid": 106699, "ts": 58221760410.208, "ph": "X", "cat": "fee", "dur": 0.041, "name": "builtins.callable"}, {"pid": 106699, "tid": 106699, "ts": 58221760412.433, "ph": "X", "cat": "fee", "dur": 0.501, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:841)"}, {"pid": 106699, "tid": 106699, "ts": 58221760411.791, "ph": "X", "cat": "fee", "dur": 1.193, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:926)"}, {"pid": 106699, "tid": 106699, "ts": 58221760413.445, "ph": "X", "cat": "fee", "dur": 0.05, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760413.314, "ph": "X", "cat": "fee", "dur": 0.211, "name": "_registry_get (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1394)"}, {"pid": 106699, "tid": 106699, "ts": 58221760413.615, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.callable"}, {"pid": 106699, "tid": 106699, "ts": 58221760413.755, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760415.028, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760415.158, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.encode"}, {"pid": 106699, "tid": 106699, "ts": 58221760414.937, "ph": "X", "cat": "fee", "dur": 0.351, "name": "encode (<frozen os>:756)"}, {"pid": 106699, "tid": 106699, "ts": 58221760414.787, "ph": "X", "cat": "fee", "dur": 0.962, "name": "__getitem__ (<frozen os>:674)"}, {"pid": 106699, "tid": 106699, "ts": 58221760418.925, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760419.035, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.encode"}, {"pid": 106699, "tid": 106699, "ts": 58221760418.845, "ph": "X", "cat": "fee", "dur": 0.3, "name": "encode (<frozen os>:756)"}, {"pid": 106699, "tid": 106699, "ts": 58221760418.714, "ph": "X", "cat": "fee", "dur": 0.762, "name": "__getitem__ (<frozen os>:674)"}, {"pid": 106699, "tid": 106699, "ts": 58221760419.917, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_io.TextIOWrapper.fileno"}, {"pid": 106699, "tid": 106699, "ts": 58221760420.067, "ph": "X", "cat": "fee", "dur": 0.441, "name": "posix.get_terminal_size"}, {"pid": 106699, "tid": 106699, "ts": 58221760414.597, "ph": "X", "cat": "fee", "dur": 6.352, "name": "get_terminal_size (/home/tim/mambaforge/envs/llm/lib/python3.11/shutil.py:1398)"}, {"pid": 106699, "tid": 106699, "ts": 58221760421.339, "ph": "X", "cat": "fee", "dur": 0.181, "name": "builtins.max"}, {"pid": 106699, "tid": 106699, "ts": 58221760421.56, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760422.041, "ph": "X", "cat": "fee", "dur": 0.23, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:206)"}, {"pid": 106699, "tid": 106699, "ts": 58221760422.782, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760423.183, "ph": "X", "cat": "fee", "dur": 0.09, "name": "value (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:1255)"}, {"pid": 106699, "tid": 106699, "ts": 58221760422.982, "ph": "X", "cat": "fee", "dur": 0.351, "name": "__get__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:193)"}, {"pid": 106699, "tid": 106699, "ts": 58221760422.702, "ph": "X", "cat": "fee", "dur": 0.912, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:272)"}, {"pid": 106699, "tid": 106699, "ts": 58221760422.572, "ph": "X", "cat": "fee", "dur": 1.162, "name": "compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:225)"}, {"pid": 106699, "tid": 106699, "ts": 58221760424.085, "ph": "X", "cat": "fee", "dur": 0.16, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760424.014, "ph": "X", "cat": "fee", "dur": 0.391, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:272)"}, {"pid": 106699, "tid": 106699, "ts": 58221760423.904, "ph": "X", "cat": "fee", "dur": 0.551, "name": "compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:225)"}, {"pid": 106699, "tid": 106699, "ts": 58221760414.306, "ph": "X", "cat": "fee", "dur": 10.239, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760413.955, "ph": "X", "cat": "fee", "dur": 10.731, "name": "_get_formatter (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2587)"}, {"pid": 106699, "tid": 106699, "ts": 58221760424.996, "ph": "X", "cat": "fee", "dur": 0.211, "name": "_metavar_formatter (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:585)"}, {"pid": 106699, "tid": 106699, "ts": 58221760425.577, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760425.477, "ph": "X", "cat": "fee", "dur": 0.261, "name": "format (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:594)"}, {"pid": 106699, "tid": 106699, "ts": 58221760424.846, "ph": "X", "cat": "fee", "dur": 1.322, "name": "_format_args (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:601)"}, {"pid": 106699, "tid": 106699, "ts": 58221760427.09, "ph": "X", "cat": "fee", "dur": 0.351, "name": "_check_conflict (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1607)"}, {"pid": 106699, "tid": 106699, "ts": 58221760427.611, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760428.032, "ph": "X", "cat": "fee", "dur": 0.22, "name": "re.Pattern.match"}, {"pid": 106699, "tid": 106699, "ts": 58221760428.383, "ph": "X", "cat": "fee", "dur": 0.13, "name": "re.Pattern.match"}, {"pid": 106699, "tid": 106699, "ts": 58221760426.96, "ph": "X", "cat": "fee", "dur": 1.623, "name": "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1480)"}, {"pid": 106699, "tid": 106699, "ts": 58221760428.713, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760426.649, "ph": "X", "cat": "fee", "dur": 2.144, "name": "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1669)"}, {"pid": 106699, "tid": 106699, "ts": 58221760426.439, "ph": "X", "cat": "fee", "dur": 2.425, "name": "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1848)"}, {"pid": 106699, "tid": 106699, "ts": 58221760406.672, "ph": "X", "cat": "fee", "dur": 22.242, "name": "add_argument (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1419)"}, {"pid": 106699, "tid": 106699, "ts": 58221760429.505, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760430.316, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760430.436, "ph": "X", "cat": "fee", "dur": 0.031, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760430.717, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760430.807, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760430.957, "ph": "X", "cat": "fee", "dur": 0.031, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760431.118, "ph": "X", "cat": "fee", "dur": 0.05, "name": "dict.pop"}, {"pid": 106699, "tid": 106699, "ts": 58221760431.358, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.lstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760431.539, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.replace"}, {"pid": 106699, "tid": 106699, "ts": 58221760429.986, "ph": "X", "cat": "fee", "dur": 1.833, "name": "_get_optional_kwargs (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1560)"}, {"pid": 106699, "tid": 106699, "ts": 58221760432.31, "ph": "X", "cat": "fee", "dur": 0.03, "name": "dict.pop"}, {"pid": 106699, "tid": 106699, "ts": 58221760432.621, "ph": "X", "cat": "fee", "dur": 0.05, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760432.47, "ph": "X", "cat": "fee", "dur": 0.251, "name": "_registry_get (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1394)"}, {"pid": 106699, "tid": 106699, "ts": 58221760432.2, "ph": "X", "cat": "fee", "dur": 0.591, "name": "_pop_action_class (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1594)"}, {"pid": 106699, "tid": 106699, "ts": 58221760432.871, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.callable"}, {"pid": 106699, "tid": 106699, "ts": 58221760433.773, "ph": "X", "cat": "fee", "dur": 0.3, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:841)"}, {"pid": 106699, "tid": 106699, "ts": 58221760433.302, "ph": "X", "cat": "fee", "dur": 0.841, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:926)"}, {"pid": 106699, "tid": 106699, "ts": 58221760434.534, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760434.404, "ph": "X", "cat": "fee", "dur": 0.23, "name": "_registry_get (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1394)"}, {"pid": 106699, "tid": 106699, "ts": 58221760434.715, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.callable"}, {"pid": 106699, "tid": 106699, "ts": 58221760434.855, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760436.097, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760436.227, "ph": "X", "cat": "fee", "dur": 0.071, "name": "str.encode"}, {"pid": 106699, "tid": 106699, "ts": 58221760436.027, "ph": "X", "cat": "fee", "dur": 0.401, "name": "encode (<frozen os>:756)"}, {"pid": 106699, "tid": 106699, "ts": 58221760435.857, "ph": "X", "cat": "fee", "dur": 1.052, "name": "__getitem__ (<frozen os>:674)"}, {"pid": 106699, "tid": 106699, "ts": 58221760437.51, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760437.61, "ph": "X", "cat": "fee", "dur": 0.05, "name": "str.encode"}, {"pid": 106699, "tid": 106699, "ts": 58221760437.45, "ph": "X", "cat": "fee", "dur": 0.25, "name": "encode (<frozen os>:756)"}, {"pid": 106699, "tid": 106699, "ts": 58221760437.319, "ph": "X", "cat": "fee", "dur": 0.672, "name": "__getitem__ (<frozen os>:674)"}, {"pid": 106699, "tid": 106699, "ts": 58221760438.432, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_io.TextIOWrapper.fileno"}, {"pid": 106699, "tid": 106699, "ts": 58221760438.572, "ph": "X", "cat": "fee", "dur": 0.411, "name": "posix.get_terminal_size"}, {"pid": 106699, "tid": 106699, "ts": 58221760435.666, "ph": "X", "cat": "fee", "dur": 3.697, "name": "get_terminal_size (/home/tim/mambaforge/envs/llm/lib/python3.11/shutil.py:1398)"}, {"pid": 106699, "tid": 106699, "ts": 58221760439.724, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.max"}, {"pid": 106699, "tid": 106699, "ts": 58221760439.854, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760440.285, "ph": "X", "cat": "fee", "dur": 0.18, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:206)"}, {"pid": 106699, "tid": 106699, "ts": 58221760440.996, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760441.387, "ph": "X", "cat": "fee", "dur": 0.09, "name": "value (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:1255)"}, {"pid": 106699, "tid": 106699, "ts": 58221760441.207, "ph": "X", "cat": "fee", "dur": 0.33, "name": "__get__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:193)"}, {"pid": 106699, "tid": 106699, "ts": 58221760440.906, "ph": "X", "cat": "fee", "dur": 0.872, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:272)"}, {"pid": 106699, "tid": 106699, "ts": 58221760440.786, "ph": "X", "cat": "fee", "dur": 1.052, "name": "compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:225)"}, {"pid": 106699, "tid": 106699, "ts": 58221760442.199, "ph": "X", "cat": "fee", "dur": 0.11, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760442.128, "ph": "X", "cat": "fee", "dur": 0.331, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:272)"}, {"pid": 106699, "tid": 106699, "ts": 58221760442.028, "ph": "X", "cat": "fee", "dur": 0.481, "name": "compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:225)"}, {"pid": 106699, "tid": 106699, "ts": 58221760435.306, "ph": "X", "cat": "fee", "dur": 7.283, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760435.045, "ph": "X", "cat": "fee", "dur": 7.665, "name": "_get_formatter (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2587)"}, {"pid": 106699, "tid": 106699, "ts": 58221760443.03, "ph": "X", "cat": "fee", "dur": 0.201, "name": "_metavar_formatter (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:585)"}, {"pid": 106699, "tid": 106699, "ts": 58221760443.531, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760443.431, "ph": "X", "cat": "fee", "dur": 0.25, "name": "format (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:594)"}, {"pid": 106699, "tid": 106699, "ts": 58221760442.87, "ph": "X", "cat": "fee", "dur": 1.032, "name": "_format_args (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:601)"}, {"pid": 106699, "tid": 106699, "ts": 58221760444.683, "ph": "X", "cat": "fee", "dur": 0.381, "name": "_check_conflict (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1607)"}, {"pid": 106699, "tid": 106699, "ts": 58221760445.224, "ph": "X", "cat": "fee", "dur": 0.09, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760445.725, "ph": "X", "cat": "fee", "dur": 0.211, "name": "re.Pattern.match"}, {"pid": 106699, "tid": 106699, "ts": 58221760446.066, "ph": "X", "cat": "fee", "dur": 0.14, "name": "re.Pattern.match"}, {"pid": 106699, "tid": 106699, "ts": 58221760444.563, "ph": "X", "cat": "fee", "dur": 1.713, "name": "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1480)"}, {"pid": 106699, "tid": 106699, "ts": 58221760446.397, "ph": "X", "cat": "fee", "dur": 0.07, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760444.353, "ph": "X", "cat": "fee", "dur": 2.164, "name": "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1669)"}, {"pid": 106699, "tid": 106699, "ts": 58221760444.152, "ph": "X", "cat": "fee", "dur": 2.445, "name": "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1848)"}, {"pid": 106699, "tid": 106699, "ts": 58221760429.364, "ph": "X", "cat": "fee", "dur": 17.283, "name": "add_argument (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1419)"}, {"pid": 106699, "tid": 106699, "ts": 58221760447.268, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760448.08, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760448.18, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760448.47, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760448.561, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760448.721, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760448.881, "ph": "X", "cat": "fee", "dur": 0.05, "name": "dict.pop"}, {"pid": 106699, "tid": 106699, "ts": 58221760449.092, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.lstrip"}, {"pid": 106699, "tid": 106699, "ts": 58221760449.312, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.replace"}, {"pid": 106699, "tid": 106699, "ts": 58221760447.759, "ph": "X", "cat": "fee", "dur": 1.884, "name": "_get_optional_kwargs (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1560)"}, {"pid": 106699, "tid": 106699, "ts": 58221760450.144, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.pop"}, {"pid": 106699, "tid": 106699, "ts": 58221760450.504, "ph": "X", "cat": "fee", "dur": 0.06, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760450.334, "ph": "X", "cat": "fee", "dur": 0.28, "name": "_registry_get (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1394)"}, {"pid": 106699, "tid": 106699, "ts": 58221760450.053, "ph": "X", "cat": "fee", "dur": 0.612, "name": "_pop_action_class (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1594)"}, {"pid": 106699, "tid": 106699, "ts": 58221760450.745, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.callable"}, {"pid": 106699, "tid": 106699, "ts": 58221760451.646, "ph": "X", "cat": "fee", "dur": 0.281, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:841)"}, {"pid": 106699, "tid": 106699, "ts": 58221760451.246, "ph": "X", "cat": "fee", "dur": 0.751, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:926)"}, {"pid": 106699, "tid": 106699, "ts": 58221760452.398, "ph": "X", "cat": "fee", "dur": 0.05, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760452.268, "ph": "X", "cat": "fee", "dur": 0.21, "name": "_registry_get (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1394)"}, {"pid": 106699, "tid": 106699, "ts": 58221760452.578, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.callable"}, {"pid": 106699, "tid": 106699, "ts": 58221760452.708, "ph": "X", "cat": "fee", "dur": 0.071, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760453.891, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760454.011, "ph": "X", "cat": "fee", "dur": 0.09, "name": "str.encode"}, {"pid": 106699, "tid": 106699, "ts": 58221760453.8, "ph": "X", "cat": "fee", "dur": 0.351, "name": "encode (<frozen os>:756)"}, {"pid": 106699, "tid": 106699, "ts": 58221760453.65, "ph": "X", "cat": "fee", "dur": 0.912, "name": "__getitem__ (<frozen os>:674)"}, {"pid": 106699, "tid": 106699, "ts": 58221760455.143, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760455.243, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.encode"}, {"pid": 106699, "tid": 106699, "ts": 58221760455.073, "ph": "X", "cat": "fee", "dur": 0.27, "name": "encode (<frozen os>:756)"}, {"pid": 106699, "tid": 106699, "ts": 58221760454.943, "ph": "X", "cat": "fee", "dur": 0.691, "name": "__getitem__ (<frozen os>:674)"}, {"pid": 106699, "tid": 106699, "ts": 58221760456.075, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_io.TextIOWrapper.fileno"}, {"pid": 106699, "tid": 106699, "ts": 58221760456.185, "ph": "X", "cat": "fee", "dur": 0.411, "name": "posix.get_terminal_size"}, {"pid": 106699, "tid": 106699, "ts": 58221760453.47, "ph": "X", "cat": "fee", "dur": 3.587, "name": "get_terminal_size (/home/tim/mambaforge/envs/llm/lib/python3.11/shutil.py:1398)"}, {"pid": 106699, "tid": 106699, "ts": 58221760457.447, "ph": "X", "cat": "fee", "dur": 0.11, "name": "builtins.max"}, {"pid": 106699, "tid": 106699, "ts": 58221760457.608, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760458.008, "ph": "X", "cat": "fee", "dur": 0.161, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:206)"}, {"pid": 106699, "tid": 106699, "ts": 58221760458.65, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760459.02, "ph": "X", "cat": "fee", "dur": 0.09, "name": "value (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:1255)"}, {"pid": 106699, "tid": 106699, "ts": 58221760458.86, "ph": "X", "cat": "fee", "dur": 0.311, "name": "__get__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:193)"}, {"pid": 106699, "tid": 106699, "ts": 58221760458.569, "ph": "X", "cat": "fee", "dur": 0.842, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:272)"}, {"pid": 106699, "tid": 106699, "ts": 58221760458.449, "ph": "X", "cat": "fee", "dur": 1.012, "name": "compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:225)"}, {"pid": 106699, "tid": 106699, "ts": 58221760459.802, "ph": "X", "cat": "fee", "dur": 0.11, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760459.732, "ph": "X", "cat": "fee", "dur": 0.31, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:272)"}, {"pid": 106699, "tid": 106699, "ts": 58221760459.631, "ph": "X", "cat": "fee", "dur": 0.461, "name": "compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:225)"}, {"pid": 106699, "tid": 106699, "ts": 58221760453.179, "ph": "X", "cat": "fee", "dur": 7.074, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760452.889, "ph": "X", "cat": "fee", "dur": 7.484, "name": "_get_formatter (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2587)"}, {"pid": 106699, "tid": 106699, "ts": 58221760460.723, "ph": "X", "cat": "fee", "dur": 0.211, "name": "_metavar_formatter (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:585)"}, {"pid": 106699, "tid": 106699, "ts": 58221760461.234, "ph": "X", "cat": "fee", "dur": 0.051, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760461.134, "ph": "X", "cat": "fee", "dur": 0.211, "name": "format (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:594)"}, {"pid": 106699, "tid": 106699, "ts": 58221760460.523, "ph": "X", "cat": "fee", "dur": 0.992, "name": "_format_args (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:601)"}, {"pid": 106699, "tid": 106699, "ts": 58221760462.286, "ph": "X", "cat": "fee", "dur": 0.351, "name": "_check_conflict (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1607)"}, {"pid": 106699, "tid": 106699, "ts": 58221760462.787, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760463.378, "ph": "X", "cat": "fee", "dur": 0.211, "name": "re.Pattern.match"}, {"pid": 106699, "tid": 106699, "ts": 58221760463.699, "ph": "X", "cat": "fee", "dur": 0.14, "name": "re.Pattern.match"}, {"pid": 106699, "tid": 106699, "ts": 58221760462.176, "ph": "X", "cat": "fee", "dur": 1.733, "name": "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1480)"}, {"pid": 106699, "tid": 106699, "ts": 58221760464.01, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760461.936, "ph": "X", "cat": "fee", "dur": 2.164, "name": "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1669)"}, {"pid": 106699, "tid": 106699, "ts": 58221760461.735, "ph": "X", "cat": "fee", "dur": 2.435, "name": "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1848)"}, {"pid": 106699, "tid": 106699, "ts": 58221760447.118, "ph": "X", "cat": "fee", "dur": 17.092, "name": "add_argument (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1419)"}, {"pid": 106699, "tid": 106699, "ts": 58221760464.731, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760467.196, "ph": "X", "cat": "fee", "dur": 0.07, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760467.516, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760466.955, "ph": "X", "cat": "fee", "dur": 0.922, "name": "_get_positional_kwargs (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1544)"}, {"pid": 106699, "tid": 106699, "ts": 58221760468.558, "ph": "X", "cat": "fee", "dur": 0.03, "name": "dict.pop"}, {"pid": 106699, "tid": 106699, "ts": 58221760468.899, "ph": "X", "cat": "fee", "dur": 0.07, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760468.739, "ph": "X", "cat": "fee", "dur": 0.28, "name": "_registry_get (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1394)"}, {"pid": 106699, "tid": 106699, "ts": 58221760468.468, "ph": "X", "cat": "fee", "dur": 0.601, "name": "_pop_action_class (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1594)"}, {"pid": 106699, "tid": 106699, "ts": 58221760469.159, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.callable"}, {"pid": 106699, "tid": 106699, "ts": 58221760470.141, "ph": "X", "cat": "fee", "dur": 0.291, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:841)"}, {"pid": 106699, "tid": 106699, "ts": 58221760469.64, "ph": "X", "cat": "fee", "dur": 0.862, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:926)"}, {"pid": 106699, "tid": 106699, "ts": 58221760470.883, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760470.752, "ph": "X", "cat": "fee", "dur": 0.211, "name": "_registry_get (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1394)"}, {"pid": 106699, "tid": 106699, "ts": 58221760471.053, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.callable"}, {"pid": 106699, "tid": 106699, "ts": 58221760471.203, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760472.435, "ph": "X", "cat": "fee", "dur": 0.031, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760472.576, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.encode"}, {"pid": 106699, "tid": 106699, "ts": 58221760472.355, "ph": "X", "cat": "fee", "dur": 0.331, "name": "encode (<frozen os>:756)"}, {"pid": 106699, "tid": 106699, "ts": 58221760472.195, "ph": "X", "cat": "fee", "dur": 0.922, "name": "__getitem__ (<frozen os>:674)"}, {"pid": 106699, "tid": 106699, "ts": 58221760473.688, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760473.788, "ph": "X", "cat": "fee", "dur": 0.06, "name": "str.encode"}, {"pid": 106699, "tid": 106699, "ts": 58221760473.628, "ph": "X", "cat": "fee", "dur": 0.25, "name": "encode (<frozen os>:756)"}, {"pid": 106699, "tid": 106699, "ts": 58221760473.507, "ph": "X", "cat": "fee", "dur": 0.662, "name": "__getitem__ (<frozen os>:674)"}, {"pid": 106699, "tid": 106699, "ts": 58221760474.61, "ph": "X", "cat": "fee", "dur": 0.08, "name": "_io.TextIOWrapper.fileno"}, {"pid": 106699, "tid": 106699, "ts": 58221760474.73, "ph": "X", "cat": "fee", "dur": 0.391, "name": "posix.get_terminal_size"}, {"pid": 106699, "tid": 106699, "ts": 58221760472.005, "ph": "X", "cat": "fee", "dur": 3.546, "name": "get_terminal_size (/home/tim/mambaforge/envs/llm/lib/python3.11/shutil.py:1398)"}, {"pid": 106699, "tid": 106699, "ts": 58221760475.902, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.max"}, {"pid": 106699, "tid": 106699, "ts": 58221760476.042, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760476.433, "ph": "X", "cat": "fee", "dur": 0.18, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:206)"}, {"pid": 106699, "tid": 106699, "ts": 58221760477.144, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760477.505, "ph": "X", "cat": "fee", "dur": 0.09, "name": "value (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:1255)"}, {"pid": 106699, "tid": 106699, "ts": 58221760477.335, "ph": "X", "cat": "fee", "dur": 0.32, "name": "__get__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:193)"}, {"pid": 106699, "tid": 106699, "ts": 58221760477.054, "ph": "X", "cat": "fee", "dur": 0.862, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:272)"}, {"pid": 106699, "tid": 106699, "ts": 58221760476.934, "ph": "X", "cat": "fee", "dur": 1.032, "name": "compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:225)"}, {"pid": 106699, "tid": 106699, "ts": 58221760478.337, "ph": "X", "cat": "fee", "dur": 0.18, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760478.266, "ph": "X", "cat": "fee", "dur": 0.421, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:272)"}, {"pid": 106699, "tid": 106699, "ts": 58221760478.146, "ph": "X", "cat": "fee", "dur": 0.591, "name": "compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:225)"}, {"pid": 106699, "tid": 106699, "ts": 58221760471.704, "ph": "X", "cat": "fee", "dur": 7.113, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760471.424, "ph": "X", "cat": "fee", "dur": 7.524, "name": "_get_formatter (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2587)"}, {"pid": 106699, "tid": 106699, "ts": 58221760479.258, "ph": "X", "cat": "fee", "dur": 0.221, "name": "_metavar_formatter (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:585)"}, {"pid": 106699, "tid": 106699, "ts": 58221760479.859, "ph": "X", "cat": "fee", "dur": 0.071, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760479.749, "ph": "X", "cat": "fee", "dur": 0.291, "name": "format (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:594)"}, {"pid": 106699, "tid": 106699, "ts": 58221760479.108, "ph": "X", "cat": "fee", "dur": 1.313, "name": "_format_args (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:601)"}, {"pid": 106699, "tid": 106699, "ts": 58221760481.242, "ph": "X", "cat": "fee", "dur": 0.17, "name": "_check_conflict (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1607)"}, {"pid": 106699, "tid": 106699, "ts": 58221760481.573, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760481.122, "ph": "X", "cat": "fee", "dur": 0.671, "name": "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1480)"}, {"pid": 106699, "tid": 106699, "ts": 58221760481.943, "ph": "X", "cat": "fee", "dur": 0.05, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760480.881, "ph": "X", "cat": "fee", "dur": 1.163, "name": "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1669)"}, {"pid": 106699, "tid": 106699, "ts": 58221760480.661, "ph": "X", "cat": "fee", "dur": 1.463, "name": "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1848)"}, {"pid": 106699, "tid": 106699, "ts": 58221760464.601, "ph": "X", "cat": "fee", "dur": 17.583, "name": "add_argument (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1419)"}, {"pid": 106699, "tid": 106699, "ts": 58221760487.364, "ph": "X", "cat": "fee", "dur": 0.22, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1322)"}, {"pid": 106699, "tid": 106699, "ts": 58221760487.995, "ph": "X", "cat": "fee", "dur": 0.26, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760488.486, "ph": "X", "cat": "fee", "dur": 0.19, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760488.856, "ph": "X", "cat": "fee", "dur": 0.511, "name": "builtins.setattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760489.548, "ph": "X", "cat": "fee", "dur": 0.16, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760489.828, "ph": "X", "cat": "fee", "dur": 0.501, "name": "builtins.setattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760490.469, "ph": "X", "cat": "fee", "dur": 0.191, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760490.78, "ph": "X", "cat": "fee", "dur": 0.401, "name": "builtins.setattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760491.321, "ph": "X", "cat": "fee", "dur": 0.15, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760491.592, "ph": "X", "cat": "fee", "dur": 0.17, "name": "builtins.setattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760491.892, "ph": "X", "cat": "fee", "dur": 0.18, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760492.213, "ph": "X", "cat": "fee", "dur": 0.13, "name": "builtins.setattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760492.473, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760492.674, "ph": "X", "cat": "fee", "dur": 0.17, "name": "builtins.setattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760500.558, "ph": "X", "cat": "fee", "dur": 0.081, "name": "builtins.iter"}, {"pid": 106699, "tid": 106699, "ts": 58221760503.524, "ph": "X", "cat": "fee", "dur": 0.28, "name": "_parse_optional (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2229)"}, {"pid": 106699, "tid": 106699, "ts": 58221760504.065, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760504.305, "ph": "X", "cat": "fee", "dur": 0.081, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760507.071, "ph": "X", "cat": "fee", "dur": 0.651, "name": "<listcomp> (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1861)"}, {"pid": 106699, "tid": 106699, "ts": 58221760506.359, "ph": "X", "cat": "fee", "dur": 1.463, "name": "_get_positional_actions (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1860)"}, {"pid": 106699, "tid": 106699, "ts": 58221760511.659, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760514.905, "ph": "X", "cat": "fee", "dur": 0.471, "name": "_get_nargs_pattern (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2332)"}, {"pid": 106699, "tid": 106699, "ts": 58221760513.242, "ph": "X", "cat": "fee", "dur": 2.264, "name": "<listcomp> (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2219)"}, {"pid": 106699, "tid": 106699, "ts": 58221760515.687, "ph": "X", "cat": "fee", "dur": 0.04, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58221760516.719, "ph": "X", "cat": "fee", "dur": 0.12, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760517.54, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760518.232, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760517.941, "ph": "X", "cat": "fee", "dur": 0.421, "name": "isstring (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:570)"}, {"pid": 106699, "tid": 106699, "ts": 58221760518.953, "ph": "X", "cat": "fee", "dur": 0.13, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760519.404, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760520.816, "ph": "X", "cat": "fee", "dur": 0.461, "name": "__new__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:1093)"}, {"pid": 106699, "tid": 106699, "ts": 58221760520.115, "ph": "X", "cat": "fee", "dur": 1.273, "name": "__call__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:686)"}, {"pid": 106699, "tid": 106699, "ts": 58221760518.783, "ph": "X", "cat": "fee", "dur": 2.735, "name": "__and__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:1515)"}, {"pid": 106699, "tid": 106699, "ts": 58221760522.119, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760522.009, "ph": "X", "cat": "fee", "dur": 0.18, "name": "isstring (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:570)"}, {"pid": 106699, "tid": 106699, "ts": 58221760523.171, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760523.832, "ph": "X", "cat": "fee", "dur": 0.421, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760523.031, "ph": "X", "cat": "fee", "dur": 1.322, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:231)"}, {"pid": 106699, "tid": 106699, "ts": 58221760524.764, "ph": "X", "cat": "fee", "dur": 0.481, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:77)"}, {"pid": 106699, "tid": 106699, "ts": 58221760526.277, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760526.066, "ph": "X", "cat": "fee", "dur": 0.341, "name": "tell (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:293)"}, {"pid": 106699, "tid": 106699, "ts": 58221760527.319, "ph": "X", "cat": "fee", "dur": 0.431, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:113)"}, {"pid": 106699, "tid": 106699, "ts": 58221760528.611, "ph": "X", "cat": "fee", "dur": 0.261, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760528.431, "ph": "X", "cat": "fee", "dur": 0.511, "name": "get (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:261)"}, {"pid": 106699, "tid": 106699, "ts": 58221760529.813, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760529.703, "ph": "X", "cat": "fee", "dur": 0.271, "name": "tell (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:293)"}, {"pid": 106699, "tid": 106699, "ts": 58221760530.224, "ph": "X", "cat": "fee", "dur": 0.13, "name": "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:256)"}, {"pid": 106699, "tid": 106699, "ts": 58221760530.956, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760530.835, "ph": "X", "cat": "fee", "dur": 0.211, "name": "groups (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760531.236, "ph": "X", "cat": "fee", "dur": 0.08, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760531.537, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760531.467, "ph": "X", "cat": "fee", "dur": 0.13, "name": "groups (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760530.595, "ph": "X", "cat": "fee", "dur": 1.272, "name": "opengroup (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:86)"}, {"pid": 106699, "tid": 106699, "ts": 58221760532.669, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760532.559, "ph": "X", "cat": "fee", "dur": 0.18, "name": "tell (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:293)"}, {"pid": 106699, "tid": 106699, "ts": 58221760533.26, "ph": "X", "cat": "fee", "dur": 0.19, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:113)"}, {"pid": 106699, "tid": 106699, "ts": 58221760533.941, "ph": "X", "cat": "fee", "dur": 0.221, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760533.801, "ph": "X", "cat": "fee", "dur": 0.491, "name": "get (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:261)"}, {"pid": 106699, "tid": 106699, "ts": 58221760534.693, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.ord"}, {"pid": 106699, "tid": 106699, "ts": 58221760535.023, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760534.883, "ph": "X", "cat": "fee", "dur": 0.23, "name": "append (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:176)"}, {"pid": 106699, "tid": 106699, "ts": 58221760535.564, "ph": "X", "cat": "fee", "dur": 0.191, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760535.444, "ph": "X", "cat": "fee", "dur": 0.361, "name": "get (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:261)"}, {"pid": 106699, "tid": 106699, "ts": 58221760536.276, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760536.175, "ph": "X", "cat": "fee", "dur": 0.191, "name": "tell (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:293)"}, {"pid": 106699, "tid": 106699, "ts": 58221760536.917, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760536.807, "ph": "X", "cat": "fee", "dur": 0.18, "name": "__len__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760537.578, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760538.079, "ph": "X", "cat": "fee", "dur": 0.15, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:113)"}, {"pid": 106699, "tid": 106699, "ts": 58221760537.458, "ph": "X", "cat": "fee", "dur": 0.841, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760538.54, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760538.46, "ph": "X", "cat": "fee", "dur": 0.14, "name": "__len__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760538.87, "ph": "X", "cat": "fee", "dur": 0.081, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760538.79, "ph": "X", "cat": "fee", "dur": 0.301, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760539.452, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760539.381, "ph": "X", "cat": "fee", "dur": 0.161, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760539.882, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760539.812, "ph": "X", "cat": "fee", "dur": 0.171, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760540.213, "ph": "X", "cat": "fee", "dur": 0.1, "name": "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:256)"}, {"pid": 106699, "tid": 106699, "ts": 58221760540.433, "ph": "X", "cat": "fee", "dur": 0.071, "name": "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:256)"}, {"pid": 106699, "tid": 106699, "ts": 58221760540.844, "ph": "X", "cat": "fee", "dur": 0.18, "name": "__setitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:172)"}, {"pid": 106699, "tid": 106699, "ts": 58221760541.485, "ph": "X", "cat": "fee", "dur": 0.221, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760541.335, "ph": "X", "cat": "fee", "dur": 0.421, "name": "get (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:261)"}, {"pid": 106699, "tid": 106699, "ts": 58221760542.006, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.ord"}, {"pid": 106699, "tid": 106699, "ts": 58221760542.257, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760542.157, "ph": "X", "cat": "fee", "dur": 0.21, "name": "append (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:176)"}, {"pid": 106699, "tid": 106699, "ts": 58221760542.698, "ph": "X", "cat": "fee", "dur": 0.18, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760542.557, "ph": "X", "cat": "fee", "dur": 0.431, "name": "get (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:261)"}, {"pid": 106699, "tid": 106699, "ts": 58221760543.409, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760543.289, "ph": "X", "cat": "fee", "dur": 0.21, "name": "tell (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:293)"}, {"pid": 106699, "tid": 106699, "ts": 58221760543.93, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760543.83, "ph": "X", "cat": "fee", "dur": 0.17, "name": "__len__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760544.251, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760544.551, "ph": "X", "cat": "fee", "dur": 0.15, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:113)"}, {"pid": 106699, "tid": 106699, "ts": 58221760544.19, "ph": "X", "cat": "fee", "dur": 0.572, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760545.002, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760544.922, "ph": "X", "cat": "fee", "dur": 0.14, "name": "__len__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760545.252, "ph": "X", "cat": "fee", "dur": 0.041, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760545.182, "ph": "X", "cat": "fee", "dur": 0.181, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760545.573, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760545.513, "ph": "X", "cat": "fee", "dur": 0.16, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760545.914, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760545.844, "ph": "X", "cat": "fee", "dur": 0.17, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760546.174, "ph": "X", "cat": "fee", "dur": 0.1, "name": "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:256)"}, {"pid": 106699, "tid": 106699, "ts": 58221760546.385, "ph": "X", "cat": "fee", "dur": 0.06, "name": "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:256)"}, {"pid": 106699, "tid": 106699, "ts": 58221760546.625, "ph": "X", "cat": "fee", "dur": 0.07, "name": "__setitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:172)"}, {"pid": 106699, "tid": 106699, "ts": 58221760547.036, "ph": "X", "cat": "fee", "dur": 0.21, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760546.896, "ph": "X", "cat": "fee", "dur": 0.42, "name": "get (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:261)"}, {"pid": 106699, "tid": 106699, "ts": 58221760547.537, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.ord"}, {"pid": 106699, "tid": 106699, "ts": 58221760547.767, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760547.677, "ph": "X", "cat": "fee", "dur": 0.17, "name": "append (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:176)"}, {"pid": 106699, "tid": 106699, "ts": 58221760548.158, "ph": "X", "cat": "fee", "dur": 0.19, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760548.028, "ph": "X", "cat": "fee", "dur": 0.37, "name": "get (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:261)"}, {"pid": 106699, "tid": 106699, "ts": 58221760548.829, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760548.719, "ph": "X", "cat": "fee", "dur": 0.21, "name": "tell (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:293)"}, {"pid": 106699, "tid": 106699, "ts": 58221760549.26, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760549.18, "ph": "X", "cat": "fee", "dur": 0.14, "name": "__len__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760549.53, "ph": "X", "cat": "fee", "dur": 0.041, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760549.791, "ph": "X", "cat": "fee", "dur": 0.14, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:113)"}, {"pid": 106699, "tid": 106699, "ts": 58221760549.47, "ph": "X", "cat": "fee", "dur": 0.511, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760550.172, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760550.092, "ph": "X", "cat": "fee", "dur": 0.14, "name": "__len__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760550.442, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760550.362, "ph": "X", "cat": "fee", "dur": 0.19, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760550.763, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760550.703, "ph": "X", "cat": "fee", "dur": 0.16, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760551.093, "ph": "X", "cat": "fee", "dur": 0.041, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760551.033, "ph": "X", "cat": "fee", "dur": 0.161, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760551.354, "ph": "X", "cat": "fee", "dur": 0.12, "name": "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:256)"}, {"pid": 106699, "tid": 106699, "ts": 58221760551.584, "ph": "X", "cat": "fee", "dur": 0.06, "name": "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:256)"}, {"pid": 106699, "tid": 106699, "ts": 58221760551.875, "ph": "X", "cat": "fee", "dur": 0.08, "name": "__setitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:172)"}, {"pid": 106699, "tid": 106699, "ts": 58221760552.436, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760552.346, "ph": "X", "cat": "fee", "dur": 0.15, "name": "__len__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760552.246, "ph": "X", "cat": "fee", "dur": 0.32, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760553.428, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760553.348, "ph": "X", "cat": "fee", "dur": 0.24, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760553.959, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760553.869, "ph": "X", "cat": "fee", "dur": 0.18, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760554.36, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760554.289, "ph": "X", "cat": "fee", "dur": 0.181, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760533.1, "ph": "X", "cat": "fee", "dur": 21.55, "name": "_parse (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:516)"}, {"pid": 106699, "tid": 106699, "ts": 58221760554.961, "ph": "X", "cat": "fee", "dur": 0.07, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760555.181, "ph": "X", "cat": "fee", "dur": 0.09, "name": "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:256)"}, {"pid": 106699, "tid": 106699, "ts": 58221760555.412, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760532.308, "ph": "X", "cat": "fee", "dur": 23.284, "name": "_parse_sub (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:456)"}, {"pid": 106699, "tid": 106699, "ts": 58221760556.073, "ph": "X", "cat": "fee", "dur": 0.561, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760555.923, "ph": "X", "cat": "fee", "dur": 0.801, "name": "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:256)"}, {"pid": 106699, "tid": 106699, "ts": 58221760558.487, "ph": "X", "cat": "fee", "dur": 0.161, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760558.738, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760557.906, "ph": "X", "cat": "fee", "dur": 1.062, "name": "getwidth (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:178)"}, {"pid": 106699, "tid": 106699, "ts": 58221760560.11, "ph": "X", "cat": "fee", "dur": 0.071, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760560.251, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760559.72, "ph": "X", "cat": "fee", "dur": 0.691, "name": "getwidth (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:178)"}, {"pid": 106699, "tid": 106699, "ts": 58221760561.433, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760561.583, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760561.082, "ph": "X", "cat": "fee", "dur": 0.651, "name": "getwidth (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:178)"}, {"pid": 106699, "tid": 106699, "ts": 58221760562.064, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760562.214, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760557.215, "ph": "X", "cat": "fee", "dur": 5.16, "name": "getwidth (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:178)"}, {"pid": 106699, "tid": 106699, "ts": 58221760556.985, "ph": "X", "cat": "fee", "dur": 5.6, "name": "closegroup (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:98)"}, {"pid": 106699, "tid": 106699, "ts": 58221760562.986, "ph": "X", "cat": "fee", "dur": 0.05, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760562.876, "ph": "X", "cat": "fee", "dur": 0.21, "name": "append (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:176)"}, {"pid": 106699, "tid": 106699, "ts": 58221760563.507, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760563.407, "ph": "X", "cat": "fee", "dur": 0.17, "name": "__len__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760563.306, "ph": "X", "cat": "fee", "dur": 0.321, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760564.218, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760564.128, "ph": "X", "cat": "fee", "dur": 0.25, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760526.948, "ph": "X", "cat": "fee", "dur": 37.751, "name": "_parse (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:516)"}, {"pid": 106699, "tid": 106699, "ts": 58221760564.899, "ph": "X", "cat": "fee", "dur": 0.061, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760565.1, "ph": "X", "cat": "fee", "dur": 0.14, "name": "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:256)"}, {"pid": 106699, "tid": 106699, "ts": 58221760565.34, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760525.746, "ph": "X", "cat": "fee", "dur": 39.745, "name": "_parse_sub (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:456)"}, {"pid": 106699, "tid": 106699, "ts": 58221760565.901, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760565.821, "ph": "X", "cat": "fee", "dur": 0.421, "name": "fix_flags (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:963)"}, {"pid": 106699, "tid": 106699, "ts": 58221760522.7, "ph": "X", "cat": "fee", "dur": 43.963, "name": "parse (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:979)"}, {"pid": 106699, "tid": 106699, "ts": 58221760567.925, "ph": "X", "cat": "fee", "dur": 0.1, "name": "getwidth (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:178)"}, {"pid": 106699, "tid": 106699, "ts": 58221760568.396, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760568.556, "ph": "X", "cat": "fee", "dur": 0.11, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760567.494, "ph": "X", "cat": "fee", "dur": 1.263, "name": "getwidth (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:178)"}, {"pid": 106699, "tid": 106699, "ts": 58221760569.248, "ph": "X", "cat": "fee", "dur": 0.09, "name": "list.extend"}, {"pid": 106699, "tid": 106699, "ts": 58221760567.384, "ph": "X", "cat": "fee", "dur": 2.074, "name": "_compile_info (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:511)"}, {"pid": 106699, "tid": 106699, "ts": 58221760570.78, "ph": "X", "cat": "fee", "dur": 0.041, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760570.981, "ph": "X", "cat": "fee", "dur": 0.07, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760571.241, "ph": "X", "cat": "fee", "dur": 0.211, "name": "_combine_flags (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:31)"}, {"pid": 106699, "tid": 106699, "ts": 58221760572.133, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760572.053, "ph": "X", "cat": "fee", "dur": 0.23, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760573.335, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760573.235, "ph": "X", "cat": "fee", "dur": 0.17, "name": "__len__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760573.145, "ph": "X", "cat": "fee", "dur": 0.31, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760573.706, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760573.636, "ph": "X", "cat": "fee", "dur": 0.17, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760572.985, "ph": "X", "cat": "fee", "dur": 1.052, "name": "_simple (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:398)"}, {"pid": 106699, "tid": 106699, "ts": 58221760574.257, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760574.367, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760574.497, "ph": "X", "cat": "fee", "dur": 0.031, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760574.608, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760574.718, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760575.339, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760575.269, "ph": "X", "cat": "fee", "dur": 0.2, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760575.77, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760575.87, "ph": "X", "cat": "fee", "dur": 0.07, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760576.171, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760576.1, "ph": "X", "cat": "fee", "dur": 0.251, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760574.918, "ph": "X", "cat": "fee", "dur": 1.734, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:37)"}, {"pid": 106699, "tid": 106699, "ts": 58221760576.862, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760576.932, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760577.263, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760577.193, "ph": "X", "cat": "fee", "dur": 0.19, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760578.074, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760578.004, "ph": "X", "cat": "fee", "dur": 0.14, "name": "__len__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760577.904, "ph": "X", "cat": "fee", "dur": 0.28, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760578.395, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760578.325, "ph": "X", "cat": "fee", "dur": 0.18, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760577.834, "ph": "X", "cat": "fee", "dur": 0.831, "name": "_simple (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:398)"}, {"pid": 106699, "tid": 106699, "ts": 58221760578.765, "ph": "X", "cat": "fee", "dur": 0.041, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760578.846, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760578.976, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760579.086, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760579.186, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760579.747, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760579.657, "ph": "X", "cat": "fee", "dur": 0.191, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760580.038, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760580.128, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760580.379, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760580.308, "ph": "X", "cat": "fee", "dur": 0.211, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760579.377, "ph": "X", "cat": "fee", "dur": 1.292, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:37)"}, {"pid": 106699, "tid": 106699, "ts": 58221760580.779, "ph": "X", "cat": "fee", "dur": 0.06, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760580.889, "ph": "X", "cat": "fee", "dur": 0.041, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760581.16, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760581.1, "ph": "X", "cat": "fee", "dur": 0.17, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760581.921, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760581.841, "ph": "X", "cat": "fee", "dur": 0.151, "name": "__len__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760581.741, "ph": "X", "cat": "fee", "dur": 0.321, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760582.252, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760582.182, "ph": "X", "cat": "fee", "dur": 0.21, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760581.661, "ph": "X", "cat": "fee", "dur": 0.882, "name": "_simple (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:398)"}, {"pid": 106699, "tid": 106699, "ts": 58221760582.643, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760582.733, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760582.823, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760582.933, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760583.034, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760583.595, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760583.514, "ph": "X", "cat": "fee", "dur": 0.181, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760583.855, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760583.975, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760584.176, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760584.106, "ph": "X", "cat": "fee", "dur": 0.2, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760583.204, "ph": "X", "cat": "fee", "dur": 1.182, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:37)"}, {"pid": 106699, "tid": 106699, "ts": 58221760584.486, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760584.566, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760584.837, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760584.767, "ph": "X", "cat": "fee", "dur": 0.2, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760571.582, "ph": "X", "cat": "fee", "dur": 13.465, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:37)"}, {"pid": 106699, "tid": 106699, "ts": 58221760585.228, "ph": "X", "cat": "fee", "dur": 0.09, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760585.478, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760569.769, "ph": "X", "cat": "fee", "dur": 15.859, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:37)"}, {"pid": 106699, "tid": 106699, "ts": 58221760585.839, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760567.023, "ph": "X", "cat": "fee", "dur": 18.926, "name": "_code (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:573)"}, {"pid": 106699, "tid": 106699, "ts": 58221760586.47, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760586.38, "ph": "X", "cat": "fee", "dur": 0.15, "name": "groups (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760586.811, "ph": "X", "cat": "fee", "dur": 0.07, "name": "dict.items"}, {"pid": 106699, "tid": 106699, "ts": 58221760587.472, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760587.392, "ph": "X", "cat": "fee", "dur": 0.14, "name": "groups (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760587.772, "ph": "X", "cat": "fee", "dur": 0.491, "name": "_sre.compile"}, {"pid": 106699, "tid": 106699, "ts": 58221760521.838, "ph": "X", "cat": "fee", "dur": 66.536, "name": "compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:740)"}, {"pid": 106699, "tid": 106699, "ts": 58221760589.586, "ph": "X", "cat": "fee", "dur": 0.17, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760589.957, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760590.788, "ph": "X", "cat": "fee", "dur": 0.341, "name": "__new__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:1093)"}, {"pid": 106699, "tid": 106699, "ts": 58221760590.457, "ph": "X", "cat": "fee", "dur": 0.752, "name": "__call__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:686)"}, {"pid": 106699, "tid": 106699, "ts": 58221760589.395, "ph": "X", "cat": "fee", "dur": 1.894, "name": "__and__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:1515)"}, {"pid": 106699, "tid": 106699, "ts": 58221760591.499, "ph": "X", "cat": "fee", "dur": 0.091, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760516.629, "ph": "X", "cat": "fee", "dur": 75.401, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:272)"}, {"pid": 106699, "tid": 106699, "ts": 58221760592.211, "ph": "X", "cat": "fee", "dur": 0.952, "name": "re.Pattern.match"}, {"pid": 106699, "tid": 106699, "ts": 58221760516.378, "ph": "X", "cat": "fee", "dur": 76.845, "name": "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:163)"}, {"pid": 106699, "tid": 106699, "ts": 58221760594.064, "ph": "X", "cat": "fee", "dur": 0.191, "name": "re.Match.groups"}, {"pid": 106699, "tid": 106699, "ts": 58221760594.926, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760594.736, "ph": "X", "cat": "fee", "dur": 0.41, "name": "<listcomp> (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2223)"}, {"pid": 106699, "tid": 106699, "ts": 58221760595.277, "ph": "X", "cat": "fee", "dur": 0.05, "name": "list.extend"}, {"pid": 106699, "tid": 106699, "ts": 58221760511.379, "ph": "X", "cat": "fee", "dur": 84.098, "name": "_match_arguments_partial (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2213)"}, {"pid": 106699, "tid": 106699, "ts": 58221760598.322, "ph": "X", "cat": "fee", "dur": 0.08, "name": "set.add"}, {"pid": 106699, "tid": 106699, "ts": 58221760603.011, "ph": "X", "cat": "fee", "dur": 0.22, "name": "list.remove"}, {"pid": 106699, "tid": 106699, "ts": 58221760603.853, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760608.752, "ph": "X", "cat": "fee", "dur": 0.351, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760607.349, "ph": "X", "cat": "fee", "dur": 1.974, "name": "_registry_get (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1394)"}, {"pid": 106699, "tid": 106699, "ts": 58221760609.744, "ph": "X", "cat": "fee", "dur": 0.21, "name": "builtins.callable"}, {"pid": 106699, "tid": 106699, "ts": 58221760610.375, "ph": "X", "cat": "fee", "dur": 0.05, "name": "identity (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1777)"}, {"pid": 106699, "tid": 106699, "ts": 58221760606.658, "ph": "X", "cat": "fee", "dur": 4.268, "name": "_get_value (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2521)"}, {"pid": 106699, "tid": 106699, "ts": 58221760613.2, "ph": "X", "cat": "fee", "dur": 0.251, "name": "_check_value (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2547)"}, {"pid": 106699, "tid": 106699, "ts": 58221760602.24, "ph": "X", "cat": "fee", "dur": 11.331, "name": "_get_values (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2465)"}, {"pid": 106699, "tid": 106699, "ts": 58221760613.851, "ph": "X", "cat": "fee", "dur": 0.041, "name": "set.add"}, {"pid": 106699, "tid": 106699, "ts": 58221760614.022, "ph": "X", "cat": "fee", "dur": 0.05, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760615.214, "ph": "X", "cat": "fee", "dur": 0.24, "name": "builtins.setattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760615.044, "ph": "X", "cat": "fee", "dur": 0.501, "name": "__call__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:955)"}, {"pid": 106699, "tid": 106699, "ts": 58221760597.942, "ph": "X", "cat": "fee", "dur": 17.753, "name": "take_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1960)"}, {"pid": 106699, "tid": 106699, "ts": 58221760616.056, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760509.415, "ph": "X", "cat": "fee", "dur": 107.112, "name": "consume_positionals (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2062)"}, {"pid": 106699, "tid": 106699, "ts": 58221760616.877, "ph": "X", "cat": "fee", "dur": 0.06, "name": "list.extend"}, {"pid": 106699, "tid": 106699, "ts": 58221760617.478, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760617.649, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760618.029, "ph": "X", "cat": "fee", "dur": 0.111, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760618.33, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760618.52, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760618.63, "ph": "X", "cat": "fee", "dur": 0.091, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760618.851, "ph": "X", "cat": "fee", "dur": 0.11, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760619.602, "ph": "X", "cat": "fee", "dur": 0.05, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760619.442, "ph": "X", "cat": "fee", "dur": 0.27, "name": "_registry_get (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1394)"}, {"pid": 106699, "tid": 106699, "ts": 58221760619.813, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.callable"}, {"pid": 106699, "tid": 106699, "ts": 58221760620.003, "ph": "X", "cat": "fee", "dur": 0.05, "name": "identity (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1777)"}, {"pid": 106699, "tid": 106699, "ts": 58221760619.242, "ph": "X", "cat": "fee", "dur": 0.861, "name": "_get_value (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2521)"}, {"pid": 106699, "tid": 106699, "ts": 58221760620.173, "ph": "X", "cat": "fee", "dur": 0.291, "name": "builtins.setattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760620.734, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760620.855, "ph": "X", "cat": "fee", "dur": 0.11, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760621.075, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.getattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760621.586, "ph": "X", "cat": "fee", "dur": 0.04, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760621.446, "ph": "X", "cat": "fee", "dur": 0.22, "name": "_registry_get (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1394)"}, {"pid": 106699, "tid": 106699, "ts": 58221760621.746, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.callable"}, {"pid": 106699, "tid": 106699, "ts": 58221760621.867, "ph": "X", "cat": "fee", "dur": 0.05, "name": "identity (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1777)"}, {"pid": 106699, "tid": 106699, "ts": 58221760621.305, "ph": "X", "cat": "fee", "dur": 0.672, "name": "_get_value (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2521)"}, {"pid": 106699, "tid": 106699, "ts": 58221760622.027, "ph": "X", "cat": "fee", "dur": 0.12, "name": "builtins.setattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760500.188, "ph": "X", "cat": "fee", "dur": 122.35, "name": "_parse_known_args (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1913)"}, {"pid": 106699, "tid": 106699, "ts": 58221760623.52, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.hasattr"}, {"pid": 106699, "tid": 106699, "ts": 58221760486.342, "ph": "X", "cat": "fee", "dur": 137.358, "name": "parse_known_args (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1875)"}, {"pid": 106699, "tid": 106699, "ts": 58221760483.396, "ph": "X", "cat": "fee", "dur": 140.524, "name": "parse_args (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1868)"}, {"pid": 106699, "tid": 106699, "ts": 58221760624.622, "ph": "X", "cat": "fee", "dur": 6.782, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58221760624.461, "ph": "X", "cat": "fee", "dur": 7.575, "name": "exists (<frozen genericpath>:16)"}, {"pid": 106699, "tid": 106699, "ts": 58221760634.32, "ph": "X", "cat": "fee", "dur": 0.06, "name": "posix.fspath"}, {"pid": 106699, "tid": 106699, "ts": 58221760634.53, "ph": "X", "cat": "fee", "dur": 0.091, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760636.694, "ph": "X", "cat": "fee", "dur": 0.221, "name": "str.rfind"}, {"pid": 106699, "tid": 106699, "ts": 58221760637.035, "ph": "X", "cat": "fee", "dur": 0.07, "name": "str.rfind"}, {"pid": 106699, "tid": 106699, "ts": 58221760636.554, "ph": "X", "cat": "fee", "dur": 1.243, "name": "_splitext (<frozen genericpath>:121)"}, {"pid": 106699, "tid": 106699, "ts": 58221760634.14, "ph": "X", "cat": "fee", "dur": 3.747, "name": "splitext (<frozen posixpath>:117)"}, {"pid": 106699, "tid": 106699, "ts": 58221760638.147, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.lower"}, {"pid": 106699, "tid": 106699, "ts": 58221760676.69, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760677.682, "ph": "X", "cat": "fee", "dur": 0.11, "name": "value (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:1255)"}, {"pid": 106699, "tid": 106699, "ts": 58221760677.351, "ph": "X", "cat": "fee", "dur": 0.551, "name": "__get__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:193)"}, {"pid": 106699, "tid": 106699, "ts": 58221760679.004, "ph": "X", "cat": "fee", "dur": 0.15, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760679.715, "ph": "X", "cat": "fee", "dur": 0.101, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760679.415, "ph": "X", "cat": "fee", "dur": 0.471, "name": "isstring (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:570)"}, {"pid": 106699, "tid": 106699, "ts": 58221760680.417, "ph": "X", "cat": "fee", "dur": 0.25, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760680.898, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760681.869, "ph": "X", "cat": "fee", "dur": 0.381, "name": "__new__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:1093)"}, {"pid": 106699, "tid": 106699, "ts": 58221760681.479, "ph": "X", "cat": "fee", "dur": 0.861, "name": "__call__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:686)"}, {"pid": 106699, "tid": 106699, "ts": 58221760680.256, "ph": "X", "cat": "fee", "dur": 2.245, "name": "__and__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:1515)"}, {"pid": 106699, "tid": 106699, "ts": 58221760683.072, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760682.941, "ph": "X", "cat": "fee", "dur": 0.261, "name": "isstring (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:570)"}, {"pid": 106699, "tid": 106699, "ts": 58221760684.074, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760684.865, "ph": "X", "cat": "fee", "dur": 0.461, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760683.933, "ph": "X", "cat": "fee", "dur": 1.503, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:231)"}, {"pid": 106699, "tid": 106699, "ts": 58221760685.817, "ph": "X", "cat": "fee", "dur": 0.411, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:77)"}, {"pid": 106699, "tid": 106699, "ts": 58221760687.229, "ph": "X", "cat": "fee", "dur": 0.061, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760687.049, "ph": "X", "cat": "fee", "dur": 0.381, "name": "tell (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:293)"}, {"pid": 106699, "tid": 106699, "ts": 58221760688.231, "ph": "X", "cat": "fee", "dur": 0.591, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:113)"}, {"pid": 106699, "tid": 106699, "ts": 58221760689.604, "ph": "X", "cat": "fee", "dur": 0.531, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760689.434, "ph": "X", "cat": "fee", "dur": 0.781, "name": "get (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:261)"}, {"pid": 106699, "tid": 106699, "ts": 58221760690.967, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760690.876, "ph": "X", "cat": "fee", "dur": 0.181, "name": "tell (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:293)"}, {"pid": 106699, "tid": 106699, "ts": 58221760691.337, "ph": "X", "cat": "fee", "dur": 0.13, "name": "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:256)"}, {"pid": 106699, "tid": 106699, "ts": 58221760692.169, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760692.059, "ph": "X", "cat": "fee", "dur": 0.2, "name": "groups (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760692.509, "ph": "X", "cat": "fee", "dur": 0.111, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760692.86, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760692.77, "ph": "X", "cat": "fee", "dur": 0.24, "name": "groups (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760691.798, "ph": "X", "cat": "fee", "dur": 1.393, "name": "opengroup (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:86)"}, {"pid": 106699, "tid": 106699, "ts": 58221760694.022, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760693.912, "ph": "X", "cat": "fee", "dur": 0.19, "name": "tell (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:293)"}, {"pid": 106699, "tid": 106699, "ts": 58221760694.553, "ph": "X", "cat": "fee", "dur": 0.201, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:113)"}, {"pid": 106699, "tid": 106699, "ts": 58221760695.315, "ph": "X", "cat": "fee", "dur": 0.24, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760695.174, "ph": "X", "cat": "fee", "dur": 0.451, "name": "get (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:261)"}, {"pid": 106699, "tid": 106699, "ts": 58221760702.228, "ph": "X", "cat": "fee", "dur": 0.24, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58221760701.957, "ph": "X", "cat": "fee", "dur": 0.651, "name": "_escape (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:376)"}, {"pid": 106699, "tid": 106699, "ts": 58221760702.929, "ph": "X", "cat": "fee", "dur": 0.05, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760702.809, "ph": "X", "cat": "fee", "dur": 0.24, "name": "append (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:176)"}, {"pid": 106699, "tid": 106699, "ts": 58221760703.51, "ph": "X", "cat": "fee", "dur": 0.211, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760703.37, "ph": "X", "cat": "fee", "dur": 0.401, "name": "get (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:261)"}, {"pid": 106699, "tid": 106699, "ts": 58221760704.221, "ph": "X", "cat": "fee", "dur": 0.031, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760704.111, "ph": "X", "cat": "fee", "dur": 0.181, "name": "tell (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:293)"}, {"pid": 106699, "tid": 106699, "ts": 58221760704.762, "ph": "X", "cat": "fee", "dur": 0.031, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760704.672, "ph": "X", "cat": "fee", "dur": 0.411, "name": "__len__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760705.444, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760705.915, "ph": "X", "cat": "fee", "dur": 0.17, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:113)"}, {"pid": 106699, "tid": 106699, "ts": 58221760705.344, "ph": "X", "cat": "fee", "dur": 0.821, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760706.476, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760706.396, "ph": "X", "cat": "fee", "dur": 0.14, "name": "__len__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760706.746, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760706.686, "ph": "X", "cat": "fee", "dur": 0.271, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760707.247, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760707.187, "ph": "X", "cat": "fee", "dur": 0.19, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760707.758, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760707.698, "ph": "X", "cat": "fee", "dur": 0.16, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760708.089, "ph": "X", "cat": "fee", "dur": 0.12, "name": "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:256)"}, {"pid": 106699, "tid": 106699, "ts": 58221760708.349, "ph": "X", "cat": "fee", "dur": 0.06, "name": "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:256)"}, {"pid": 106699, "tid": 106699, "ts": 58221760708.74, "ph": "X", "cat": "fee", "dur": 0.17, "name": "__setitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:172)"}, {"pid": 106699, "tid": 106699, "ts": 58221760709.421, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760709.331, "ph": "X", "cat": "fee", "dur": 0.15, "name": "__len__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760709.221, "ph": "X", "cat": "fee", "dur": 0.33, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760710.613, "ph": "X", "cat": "fee", "dur": 0.051, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760710.533, "ph": "X", "cat": "fee", "dur": 0.201, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760694.373, "ph": "X", "cat": "fee", "dur": 16.641, "name": "_parse (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:516)"}, {"pid": 106699, "tid": 106699, "ts": 58221760711.275, "ph": "X", "cat": "fee", "dur": 0.07, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760711.495, "ph": "X", "cat": "fee", "dur": 0.09, "name": "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:256)"}, {"pid": 106699, "tid": 106699, "ts": 58221760711.696, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760693.712, "ph": "X", "cat": "fee", "dur": 18.164, "name": "_parse_sub (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:456)"}, {"pid": 106699, "tid": 106699, "ts": 58221760712.327, "ph": "X", "cat": "fee", "dur": 0.26, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760712.156, "ph": "X", "cat": "fee", "dur": 0.491, "name": "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:256)"}, {"pid": 106699, "tid": 106699, "ts": 58221760714.32, "ph": "X", "cat": "fee", "dur": 0.221, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760714.641, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760713.759, "ph": "X", "cat": "fee", "dur": 1.153, "name": "getwidth (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:178)"}, {"pid": 106699, "tid": 106699, "ts": 58221760715.433, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760715.613, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760713.168, "ph": "X", "cat": "fee", "dur": 2.615, "name": "getwidth (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:178)"}, {"pid": 106699, "tid": 106699, "ts": 58221760712.938, "ph": "X", "cat": "fee", "dur": 3.026, "name": "closegroup (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:98)"}, {"pid": 106699, "tid": 106699, "ts": 58221760716.374, "ph": "X", "cat": "fee", "dur": 0.05, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760716.254, "ph": "X", "cat": "fee", "dur": 0.22, "name": "append (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:176)"}, {"pid": 106699, "tid": 106699, "ts": 58221760716.915, "ph": "X", "cat": "fee", "dur": 0.251, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760716.775, "ph": "X", "cat": "fee", "dur": 0.461, "name": "get (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:261)"}, {"pid": 106699, "tid": 106699, "ts": 58221760717.587, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.ord"}, {"pid": 106699, "tid": 106699, "ts": 58221760717.897, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760717.777, "ph": "X", "cat": "fee", "dur": 0.22, "name": "append (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:176)"}, {"pid": 106699, "tid": 106699, "ts": 58221760718.328, "ph": "X", "cat": "fee", "dur": 0.18, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760718.208, "ph": "X", "cat": "fee", "dur": 0.36, "name": "get (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:261)"}, {"pid": 106699, "tid": 106699, "ts": 58221760718.759, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.ord"}, {"pid": 106699, "tid": 106699, "ts": 58221760719.009, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760718.909, "ph": "X", "cat": "fee", "dur": 0.17, "name": "append (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:176)"}, {"pid": 106699, "tid": 106699, "ts": 58221760719.38, "ph": "X", "cat": "fee", "dur": 0.17, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760719.26, "ph": "X", "cat": "fee", "dur": 0.34, "name": "get (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:261)"}, {"pid": 106699, "tid": 106699, "ts": 58221760720.151, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760720.021, "ph": "X", "cat": "fee", "dur": 0.221, "name": "tell (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:293)"}, {"pid": 106699, "tid": 106699, "ts": 58221760720.482, "ph": "X", "cat": "fee", "dur": 0.08, "name": "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:256)"}, {"pid": 106699, "tid": 106699, "ts": 58221760721.003, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760720.913, "ph": "X", "cat": "fee", "dur": 0.16, "name": "groups (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760721.213, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760721.454, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760721.384, "ph": "X", "cat": "fee", "dur": 0.13, "name": "groups (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760720.753, "ph": "X", "cat": "fee", "dur": 0.901, "name": "opengroup (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:86)"}, {"pid": 106699, "tid": 106699, "ts": 58221760722.356, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760722.255, "ph": "X", "cat": "fee", "dur": 0.171, "name": "tell (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:293)"}, {"pid": 106699, "tid": 106699, "ts": 58221760722.857, "ph": "X", "cat": "fee", "dur": 0.18, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:113)"}, {"pid": 106699, "tid": 106699, "ts": 58221760723.568, "ph": "X", "cat": "fee", "dur": 0.23, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760723.448, "ph": "X", "cat": "fee", "dur": 0.41, "name": "get (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:261)"}, {"pid": 106699, "tid": 106699, "ts": 58221760724.319, "ph": "X", "cat": "fee", "dur": 0.06, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760724.219, "ph": "X", "cat": "fee", "dur": 0.241, "name": "append (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:176)"}, {"pid": 106699, "tid": 106699, "ts": 58221760724.75, "ph": "X", "cat": "fee", "dur": 0.18, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760724.62, "ph": "X", "cat": "fee", "dur": 0.36, "name": "get (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:261)"}, {"pid": 106699, "tid": 106699, "ts": 58221760725.381, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760725.281, "ph": "X", "cat": "fee", "dur": 0.17, "name": "tell (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:293)"}, {"pid": 106699, "tid": 106699, "ts": 58221760725.812, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760725.722, "ph": "X", "cat": "fee", "dur": 0.15, "name": "__len__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760726.123, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760726.493, "ph": "X", "cat": "fee", "dur": 0.151, "name": "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:113)"}, {"pid": 106699, "tid": 106699, "ts": 58221760726.053, "ph": "X", "cat": "fee", "dur": 0.661, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760726.934, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760726.854, "ph": "X", "cat": "fee", "dur": 0.15, "name": "__len__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760727.195, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760727.135, "ph": "X", "cat": "fee", "dur": 0.18, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760727.595, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760727.535, "ph": "X", "cat": "fee", "dur": 0.161, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760727.946, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760727.886, "ph": "X", "cat": "fee", "dur": 0.17, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760728.417, "ph": "X", "cat": "fee", "dur": 0.19, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760728.237, "ph": "X", "cat": "fee", "dur": 0.44, "name": "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:256)"}, {"pid": 106699, "tid": 106699, "ts": 58221760728.988, "ph": "X", "cat": "fee", "dur": 0.1, "name": "__setitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:172)"}, {"pid": 106699, "tid": 106699, "ts": 58221760729.459, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760729.379, "ph": "X", "cat": "fee", "dur": 0.16, "name": "__len__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760729.299, "ph": "X", "cat": "fee", "dur": 0.29, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760730.18, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760730.09, "ph": "X", "cat": "fee", "dur": 0.2, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760722.676, "ph": "X", "cat": "fee", "dur": 7.825, "name": "_parse (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:516)"}, {"pid": 106699, "tid": 106699, "ts": 58221760730.701, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760730.872, "ph": "X", "cat": "fee", "dur": 0.1, "name": "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:256)"}, {"pid": 106699, "tid": 106699, "ts": 58221760731.072, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760722.035, "ph": "X", "cat": "fee", "dur": 9.187, "name": "_parse_sub (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:456)"}, {"pid": 106699, "tid": 106699, "ts": 58221760731.603, "ph": "X", "cat": "fee", "dur": 0.19, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760731.473, "ph": "X", "cat": "fee", "dur": 0.37, "name": "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:256)"}, {"pid": 106699, "tid": 106699, "ts": 58221760733.066, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760733.226, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760732.625, "ph": "X", "cat": "fee", "dur": 0.781, "name": "getwidth (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:178)"}, {"pid": 106699, "tid": 106699, "ts": 58221760733.767, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760733.907, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760732.144, "ph": "X", "cat": "fee", "dur": 1.934, "name": "getwidth (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:178)"}, {"pid": 106699, "tid": 106699, "ts": 58221760732.024, "ph": "X", "cat": "fee", "dur": 2.204, "name": "closegroup (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:98)"}, {"pid": 106699, "tid": 106699, "ts": 58221760734.619, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760734.498, "ph": "X", "cat": "fee", "dur": 0.211, "name": "append (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:176)"}, {"pid": 106699, "tid": 106699, "ts": 58221760735.069, "ph": "X", "cat": "fee", "dur": 0.511, "name": "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)"}, {"pid": 106699, "tid": 106699, "ts": 58221760734.939, "ph": "X", "cat": "fee", "dur": 0.742, "name": "get (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:261)"}, {"pid": 106699, "tid": 106699, "ts": 58221760735.941, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.ord"}, {"pid": 106699, "tid": 106699, "ts": 58221760736.222, "ph": "X", "cat": "fee", "dur": 0.07, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760736.111, "ph": "X", "cat": "fee", "dur": 0.251, "name": "append (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:176)"}, {"pid": 106699, "tid": 106699, "ts": 58221760736.783, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760736.693, "ph": "X", "cat": "fee", "dur": 0.15, "name": "__len__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760736.602, "ph": "X", "cat": "fee", "dur": 0.291, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760737.504, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760737.414, "ph": "X", "cat": "fee", "dur": 0.23, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760737.975, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760737.905, "ph": "X", "cat": "fee", "dur": 0.17, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760738.496, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760738.426, "ph": "X", "cat": "fee", "dur": 0.17, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760738.917, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760738.847, "ph": "X", "cat": "fee", "dur": 0.17, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760739.287, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760739.217, "ph": "X", "cat": "fee", "dur": 0.171, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760687.961, "ph": "X", "cat": "fee", "dur": 51.687, "name": "_parse (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:516)"}, {"pid": 106699, "tid": 106699, "ts": 58221760739.808, "ph": "X", "cat": "fee", "dur": 0.061, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760739.989, "ph": "X", "cat": "fee", "dur": 0.18, "name": "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:256)"}, {"pid": 106699, "tid": 106699, "ts": 58221760740.269, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760686.719, "ph": "X", "cat": "fee", "dur": 53.67, "name": "_parse_sub (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:456)"}, {"pid": 106699, "tid": 106699, "ts": 58221760740.79, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760740.71, "ph": "X", "cat": "fee", "dur": 0.351, "name": "fix_flags (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:963)"}, {"pid": 106699, "tid": 106699, "ts": 58221760683.633, "ph": "X", "cat": "fee", "dur": 57.839, "name": "parse (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:979)"}, {"pid": 106699, "tid": 106699, "ts": 58221760742.684, "ph": "X", "cat": "fee", "dur": 0.11, "name": "getwidth (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:178)"}, {"pid": 106699, "tid": 106699, "ts": 58221760743.956, "ph": "X", "cat": "fee", "dur": 0.09, "name": "getwidth (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:178)"}, {"pid": 106699, "tid": 106699, "ts": 58221760744.557, "ph": "X", "cat": "fee", "dur": 0.101, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760744.718, "ph": "X", "cat": "fee", "dur": 0.13, "name": "builtins.min"}, {"pid": 106699, "tid": 106699, "ts": 58221760742.233, "ph": "X", "cat": "fee", "dur": 2.725, "name": "getwidth (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:178)"}, {"pid": 106699, "tid": 106699, "ts": 58221760745.89, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_get_iscased (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:428)"}, {"pid": 106699, "tid": 106699, "ts": 58221760746.511, "ph": "X", "cat": "fee", "dur": 0.24, "name": "_combine_flags (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:31)"}, {"pid": 106699, "tid": 106699, "ts": 58221760747.162, "ph": "X", "cat": "fee", "dur": 0.09, "name": "_get_iscased (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:428)"}, {"pid": 106699, "tid": 106699, "ts": 58221760746.982, "ph": "X", "cat": "fee", "dur": 0.651, "name": "_get_literal_prefix (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:436)"}, {"pid": 106699, "tid": 106699, "ts": 58221760747.924, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760748.074, "ph": "X", "cat": "fee", "dur": 0.05, "name": "list.extend"}, {"pid": 106699, "tid": 106699, "ts": 58221760745.609, "ph": "X", "cat": "fee", "dur": 2.685, "name": "_get_literal_prefix (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:436)"}, {"pid": 106699, "tid": 106699, "ts": 58221760749.126, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_combine_flags (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:31)"}, {"pid": 106699, "tid": 106699, "ts": 58221760749.637, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_get_iscased (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:428)"}, {"pid": 106699, "tid": 106699, "ts": 58221760748.695, "ph": "X", "cat": "fee", "dur": 1.212, "name": "_get_charset_prefix (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:467)"}, {"pid": 106699, "tid": 106699, "ts": 58221760750.158, "ph": "X", "cat": "fee", "dur": 0.05, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760750.298, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760750.428, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760750.639, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760750.849, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760750.949, "ph": "X", "cat": "fee", "dur": 0.06, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760751.12, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760742.123, "ph": "X", "cat": "fee", "dur": 9.147, "name": "_compile_info (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:511)"}, {"pid": 106699, "tid": 106699, "ts": 58221760752.572, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760752.763, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760752.983, "ph": "X", "cat": "fee", "dur": 0.12, "name": "_combine_flags (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:31)"}, {"pid": 106699, "tid": 106699, "ts": 58221760753.735, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760753.654, "ph": "X", "cat": "fee", "dur": 0.241, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760754.746, "ph": "X", "cat": "fee", "dur": 0.041, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760754.646, "ph": "X", "cat": "fee", "dur": 0.171, "name": "__len__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760754.526, "ph": "X", "cat": "fee", "dur": 0.341, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760755.107, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760755.037, "ph": "X", "cat": "fee", "dur": 0.19, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760754.456, "ph": "X", "cat": "fee", "dur": 0.972, "name": "_simple (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:398)"}, {"pid": 106699, "tid": 106699, "ts": 58221760755.618, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760755.718, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760755.819, "ph": "X", "cat": "fee", "dur": 0.09, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760755.999, "ph": "X", "cat": "fee", "dur": 0.05, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760756.129, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760756.76, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760756.69, "ph": "X", "cat": "fee", "dur": 0.18, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760758.113, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760758.413, "ph": "X", "cat": "fee", "dur": 0.351, "name": "bytearray.find"}, {"pid": 106699, "tid": 106699, "ts": 58221760759.295, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760759.385, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760757.231, "ph": "X", "cat": "fee", "dur": 2.304, "name": "_optimize_charset (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:243)"}, {"pid": 106699, "tid": 106699, "ts": 58221760759.966, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760760.087, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760760.177, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760760.728, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760761.219, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760761.369, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760760.507, "ph": "X", "cat": "fee", "dur": 0.952, "name": "_compile_charset (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:216)"}, {"pid": 106699, "tid": 106699, "ts": 58221760761.599, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760761.93, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760761.84, "ph": "X", "cat": "fee", "dur": 0.33, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760756.319, "ph": "X", "cat": "fee", "dur": 6.172, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:37)"}, {"pid": 106699, "tid": 106699, "ts": 58221760762.711, "ph": "X", "cat": "fee", "dur": 0.081, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760762.872, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760763.112, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760763.042, "ph": "X", "cat": "fee", "dur": 0.221, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760753.224, "ph": "X", "cat": "fee", "dur": 10.129, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:37)"}, {"pid": 106699, "tid": 106699, "ts": 58221760763.543, "ph": "X", "cat": "fee", "dur": 0.04, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760763.753, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760764.084, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760764.174, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760764.365, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760764.445, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760764.855, "ph": "X", "cat": "fee", "dur": 0.031, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760765.006, "ph": "X", "cat": "fee", "dur": 0.05, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760765.246, "ph": "X", "cat": "fee", "dur": 0.12, "name": "_combine_flags (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:31)"}, {"pid": 106699, "tid": 106699, "ts": 58221760765.907, "ph": "X", "cat": "fee", "dur": 0.041, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760765.827, "ph": "X", "cat": "fee", "dur": 0.201, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760766.679, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760766.589, "ph": "X", "cat": "fee", "dur": 0.15, "name": "__len__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:164)"}, {"pid": 106699, "tid": 106699, "ts": 58221760766.499, "ph": "X", "cat": "fee", "dur": 0.29, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760766.99, "ph": "X", "cat": "fee", "dur": 0.05, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760766.919, "ph": "X", "cat": "fee", "dur": 0.211, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760766.428, "ph": "X", "cat": "fee", "dur": 0.882, "name": "_simple (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:398)"}, {"pid": 106699, "tid": 106699, "ts": 58221760767.46, "ph": "X", "cat": "fee", "dur": 0.05, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760767.581, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760767.701, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760767.831, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760767.921, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760768.482, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760768.402, "ph": "X", "cat": "fee", "dur": 0.191, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760768.893, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760769.093, "ph": "X", "cat": "fee", "dur": 0.041, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760769.033, "ph": "X", "cat": "fee", "dur": 0.211, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760768.092, "ph": "X", "cat": "fee", "dur": 1.232, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:37)"}, {"pid": 106699, "tid": 106699, "ts": 58221760769.454, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760769.544, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760769.815, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760769.745, "ph": "X", "cat": "fee", "dur": 0.21, "name": "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)"}, {"pid": 106699, "tid": 106699, "ts": 58221760765.477, "ph": "X", "cat": "fee", "dur": 4.548, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:37)"}, {"pid": 106699, "tid": 106699, "ts": 58221760770.165, "ph": "X", "cat": "fee", "dur": 0.031, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760770.316, "ph": "X", "cat": "fee", "dur": 0.07, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760770.566, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760770.656, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760751.601, "ph": "X", "cat": "fee", "dur": 19.166, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:37)"}, {"pid": 106699, "tid": 106699, "ts": 58221760770.977, "ph": "X", "cat": "fee", "dur": 0.03, "name": "list.append"}, {"pid": 106699, "tid": 106699, "ts": 58221760741.782, "ph": "X", "cat": "fee", "dur": 29.285, "name": "_code (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:573)"}, {"pid": 106699, "tid": 106699, "ts": 58221760771.528, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760771.438, "ph": "X", "cat": "fee", "dur": 0.15, "name": "groups (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760771.869, "ph": "X", "cat": "fee", "dur": 0.07, "name": "dict.items"}, {"pid": 106699, "tid": 106699, "ts": 58221760772.52, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760772.45, "ph": "X", "cat": "fee", "dur": 0.13, "name": "groups (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760772.841, "ph": "X", "cat": "fee", "dur": 0.551, "name": "_sre.compile"}, {"pid": 106699, "tid": 106699, "ts": 58221760682.801, "ph": "X", "cat": "fee", "dur": 90.701, "name": "compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:740)"}, {"pid": 106699, "tid": 106699, "ts": 58221760774.674, "ph": "X", "cat": "fee", "dur": 0.18, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760775.085, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.isinstance"}, {"pid": 106699, "tid": 106699, "ts": 58221760775.896, "ph": "X", "cat": "fee", "dur": 0.371, "name": "__new__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:1093)"}, {"pid": 106699, "tid": 106699, "ts": 58221760775.596, "ph": "X", "cat": "fee", "dur": 0.731, "name": "__call__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:686)"}, {"pid": 106699, "tid": 106699, "ts": 58221760774.504, "ph": "X", "cat": "fee", "dur": 1.923, "name": "__and__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:1515)"}, {"pid": 106699, "tid": 106699, "ts": 58221760776.598, "ph": "X", "cat": "fee", "dur": 0.06, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760676.519, "ph": "X", "cat": "fee", "dur": 100.59, "name": "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:272)"}, {"pid": 106699, "tid": 106699, "ts": 58221760777.499, "ph": "X", "cat": "fee", "dur": 7.905, "name": "re.Pattern.findall"}, {"pid": 106699, "tid": 106699, "ts": 58221760676.189, "ph": "X", "cat": "fee", "dur": 109.285, "name": "findall (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:208)"}, {"pid": 106699, "tid": 106699, "ts": 58221760833.284, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760834.527, "ph": "X", "cat": "fee", "dur": 0.49, "name": "_struct.pack"}, {"pid": 106699, "tid": 106699, "ts": 58221760835.278, "ph": "X", "cat": "fee", "dur": 0.04, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760835.769, "ph": "X", "cat": "fee", "dur": 0.03, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760838.414, "ph": "X", "cat": "fee", "dur": 0.411, "name": "_struct.unpack"}, {"pid": 106699, "tid": 106699, "ts": 58221760839.316, "ph": "X", "cat": "fee", "dur": 0.15, "name": "_struct.unpack"}, {"pid": 106699, "tid": 106699, "ts": 58221760839.736, "ph": "X", "cat": "fee", "dur": 0.08, "name": "_struct.unpack"}, {"pid": 106699, "tid": 106699, "ts": 58221760839.997, "ph": "X", "cat": "fee", "dur": 0.08, "name": "_struct.unpack"}, {"pid": 106699, "tid": 106699, "ts": 58221760840.267, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_struct.unpack"}, {"pid": 106699, "tid": 106699, "ts": 58221760840.588, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_struct.unpack"}, {"pid": 106699, "tid": 106699, "ts": 58221760840.858, "ph": "X", "cat": "fee", "dur": 0.081, "name": "_struct.unpack"}, {"pid": 106699, "tid": 106699, "ts": 58221760841.5, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_struct.unpack"}, {"pid": 106699, "tid": 106699, "ts": 58221760841.79, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_struct.unpack"}, {"pid": 106699, "tid": 106699, "ts": 58221760842.101, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_struct.unpack"}, {"pid": 106699, "tid": 106699, "ts": 58221760842.341, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_struct.unpack"}, {"pid": 106699, "tid": 106699, "ts": 58221760842.582, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_struct.unpack"}, {"pid": 106699, "tid": 106699, "ts": 58221760842.832, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_struct.unpack"}, {"pid": 106699, "tid": 106699, "ts": 58221760843.093, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_struct.unpack"}, {"pid": 106699, "tid": 106699, "ts": 58221760843.333, "ph": "X", "cat": "fee", "dur": 0.07, "name": "_struct.unpack"}, {"pid": 106699, "tid": 106699, "ts": 58221760849.114, "ph": "X", "cat": "fee", "dur": 0.21, "name": "_struct.unpack"}, {"pid": 106699, "tid": 106699, "ts": 58221760838.013, "ph": "X", "cat": "fee", "dur": 11.502, "name": "<listcomp> (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:72)"}, {"pid": 106699, "tid": 106699, "ts": 58221760836.931, "ph": "X", "cat": "fee", "dur": 12.904, "name": "<listcomp> (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:71)"}, {"pid": 106699, "tid": 106699, "ts": 58221760833.094, "ph": "X", "cat": "fee", "dur": 16.932, "name": "padandsplit (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:55)"}, {"pid": 106699, "tid": 106699, "ts": 58221760850.346, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58221760852.721, "ph": "X", "cat": "fee", "dur": 0.591, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760854.163, "ph": "X", "cat": "fee", "dur": 0.181, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760854.875, "ph": "X", "cat": "fee", "dur": 0.491, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760854.725, "ph": "X", "cat": "fee", "dur": 0.771, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760856.007, "ph": "X", "cat": "fee", "dur": 1.142, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760857.76, "ph": "X", "cat": "fee", "dur": 0.722, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760859.383, "ph": "X", "cat": "fee", "dur": 0.171, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760859.804, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760859.694, "ph": "X", "cat": "fee", "dur": 0.451, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760860.285, "ph": "X", "cat": "fee", "dur": 0.441, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760861.247, "ph": "X", "cat": "fee", "dur": 0.28, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760861.738, "ph": "X", "cat": "fee", "dur": 0.13, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760862.008, "ph": "X", "cat": "fee", "dur": 0.181, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760861.948, "ph": "X", "cat": "fee", "dur": 0.311, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760862.369, "ph": "X", "cat": "fee", "dur": 0.27, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760862.94, "ph": "X", "cat": "fee", "dur": 0.441, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760863.531, "ph": "X", "cat": "fee", "dur": 0.1, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760863.762, "ph": "X", "cat": "fee", "dur": 0.11, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760863.711, "ph": "X", "cat": "fee", "dur": 0.241, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760864.072, "ph": "X", "cat": "fee", "dur": 0.17, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760864.523, "ph": "X", "cat": "fee", "dur": 0.2, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760864.864, "ph": "X", "cat": "fee", "dur": 0.08, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760865.074, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760865.024, "ph": "X", "cat": "fee", "dur": 0.21, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760865.314, "ph": "X", "cat": "fee", "dur": 0.171, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760865.755, "ph": "X", "cat": "fee", "dur": 0.341, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760866.226, "ph": "X", "cat": "fee", "dur": 0.09, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760866.467, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760866.396, "ph": "X", "cat": "fee", "dur": 0.221, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760866.707, "ph": "X", "cat": "fee", "dur": 0.22, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760867.208, "ph": "X", "cat": "fee", "dur": 0.18, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760867.549, "ph": "X", "cat": "fee", "dur": 0.09, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760867.769, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760867.719, "ph": "X", "cat": "fee", "dur": 0.21, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760868.01, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760868.43, "ph": "X", "cat": "fee", "dur": 0.742, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760869.322, "ph": "X", "cat": "fee", "dur": 0.1, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760869.653, "ph": "X", "cat": "fee", "dur": 0.12, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760869.522, "ph": "X", "cat": "fee", "dur": 0.321, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760869.953, "ph": "X", "cat": "fee", "dur": 0.311, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760870.524, "ph": "X", "cat": "fee", "dur": 0.221, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760870.885, "ph": "X", "cat": "fee", "dur": 0.09, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760871.135, "ph": "X", "cat": "fee", "dur": 0.101, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760871.055, "ph": "X", "cat": "fee", "dur": 0.281, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760871.426, "ph": "X", "cat": "fee", "dur": 0.421, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760872.117, "ph": "X", "cat": "fee", "dur": 0.341, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760872.598, "ph": "X", "cat": "fee", "dur": 0.08, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760872.839, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760872.758, "ph": "X", "cat": "fee", "dur": 0.241, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760873.099, "ph": "X", "cat": "fee", "dur": 0.231, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760873.6, "ph": "X", "cat": "fee", "dur": 0.19, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760873.941, "ph": "X", "cat": "fee", "dur": 0.11, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760874.191, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760874.131, "ph": "X", "cat": "fee", "dur": 0.22, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760874.442, "ph": "X", "cat": "fee", "dur": 0.17, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760874.882, "ph": "X", "cat": "fee", "dur": 0.331, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760875.363, "ph": "X", "cat": "fee", "dur": 0.111, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760875.614, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760875.564, "ph": "X", "cat": "fee", "dur": 0.21, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760875.864, "ph": "X", "cat": "fee", "dur": 0.171, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760876.295, "ph": "X", "cat": "fee", "dur": 0.15, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760876.576, "ph": "X", "cat": "fee", "dur": 0.09, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760876.816, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760876.746, "ph": "X", "cat": "fee", "dur": 0.2, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760877.037, "ph": "X", "cat": "fee", "dur": 0.31, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760877.608, "ph": "X", "cat": "fee", "dur": 0.36, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760878.109, "ph": "X", "cat": "fee", "dur": 0.09, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760878.349, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760878.289, "ph": "X", "cat": "fee", "dur": 0.22, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760878.589, "ph": "X", "cat": "fee", "dur": 0.181, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760880.102, "ph": "X", "cat": "fee", "dur": 0.151, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760880.383, "ph": "X", "cat": "fee", "dur": 0.24, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760880.753, "ph": "X", "cat": "fee", "dur": 0.091, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760880.703, "ph": "X", "cat": "fee", "dur": 0.191, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760880.994, "ph": "X", "cat": "fee", "dur": 0.321, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760881.575, "ph": "X", "cat": "fee", "dur": 0.261, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760881.956, "ph": "X", "cat": "fee", "dur": 0.18, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760882.266, "ph": "X", "cat": "fee", "dur": 0.091, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760882.216, "ph": "X", "cat": "fee", "dur": 0.181, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760882.497, "ph": "X", "cat": "fee", "dur": 0.18, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760882.958, "ph": "X", "cat": "fee", "dur": 0.17, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760883.268, "ph": "X", "cat": "fee", "dur": 0.11, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760883.519, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760883.469, "ph": "X", "cat": "fee", "dur": 0.22, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760883.789, "ph": "X", "cat": "fee", "dur": 0.15, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760884.21, "ph": "X", "cat": "fee", "dur": 0.301, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760884.651, "ph": "X", "cat": "fee", "dur": 0.1, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760884.901, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760884.851, "ph": "X", "cat": "fee", "dur": 0.191, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760885.132, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760885.573, "ph": "X", "cat": "fee", "dur": 0.14, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760885.843, "ph": "X", "cat": "fee", "dur": 0.1, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760886.094, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760886.023, "ph": "X", "cat": "fee", "dur": 0.221, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760886.334, "ph": "X", "cat": "fee", "dur": 0.18, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760886.765, "ph": "X", "cat": "fee", "dur": 0.26, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760887.156, "ph": "X", "cat": "fee", "dur": 0.1, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760887.406, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760887.336, "ph": "X", "cat": "fee", "dur": 0.23, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760887.646, "ph": "X", "cat": "fee", "dur": 0.161, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760888.077, "ph": "X", "cat": "fee", "dur": 0.141, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760888.358, "ph": "X", "cat": "fee", "dur": 0.09, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760888.578, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760888.528, "ph": "X", "cat": "fee", "dur": 0.18, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760888.789, "ph": "X", "cat": "fee", "dur": 0.17, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760889.219, "ph": "X", "cat": "fee", "dur": 0.241, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760889.59, "ph": "X", "cat": "fee", "dur": 0.08, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760889.801, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760889.75, "ph": "X", "cat": "fee", "dur": 0.181, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760890.021, "ph": "X", "cat": "fee", "dur": 0.411, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760890.682, "ph": "X", "cat": "fee", "dur": 0.14, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760890.953, "ph": "X", "cat": "fee", "dur": 0.13, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760891.203, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760891.153, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760891.434, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760891.864, "ph": "X", "cat": "fee", "dur": 0.261, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760892.245, "ph": "X", "cat": "fee", "dur": 0.08, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760892.456, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760892.405, "ph": "X", "cat": "fee", "dur": 0.201, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760892.696, "ph": "X", "cat": "fee", "dur": 0.19, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760893.157, "ph": "X", "cat": "fee", "dur": 0.18, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760893.477, "ph": "X", "cat": "fee", "dur": 0.101, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760893.708, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760893.658, "ph": "X", "cat": "fee", "dur": 0.18, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760893.918, "ph": "X", "cat": "fee", "dur": 0.171, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760894.339, "ph": "X", "cat": "fee", "dur": 0.261, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760894.73, "ph": "X", "cat": "fee", "dur": 0.09, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760894.95, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760894.9, "ph": "X", "cat": "fee", "dur": 0.211, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760895.211, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760895.642, "ph": "X", "cat": "fee", "dur": 0.16, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760895.932, "ph": "X", "cat": "fee", "dur": 0.09, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760896.152, "ph": "X", "cat": "fee", "dur": 0.081, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760896.102, "ph": "X", "cat": "fee", "dur": 0.191, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760896.383, "ph": "X", "cat": "fee", "dur": 0.15, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760896.794, "ph": "X", "cat": "fee", "dur": 0.26, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760897.174, "ph": "X", "cat": "fee", "dur": 0.091, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760897.395, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760897.335, "ph": "X", "cat": "fee", "dur": 0.2, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760897.615, "ph": "X", "cat": "fee", "dur": 0.171, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760898.056, "ph": "X", "cat": "fee", "dur": 0.18, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760898.387, "ph": "X", "cat": "fee", "dur": 0.09, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760898.607, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760898.557, "ph": "X", "cat": "fee", "dur": 0.2, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760898.858, "ph": "X", "cat": "fee", "dur": 0.18, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760899.288, "ph": "X", "cat": "fee", "dur": 0.271, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760899.709, "ph": "X", "cat": "fee", "dur": 0.08, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760899.92, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760899.869, "ph": "X", "cat": "fee", "dur": 0.181, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760900.14, "ph": "X", "cat": "fee", "dur": 0.18, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760900.571, "ph": "X", "cat": "fee", "dur": 0.16, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760900.881, "ph": "X", "cat": "fee", "dur": 0.091, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760901.102, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760901.052, "ph": "X", "cat": "fee", "dur": 0.23, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760901.382, "ph": "X", "cat": "fee", "dur": 0.161, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760901.823, "ph": "X", "cat": "fee", "dur": 0.241, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760902.204, "ph": "X", "cat": "fee", "dur": 0.08, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760902.414, "ph": "X", "cat": "fee", "dur": 0.11, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760902.364, "ph": "X", "cat": "fee", "dur": 0.211, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760902.665, "ph": "X", "cat": "fee", "dur": 0.17, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760903.116, "ph": "X", "cat": "fee", "dur": 0.27, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760903.516, "ph": "X", "cat": "fee", "dur": 0.121, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760903.767, "ph": "X", "cat": "fee", "dur": 0.11, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760903.717, "ph": "X", "cat": "fee", "dur": 0.22, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760904.027, "ph": "X", "cat": "fee", "dur": 0.161, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760904.458, "ph": "X", "cat": "fee", "dur": 0.311, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760904.919, "ph": "X", "cat": "fee", "dur": 0.12, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760905.169, "ph": "X", "cat": "fee", "dur": 0.091, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760905.119, "ph": "X", "cat": "fee", "dur": 0.191, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760905.39, "ph": "X", "cat": "fee", "dur": 0.18, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760905.841, "ph": "X", "cat": "fee", "dur": 0.25, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760906.221, "ph": "X", "cat": "fee", "dur": 0.121, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760906.472, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760906.422, "ph": "X", "cat": "fee", "dur": 0.2, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760906.712, "ph": "X", "cat": "fee", "dur": 0.141, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760907.133, "ph": "X", "cat": "fee", "dur": 0.301, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760907.564, "ph": "X", "cat": "fee", "dur": 0.11, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760907.804, "ph": "X", "cat": "fee", "dur": 0.081, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760907.754, "ph": "X", "cat": "fee", "dur": 0.201, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760908.055, "ph": "X", "cat": "fee", "dur": 0.18, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760908.486, "ph": "X", "cat": "fee", "dur": 0.26, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760908.876, "ph": "X", "cat": "fee", "dur": 0.111, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760909.117, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760909.067, "ph": "X", "cat": "fee", "dur": 0.18, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760909.327, "ph": "X", "cat": "fee", "dur": 0.171, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760909.768, "ph": "X", "cat": "fee", "dur": 0.271, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760910.179, "ph": "X", "cat": "fee", "dur": 0.1, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760910.409, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760910.359, "ph": "X", "cat": "fee", "dur": 0.211, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760910.65, "ph": "X", "cat": "fee", "dur": 0.19, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760911.091, "ph": "X", "cat": "fee", "dur": 0.26, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760911.491, "ph": "X", "cat": "fee", "dur": 0.121, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760911.742, "ph": "X", "cat": "fee", "dur": 0.11, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760911.692, "ph": "X", "cat": "fee", "dur": 0.2, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760911.982, "ph": "X", "cat": "fee", "dur": 0.161, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760912.393, "ph": "X", "cat": "fee", "dur": 0.261, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760912.794, "ph": "X", "cat": "fee", "dur": 0.1, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760913.024, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760912.974, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760913.245, "ph": "X", "cat": "fee", "dur": 0.18, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760913.675, "ph": "X", "cat": "fee", "dur": 0.251, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760914.056, "ph": "X", "cat": "fee", "dur": 0.1, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760914.287, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760914.236, "ph": "X", "cat": "fee", "dur": 0.201, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760914.517, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760914.928, "ph": "X", "cat": "fee", "dur": 0.24, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760915.329, "ph": "X", "cat": "fee", "dur": 0.1, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760915.559, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760915.509, "ph": "X", "cat": "fee", "dur": 0.2, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760915.799, "ph": "X", "cat": "fee", "dur": 0.171, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760916.23, "ph": "X", "cat": "fee", "dur": 0.221, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760916.591, "ph": "X", "cat": "fee", "dur": 0.11, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760916.831, "ph": "X", "cat": "fee", "dur": 0.081, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760916.771, "ph": "X", "cat": "fee", "dur": 0.191, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760917.042, "ph": "X", "cat": "fee", "dur": 0.17, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760917.453, "ph": "X", "cat": "fee", "dur": 0.29, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760917.883, "ph": "X", "cat": "fee", "dur": 0.101, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760918.114, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760918.064, "ph": "X", "cat": "fee", "dur": 0.2, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760918.344, "ph": "X", "cat": "fee", "dur": 0.171, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760918.765, "ph": "X", "cat": "fee", "dur": 0.24, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760919.136, "ph": "X", "cat": "fee", "dur": 0.11, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760919.366, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760919.316, "ph": "X", "cat": "fee", "dur": 0.18, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760919.587, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760919.997, "ph": "X", "cat": "fee", "dur": 0.261, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760920.398, "ph": "X", "cat": "fee", "dur": 0.12, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760920.649, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760920.598, "ph": "X", "cat": "fee", "dur": 0.221, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760920.899, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760921.31, "ph": "X", "cat": "fee", "dur": 0.24, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760921.68, "ph": "X", "cat": "fee", "dur": 0.131, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760921.931, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760921.881, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760922.161, "ph": "X", "cat": "fee", "dur": 0.161, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760922.582, "ph": "X", "cat": "fee", "dur": 0.251, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760922.963, "ph": "X", "cat": "fee", "dur": 0.1, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760923.193, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760923.143, "ph": "X", "cat": "fee", "dur": 0.191, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760923.424, "ph": "X", "cat": "fee", "dur": 0.15, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760923.825, "ph": "X", "cat": "fee", "dur": 0.23, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760924.205, "ph": "X", "cat": "fee", "dur": 0.1, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760924.446, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760924.396, "ph": "X", "cat": "fee", "dur": 0.18, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760924.656, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760925.077, "ph": "X", "cat": "fee", "dur": 0.24, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760925.458, "ph": "X", "cat": "fee", "dur": 0.11, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760925.698, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760925.648, "ph": "X", "cat": "fee", "dur": 0.2, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760925.928, "ph": "X", "cat": "fee", "dur": 0.151, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760926.329, "ph": "X", "cat": "fee", "dur": 0.211, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760926.69, "ph": "X", "cat": "fee", "dur": 0.13, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760926.95, "ph": "X", "cat": "fee", "dur": 0.091, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760926.89, "ph": "X", "cat": "fee", "dur": 0.231, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760927.201, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760927.602, "ph": "X", "cat": "fee", "dur": 0.24, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760927.982, "ph": "X", "cat": "fee", "dur": 0.101, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760928.213, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760928.153, "ph": "X", "cat": "fee", "dur": 0.21, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760928.453, "ph": "X", "cat": "fee", "dur": 0.151, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760928.864, "ph": "X", "cat": "fee", "dur": 0.22, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760929.235, "ph": "X", "cat": "fee", "dur": 0.11, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760929.475, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760929.415, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760929.686, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760930.096, "ph": "X", "cat": "fee", "dur": 0.261, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760930.497, "ph": "X", "cat": "fee", "dur": 0.1, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760930.728, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760930.677, "ph": "X", "cat": "fee", "dur": 0.191, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760930.948, "ph": "X", "cat": "fee", "dur": 0.17, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760931.359, "ph": "X", "cat": "fee", "dur": 0.24, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760931.729, "ph": "X", "cat": "fee", "dur": 0.101, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760931.98, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760931.91, "ph": "X", "cat": "fee", "dur": 0.2, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760932.2, "ph": "X", "cat": "fee", "dur": 0.141, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760932.591, "ph": "X", "cat": "fee", "dur": 0.26, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760932.982, "ph": "X", "cat": "fee", "dur": 0.1, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760933.212, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760933.162, "ph": "X", "cat": "fee", "dur": 0.18, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760933.423, "ph": "X", "cat": "fee", "dur": 0.18, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760933.853, "ph": "X", "cat": "fee", "dur": 0.221, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760934.204, "ph": "X", "cat": "fee", "dur": 0.11, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760934.444, "ph": "X", "cat": "fee", "dur": 0.101, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760934.394, "ph": "X", "cat": "fee", "dur": 0.211, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760934.695, "ph": "X", "cat": "fee", "dur": 0.15, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760935.096, "ph": "X", "cat": "fee", "dur": 0.24, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760935.476, "ph": "X", "cat": "fee", "dur": 0.101, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760935.707, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760935.657, "ph": "X", "cat": "fee", "dur": 0.18, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760935.927, "ph": "X", "cat": "fee", "dur": 0.151, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760936.338, "ph": "X", "cat": "fee", "dur": 0.22, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760936.699, "ph": "X", "cat": "fee", "dur": 0.11, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760936.939, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760936.889, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760937.17, "ph": "X", "cat": "fee", "dur": 0.15, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760937.57, "ph": "X", "cat": "fee", "dur": 0.231, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760937.931, "ph": "X", "cat": "fee", "dur": 0.1, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760938.172, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760938.101, "ph": "X", "cat": "fee", "dur": 0.231, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760938.422, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760938.833, "ph": "X", "cat": "fee", "dur": 0.28, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760939.264, "ph": "X", "cat": "fee", "dur": 0.11, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760939.504, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760939.444, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760939.724, "ph": "X", "cat": "fee", "dur": 0.161, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760940.145, "ph": "X", "cat": "fee", "dur": 0.241, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760940.506, "ph": "X", "cat": "fee", "dur": 0.1, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760940.736, "ph": "X", "cat": "fee", "dur": 0.091, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760940.686, "ph": "X", "cat": "fee", "dur": 0.201, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760940.967, "ph": "X", "cat": "fee", "dur": 0.15, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760941.368, "ph": "X", "cat": "fee", "dur": 0.22, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760941.728, "ph": "X", "cat": "fee", "dur": 0.11, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760941.969, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760941.919, "ph": "X", "cat": "fee", "dur": 0.18, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760942.189, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760942.6, "ph": "X", "cat": "fee", "dur": 0.27, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760943.011, "ph": "X", "cat": "fee", "dur": 0.1, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760943.251, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760943.191, "ph": "X", "cat": "fee", "dur": 0.22, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760943.492, "ph": "X", "cat": "fee", "dur": 0.15, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760943.902, "ph": "X", "cat": "fee", "dur": 0.221, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760944.243, "ph": "X", "cat": "fee", "dur": 0.13, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760944.513, "ph": "X", "cat": "fee", "dur": 0.081, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760944.453, "ph": "X", "cat": "fee", "dur": 0.201, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760944.734, "ph": "X", "cat": "fee", "dur": 0.18, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760945.165, "ph": "X", "cat": "fee", "dur": 0.23, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760945.525, "ph": "X", "cat": "fee", "dur": 0.111, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760945.766, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760945.716, "ph": "X", "cat": "fee", "dur": 0.18, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760945.976, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760946.387, "ph": "X", "cat": "fee", "dur": 0.25, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760946.758, "ph": "X", "cat": "fee", "dur": 0.14, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760947.028, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760946.968, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760947.239, "ph": "X", "cat": "fee", "dur": 0.15, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760947.639, "ph": "X", "cat": "fee", "dur": 0.211, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760947.98, "ph": "X", "cat": "fee", "dur": 0.13, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760948.24, "ph": "X", "cat": "fee", "dur": 0.081, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760948.19, "ph": "X", "cat": "fee", "dur": 0.181, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760948.461, "ph": "X", "cat": "fee", "dur": 0.17, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760948.892, "ph": "X", "cat": "fee", "dur": 0.24, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760949.272, "ph": "X", "cat": "fee", "dur": 0.141, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760949.543, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760949.493, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760949.773, "ph": "X", "cat": "fee", "dur": 0.151, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760950.184, "ph": "X", "cat": "fee", "dur": 0.241, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760950.565, "ph": "X", "cat": "fee", "dur": 0.14, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760950.835, "ph": "X", "cat": "fee", "dur": 0.101, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760950.785, "ph": "X", "cat": "fee", "dur": 0.201, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760951.076, "ph": "X", "cat": "fee", "dur": 0.15, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760951.477, "ph": "X", "cat": "fee", "dur": 0.24, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760951.837, "ph": "X", "cat": "fee", "dur": 0.13, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760952.098, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760952.048, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760952.318, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760952.729, "ph": "X", "cat": "fee", "dur": 0.24, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760953.1, "ph": "X", "cat": "fee", "dur": 0.12, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760953.35, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760953.3, "ph": "X", "cat": "fee", "dur": 0.18, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760953.56, "ph": "X", "cat": "fee", "dur": 0.161, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760953.971, "ph": "X", "cat": "fee", "dur": 0.241, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760954.342, "ph": "X", "cat": "fee", "dur": 0.13, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760954.602, "ph": "X", "cat": "fee", "dur": 0.081, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760954.552, "ph": "X", "cat": "fee", "dur": 0.171, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760954.813, "ph": "X", "cat": "fee", "dur": 0.14, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760955.214, "ph": "X", "cat": "fee", "dur": 0.22, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760955.564, "ph": "X", "cat": "fee", "dur": 0.12, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760955.825, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760955.765, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760956.035, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760956.446, "ph": "X", "cat": "fee", "dur": 0.23, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760956.807, "ph": "X", "cat": "fee", "dur": 0.13, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760957.067, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760957.007, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760957.277, "ph": "X", "cat": "fee", "dur": 0.181, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760957.708, "ph": "X", "cat": "fee", "dur": 0.211, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760958.049, "ph": "X", "cat": "fee", "dur": 0.12, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760958.299, "ph": "X", "cat": "fee", "dur": 0.091, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760958.249, "ph": "X", "cat": "fee", "dur": 0.191, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760958.52, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760958.941, "ph": "X", "cat": "fee", "dur": 0.25, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760959.321, "ph": "X", "cat": "fee", "dur": 0.131, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760959.592, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760959.522, "ph": "X", "cat": "fee", "dur": 0.21, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760959.822, "ph": "X", "cat": "fee", "dur": 0.161, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760960.223, "ph": "X", "cat": "fee", "dur": 0.21, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760960.564, "ph": "X", "cat": "fee", "dur": 0.12, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760960.814, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760960.754, "ph": "X", "cat": "fee", "dur": 0.18, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760961.024, "ph": "X", "cat": "fee", "dur": 0.161, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760961.445, "ph": "X", "cat": "fee", "dur": 0.231, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760961.826, "ph": "X", "cat": "fee", "dur": 0.13, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760962.086, "ph": "X", "cat": "fee", "dur": 0.091, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760962.036, "ph": "X", "cat": "fee", "dur": 0.191, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760962.307, "ph": "X", "cat": "fee", "dur": 0.15, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760962.718, "ph": "X", "cat": "fee", "dur": 0.2, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760963.048, "ph": "X", "cat": "fee", "dur": 0.141, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760963.319, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760963.269, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760963.539, "ph": "X", "cat": "fee", "dur": 0.181, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760963.97, "ph": "X", "cat": "fee", "dur": 0.23, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760964.331, "ph": "X", "cat": "fee", "dur": 0.15, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760964.601, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760964.561, "ph": "X", "cat": "fee", "dur": 0.191, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760964.842, "ph": "X", "cat": "fee", "dur": 0.15, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760965.242, "ph": "X", "cat": "fee", "dur": 0.211, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760965.583, "ph": "X", "cat": "fee", "dur": 0.13, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760965.834, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760965.783, "ph": "X", "cat": "fee", "dur": 0.181, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760966.054, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760966.475, "ph": "X", "cat": "fee", "dur": 0.23, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760966.835, "ph": "X", "cat": "fee", "dur": 0.131, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760967.096, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760967.036, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760967.316, "ph": "X", "cat": "fee", "dur": 0.161, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760967.727, "ph": "X", "cat": "fee", "dur": 0.241, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760968.098, "ph": "X", "cat": "fee", "dur": 0.12, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760968.348, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760968.298, "ph": "X", "cat": "fee", "dur": 0.181, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760968.559, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760968.979, "ph": "X", "cat": "fee", "dur": 0.221, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760969.34, "ph": "X", "cat": "fee", "dur": 0.13, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760969.601, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760969.551, "ph": "X", "cat": "fee", "dur": 0.18, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760969.821, "ph": "X", "cat": "fee", "dur": 0.15, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760970.232, "ph": "X", "cat": "fee", "dur": 0.21, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760970.572, "ph": "X", "cat": "fee", "dur": 0.121, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760970.843, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760970.773, "ph": "X", "cat": "fee", "dur": 0.2, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760971.053, "ph": "X", "cat": "fee", "dur": 0.171, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760971.484, "ph": "X", "cat": "fee", "dur": 0.231, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760971.865, "ph": "X", "cat": "fee", "dur": 0.12, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760972.115, "ph": "X", "cat": "fee", "dur": 0.091, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760972.065, "ph": "X", "cat": "fee", "dur": 0.181, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760972.336, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760972.747, "ph": "X", "cat": "fee", "dur": 0.21, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760973.087, "ph": "X", "cat": "fee", "dur": 0.12, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760973.338, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760973.288, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760973.568, "ph": "X", "cat": "fee", "dur": 0.15, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760973.969, "ph": "X", "cat": "fee", "dur": 0.24, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760974.34, "ph": "X", "cat": "fee", "dur": 0.13, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760974.59, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760974.54, "ph": "X", "cat": "fee", "dur": 0.18, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760974.81, "ph": "X", "cat": "fee", "dur": 0.171, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760975.231, "ph": "X", "cat": "fee", "dur": 0.221, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760975.582, "ph": "X", "cat": "fee", "dur": 0.12, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760975.842, "ph": "X", "cat": "fee", "dur": 0.091, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760975.782, "ph": "X", "cat": "fee", "dur": 0.201, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760976.063, "ph": "X", "cat": "fee", "dur": 0.15, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760976.474, "ph": "X", "cat": "fee", "dur": 0.24, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760976.854, "ph": "X", "cat": "fee", "dur": 0.12, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760977.125, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760977.055, "ph": "X", "cat": "fee", "dur": 0.23, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760977.365, "ph": "X", "cat": "fee", "dur": 0.161, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760977.766, "ph": "X", "cat": "fee", "dur": 0.23, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760978.127, "ph": "X", "cat": "fee", "dur": 0.14, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760978.387, "ph": "X", "cat": "fee", "dur": 0.11, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760978.337, "ph": "X", "cat": "fee", "dur": 0.21, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760978.638, "ph": "X", "cat": "fee", "dur": 0.15, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760979.038, "ph": "X", "cat": "fee", "dur": 0.251, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760979.429, "ph": "X", "cat": "fee", "dur": 0.13, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760979.69, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760979.629, "ph": "X", "cat": "fee", "dur": 0.201, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760979.91, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760980.321, "ph": "X", "cat": "fee", "dur": 0.21, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760980.661, "ph": "X", "cat": "fee", "dur": 0.141, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760980.922, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760980.872, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760981.142, "ph": "X", "cat": "fee", "dur": 0.161, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760981.543, "ph": "X", "cat": "fee", "dur": 0.231, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760981.904, "ph": "X", "cat": "fee", "dur": 0.13, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760982.164, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760982.114, "ph": "X", "cat": "fee", "dur": 0.17, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760982.375, "ph": "X", "cat": "fee", "dur": 0.15, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760982.785, "ph": "X", "cat": "fee", "dur": 0.231, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760983.146, "ph": "X", "cat": "fee", "dur": 0.12, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760983.397, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760983.336, "ph": "X", "cat": "fee", "dur": 0.191, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760983.607, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760984.018, "ph": "X", "cat": "fee", "dur": 0.24, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760984.388, "ph": "X", "cat": "fee", "dur": 0.141, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760984.659, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760984.599, "ph": "X", "cat": "fee", "dur": 0.21, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760984.899, "ph": "X", "cat": "fee", "dur": 0.151, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760985.3, "ph": "X", "cat": "fee", "dur": 0.13, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760985.571, "ph": "X", "cat": "fee", "dur": 0.13, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760985.831, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760985.771, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760986.052, "ph": "X", "cat": "fee", "dur": 0.18, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760986.482, "ph": "X", "cat": "fee", "dur": 0.251, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760986.873, "ph": "X", "cat": "fee", "dur": 0.15, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760987.154, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760987.094, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760987.374, "ph": "X", "cat": "fee", "dur": 0.17, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760987.785, "ph": "X", "cat": "fee", "dur": 0.15, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760988.065, "ph": "X", "cat": "fee", "dur": 0.131, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760988.326, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760988.276, "ph": "X", "cat": "fee", "dur": 0.18, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760988.546, "ph": "X", "cat": "fee", "dur": 0.161, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760988.957, "ph": "X", "cat": "fee", "dur": 0.24, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760989.348, "ph": "X", "cat": "fee", "dur": 0.13, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760989.608, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760989.558, "ph": "X", "cat": "fee", "dur": 0.181, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760989.829, "ph": "X", "cat": "fee", "dur": 0.17, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760990.249, "ph": "X", "cat": "fee", "dur": 0.131, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760990.51, "ph": "X", "cat": "fee", "dur": 0.12, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760990.76, "ph": "X", "cat": "fee", "dur": 0.071, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760990.71, "ph": "X", "cat": "fee", "dur": 0.171, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760990.971, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760991.382, "ph": "X", "cat": "fee", "dur": 0.24, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760991.752, "ph": "X", "cat": "fee", "dur": 0.131, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760992.013, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760991.963, "ph": "X", "cat": "fee", "dur": 0.18, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760992.233, "ph": "X", "cat": "fee", "dur": 0.14, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760992.624, "ph": "X", "cat": "fee", "dur": 0.14, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760992.914, "ph": "X", "cat": "fee", "dur": 0.121, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760993.175, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760993.105, "ph": "X", "cat": "fee", "dur": 0.23, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760993.425, "ph": "X", "cat": "fee", "dur": 0.161, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760993.836, "ph": "X", "cat": "fee", "dur": 0.231, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760994.207, "ph": "X", "cat": "fee", "dur": 0.13, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760994.467, "ph": "X", "cat": "fee", "dur": 0.091, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760994.417, "ph": "X", "cat": "fee", "dur": 0.191, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760994.698, "ph": "X", "cat": "fee", "dur": 0.15, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760995.099, "ph": "X", "cat": "fee", "dur": 0.14, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760995.369, "ph": "X", "cat": "fee", "dur": 0.12, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760995.62, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760995.569, "ph": "X", "cat": "fee", "dur": 0.191, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760995.85, "ph": "X", "cat": "fee", "dur": 0.15, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760996.251, "ph": "X", "cat": "fee", "dur": 0.23, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760996.611, "ph": "X", "cat": "fee", "dur": 0.141, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760996.872, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760996.822, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760997.092, "ph": "X", "cat": "fee", "dur": 0.171, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760997.513, "ph": "X", "cat": "fee", "dur": 0.14, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760997.784, "ph": "X", "cat": "fee", "dur": 0.12, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221760998.034, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760997.974, "ph": "X", "cat": "fee", "dur": 0.22, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760998.285, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760998.695, "ph": "X", "cat": "fee", "dur": 0.271, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221760999.096, "ph": "X", "cat": "fee", "dur": 0.13, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221760999.357, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221760999.307, "ph": "X", "cat": "fee", "dur": 0.2, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221760999.587, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221760999.998, "ph": "X", "cat": "fee", "dur": 0.14, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221761000.268, "ph": "X", "cat": "fee", "dur": 0.121, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221761000.519, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761000.469, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761000.739, "ph": "X", "cat": "fee", "dur": 0.191, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221761001.18, "ph": "X", "cat": "fee", "dur": 0.23, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221761001.541, "ph": "X", "cat": "fee", "dur": 0.16, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221761001.831, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761001.771, "ph": "X", "cat": "fee", "dur": 0.191, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761002.052, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221761002.482, "ph": "X", "cat": "fee", "dur": 0.141, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221761002.753, "ph": "X", "cat": "fee", "dur": 0.12, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221761003.003, "ph": "X", "cat": "fee", "dur": 0.091, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761002.953, "ph": "X", "cat": "fee", "dur": 0.211, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761003.264, "ph": "X", "cat": "fee", "dur": 0.15, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221761003.665, "ph": "X", "cat": "fee", "dur": 0.25, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221761004.055, "ph": "X", "cat": "fee", "dur": 0.131, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221761004.326, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761004.266, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761004.536, "ph": "X", "cat": "fee", "dur": 0.171, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221761004.957, "ph": "X", "cat": "fee", "dur": 0.15, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221761005.228, "ph": "X", "cat": "fee", "dur": 0.15, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221761005.508, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761005.458, "ph": "X", "cat": "fee", "dur": 0.2, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761005.759, "ph": "X", "cat": "fee", "dur": 0.14, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221761006.159, "ph": "X", "cat": "fee", "dur": 0.231, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221761006.52, "ph": "X", "cat": "fee", "dur": 0.13, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221761006.781, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761006.73, "ph": "X", "cat": "fee", "dur": 0.191, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761007.001, "ph": "X", "cat": "fee", "dur": 0.15, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221761007.392, "ph": "X", "cat": "fee", "dur": 0.15, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221761007.672, "ph": "X", "cat": "fee", "dur": 0.12, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221761007.923, "ph": "X", "cat": "fee", "dur": 0.07, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761007.873, "ph": "X", "cat": "fee", "dur": 0.18, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761008.143, "ph": "X", "cat": "fee", "dur": 0.15, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221761008.554, "ph": "X", "cat": "fee", "dur": 0.22, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221761008.905, "ph": "X", "cat": "fee", "dur": 0.13, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221761009.175, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761009.115, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761009.385, "ph": "X", "cat": "fee", "dur": 0.161, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221761009.806, "ph": "X", "cat": "fee", "dur": 0.151, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221761010.087, "ph": "X", "cat": "fee", "dur": 0.14, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221761010.357, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761010.297, "ph": "X", "cat": "fee", "dur": 0.211, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761010.588, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221761010.999, "ph": "X", "cat": "fee", "dur": 0.23, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221761011.369, "ph": "X", "cat": "fee", "dur": 0.14, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221761011.63, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761011.58, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761011.85, "ph": "X", "cat": "fee", "dur": 0.17, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221761012.271, "ph": "X", "cat": "fee", "dur": 0.14, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221761012.541, "ph": "X", "cat": "fee", "dur": 0.111, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221761012.802, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761012.732, "ph": "X", "cat": "fee", "dur": 0.2, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761013.012, "ph": "X", "cat": "fee", "dur": 0.171, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221761013.443, "ph": "X", "cat": "fee", "dur": 0.231, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221761013.794, "ph": "X", "cat": "fee", "dur": 0.13, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221761014.074, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761014.004, "ph": "X", "cat": "fee", "dur": 0.201, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761014.295, "ph": "X", "cat": "fee", "dur": 0.17, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221761014.715, "ph": "X", "cat": "fee", "dur": 0.141, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221761014.986, "ph": "X", "cat": "fee", "dur": 0.12, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221761015.236, "ph": "X", "cat": "fee", "dur": 0.081, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761015.186, "ph": "X", "cat": "fee", "dur": 0.181, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761015.457, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221761015.878, "ph": "X", "cat": "fee", "dur": 0.23, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221761016.248, "ph": "X", "cat": "fee", "dur": 0.131, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221761016.499, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761016.449, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761016.729, "ph": "X", "cat": "fee", "dur": 0.161, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221761017.14, "ph": "X", "cat": "fee", "dur": 0.15, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221761017.421, "ph": "X", "cat": "fee", "dur": 0.12, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221761017.671, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761017.621, "ph": "X", "cat": "fee", "dur": 0.18, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761017.881, "ph": "X", "cat": "fee", "dur": 0.171, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221761018.302, "ph": "X", "cat": "fee", "dur": 0.221, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221761018.653, "ph": "X", "cat": "fee", "dur": 0.13, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221761018.903, "ph": "X", "cat": "fee", "dur": 0.081, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761018.853, "ph": "X", "cat": "fee", "dur": 0.181, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761019.124, "ph": "X", "cat": "fee", "dur": 0.17, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221761019.545, "ph": "X", "cat": "fee", "dur": 0.13, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221761019.835, "ph": "X", "cat": "fee", "dur": 0.11, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221761020.096, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761020.046, "ph": "X", "cat": "fee", "dur": 0.18, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761020.306, "ph": "X", "cat": "fee", "dur": 0.17, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221761020.737, "ph": "X", "cat": "fee", "dur": 0.27, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221761021.138, "ph": "X", "cat": "fee", "dur": 0.13, "name": "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)"}, {"pid": 106699, "tid": 106699, "ts": 58221761021.398, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761021.348, "ph": "X", "cat": "fee", "dur": 0.19, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761021.628, "ph": "X", "cat": "fee", "dur": 0.161, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221761022.039, "ph": "X", "cat": "fee", "dur": 0.231, "name": "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)"}, {"pid": 106699, "tid": 106699, "ts": 58221761022.4, "ph": "X", "cat": "fee", "dur": 0.15, "name": "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58221761022.68, "ph": "X", "cat": "fee", "dur": 0.091, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761022.63, "ph": "X", "cat": "fee", "dur": 0.211, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761022.931, "ph": "X", "cat": "fee", "dur": 0.16, "name": "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)"}, {"pid": 106699, "tid": 106699, "ts": 58221761023.492, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761023.432, "ph": "X", "cat": "fee", "dur": 0.21, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761023.873, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761023.823, "ph": "X", "cat": "fee", "dur": 0.18, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761024.193, "ph": "X", "cat": "fee", "dur": 0.09, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761024.143, "ph": "X", "cat": "fee", "dur": 0.191, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761024.494, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.sum"}, {"pid": 106699, "tid": 106699, "ts": 58221761024.444, "ph": "X", "cat": "fee", "dur": 0.21, "name": "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)"}, {"pid": 106699, "tid": 106699, "ts": 58221761024.935, "ph": "X", "cat": "fee", "dur": 0.561, "name": "_struct.pack"}, {"pid": 106699, "tid": 106699, "ts": 58221760831.661, "ph": "X", "cat": "fee", "dur": 193.905, "name": "ripemd128 (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:105)"}, {"pid": 106699, "tid": 106699, "ts": 58221760639.78, "ph": "X", "cat": "fee", "dur": 5375426.023, "name": "__init__ (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/readmdict.py:142)"}, {"pid": 106699, "tid": 106699, "ts": 58227136071.063, "ph": "X", "cat": "fee", "dur": 0.361, "name": "str.encode"}, {"pid": 106699, "tid": 106699, "ts": 58227136074.62, "ph": "X", "cat": "fee", "dur": 18.585, "name": "builtins.print"}, {"pid": 106699, "tid": 106699, "ts": 58227136094.107, "ph": "X", "cat": "fee", "dur": 0.841, "name": "builtins.len"}, {"pid": 106699, "tid": 106699, "ts": 58227136095.82, "ph": "X", "cat": "fee", "dur": 2.154, "name": "builtins.print"}, {"pid": 106699, "tid": 106699, "ts": 58227136098.866, "ph": "X", "cat": "fee", "dur": 0.22, "name": "dict.items"}, {"pid": 106699, "tid": 106699, "ts": 58227136100.619, "ph": "X", "cat": "fee", "dur": 0.22, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136101.14, "ph": "X", "cat": "fee", "dur": 0.07, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136101.611, "ph": "X", "cat": "fee", "dur": 1.663, "name": "builtins.print"}, {"pid": 106699, "tid": 106699, "ts": 58227136103.695, "ph": "X", "cat": "fee", "dur": 0.08, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136103.945, "ph": "X", "cat": "fee", "dur": 0.05, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136104.146, "ph": "X", "cat": "fee", "dur": 1.572, "name": "builtins.print"}, {"pid": 106699, "tid": 106699, "ts": 58227136106.069, "ph": "X", "cat": "fee", "dur": 0.05, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136106.209, "ph": "X", "cat": "fee", "dur": 0.061, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136106.53, "ph": "X", "cat": "fee", "dur": 1.573, "name": "builtins.print"}, {"pid": 106699, "tid": 106699, "ts": 58227136108.273, "ph": "X", "cat": "fee", "dur": 0.05, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136108.404, "ph": "X", "cat": "fee", "dur": 0.04, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136108.554, "ph": "X", "cat": "fee", "dur": 1.483, "name": "builtins.print"}, {"pid": 106699, "tid": 106699, "ts": 58227136110.317, "ph": "X", "cat": "fee", "dur": 0.06, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136110.447, "ph": "X", "cat": "fee", "dur": 0.05, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136110.618, "ph": "X", "cat": "fee", "dur": 1.412, "name": "builtins.print"}, {"pid": 106699, "tid": 106699, "ts": 58227136112.201, "ph": "X", "cat": "fee", "dur": 0.1, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136112.381, "ph": "X", "cat": "fee", "dur": 0.11, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136112.631, "ph": "X", "cat": "fee", "dur": 2.445, "name": "builtins.print"}, {"pid": 106699, "tid": 106699, "ts": 58227136115.327, "ph": "X", "cat": "fee", "dur": 0.04, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136115.467, "ph": "X", "cat": "fee", "dur": 1.513, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136117.741, "ph": "X", "cat": "fee", "dur": 6.673, "name": "builtins.print"}, {"pid": 106699, "tid": 106699, "ts": 58227136128.742, "ph": "X", "cat": "fee", "dur": 0.06, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136128.882, "ph": "X", "cat": "fee", "dur": 0.451, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136129.573, "ph": "X", "cat": "fee", "dur": 2.385, "name": "builtins.print"}, {"pid": 106699, "tid": 106699, "ts": 58227136132.208, "ph": "X", "cat": "fee", "dur": 0.04, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136132.339, "ph": "X", "cat": "fee", "dur": 0.05, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136132.529, "ph": "X", "cat": "fee", "dur": 1.583, "name": "builtins.print"}, {"pid": 106699, "tid": 106699, "ts": 58227136134.292, "ph": "X", "cat": "fee", "dur": 0.05, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136134.443, "ph": "X", "cat": "fee", "dur": 0.05, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136134.613, "ph": "X", "cat": "fee", "dur": 1.402, "name": "builtins.print"}, {"pid": 106699, "tid": 106699, "ts": 58227136136.196, "ph": "X", "cat": "fee", "dur": 0.05, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136136.316, "ph": "X", "cat": "fee", "dur": 0.04, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136136.496, "ph": "X", "cat": "fee", "dur": 1.483, "name": "builtins.print"}, {"pid": 106699, "tid": 106699, "ts": 58227136138.149, "ph": "X", "cat": "fee", "dur": 0.051, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136138.28, "ph": "X", "cat": "fee", "dur": 0.04, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136138.42, "ph": "X", "cat": "fee", "dur": 1.393, "name": "builtins.print"}, {"pid": 106699, "tid": 106699, "ts": 58227136140.083, "ph": "X", "cat": "fee", "dur": 0.05, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136140.213, "ph": "X", "cat": "fee", "dur": 0.04, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136140.364, "ph": "X", "cat": "fee", "dur": 1.422, "name": "builtins.print"}, {"pid": 106699, "tid": 106699, "ts": 58227136141.967, "ph": "X", "cat": "fee", "dur": 0.07, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136142.137, "ph": "X", "cat": "fee", "dur": 0.04, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136142.297, "ph": "X", "cat": "fee", "dur": 1.423, "name": "builtins.print"}, {"pid": 106699, "tid": 106699, "ts": 58227136143.96, "ph": "X", "cat": "fee", "dur": 0.04, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136144.071, "ph": "X", "cat": "fee", "dur": 0.13, "name": "bytes.decode"}, {"pid": 106699, "tid": 106699, "ts": 58227136144.341, "ph": "X", "cat": "fee", "dur": 1.894, "name": "builtins.print"}, {"pid": 106699, "tid": 106699, "ts": 58227136148.319, "ph": "X", "cat": "fee", "dur": 0.551, "name": "str.join"}, {"pid": 106699, "tid": 106699, "ts": 58227136151.204, "ph": "X", "cat": "fee", "dur": 16.601, "name": "posix.stat"}, {"pid": 106699, "tid": 106699, "ts": 58227136150.382, "ph": "X", "cat": "fee", "dur": 20.058, "name": "exists (<frozen genericpath>:16)"}, {"pid": 106699, "tid": 106699, "ts": 58221760101.658, "ph": "X", "cat": "fee", "dur": 5376069.283, "name": "main (/tmp/\u4e0b\u8f7d/readmdict-master/readmdict/__main__.py:11)"}, {"pid": 106699, "tid": 106699, "ts": 58227228619.341, "ph": "X", "cat": "fee", "dur": 1.072, "name": "sys.exit"}, {"pid": 106699, "tid": 106699, "ts": 58221758708.458, "ph": "X", "cat": "fee", "dur": 5469913.238, "name": "<module> (/tmp/\u4e0b\u8f7d/readmdict-master/readmdict/__main__.py:1)"}, {"pid": 106699, "tid": 106699, "ts": 58221758706.534, "ph": "X", "cat": "fee", "dur": 5469917.015, "name": "builtins.exec"}, {"pid": 106699, "tid": 106699, "ts": 58227228648.236, "ph": "X", "cat": "fee", "dur": 0.691, "name": "info (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py:52)"}, {"pid": 106699, "tid": 106699, "ts": 58227228649.829, "ph": "X", "cat": "fee", "dur": 0.13, "name": "debug (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py:48)"}, {"pid": 106699, "tid": 106699, "ts": 58227228659.667, "ph": "X", "cat": "fee", "dur": 1.283, "name": "<lambda> (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py:284)"}, {"pid": 106699, "tid": 106699, "ts": 58227228658.756, "ph": "X", "cat": "fee", "dur": 2.544, "name": "<listcomp> (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py:291)"}, {"pid": 106699, "tid": 106699, "ts": 58227228662.623, "ph": "X", "cat": "fee", "dur": 1.042, "name": "list.sort"}, {"pid": 106699, "tid": 106699, "ts": 58227228653.265, "ph": "X", "cat": "fee", "dur": 10.62, "name": "_run_finalizers (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py:268)"}, {"pid": 106699, "tid": 106699, "ts": 58227228665.208, "ph": "X", "cat": "fee", "dur": 0.581, "name": "current_process (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/process.py:37)"}, {"pid": 106699, "tid": 106699, "ts": 58227228668.053, "ph": "X", "cat": "fee", "dur": 1.182, "name": "_cleanup (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/process.py:61)"}, {"pid": 106699, "tid": 106699, "ts": 58227228666.54, "ph": "X", "cat": "fee", "dur": 2.936, "name": "active_children (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/process.py:43)"}, {"pid": 106699, "tid": 106699, "ts": 58227228669.866, "ph": "X", "cat": "fee", "dur": 0.131, "name": "_cleanup (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/process.py:61)"}, {"pid": 106699, "tid": 106699, "ts": 58227228669.746, "ph": "X", "cat": "fee", "dur": 0.421, "name": "active_children (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/process.py:43)"}, {"pid": 106699, "tid": 106699, "ts": 58227228670.397, "ph": "X", "cat": "fee", "dur": 0.081, "name": "debug (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py:48)"}, {"pid": 106699, "tid": 106699, "ts": 58227228672.161, "ph": "X", "cat": "fee", "dur": 0.08, "name": "<lambda> (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py:282)"}, {"pid": 106699, "tid": 106699, "ts": 58227228671.64, "ph": "X", "cat": "fee", "dur": 0.962, "name": "<listcomp> (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py:291)"}, {"pid": 106699, "tid": 106699, "ts": 58227228672.822, "ph": "X", "cat": "fee", "dur": 0.07, "name": "list.sort"}, {"pid": 106699, "tid": 106699, "ts": 58227228673.373, "ph": "X", "cat": "fee", "dur": 0.451, "name": "dict.get"}, {"pid": 106699, "tid": 106699, "ts": 58227228674.786, "ph": "X", "cat": "fee", "dur": 0.45, "name": "sub_debug (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py:44)"}, {"pid": 106699, "tid": 106699, "ts": 58227228680.747, "ph": "X", "cat": "fee", "dur": 1.122, "name": "posix.getpid"}, {"pid": 106699, "tid": 106699, "ts": 58227228683.061, "ph": "X", "cat": "fee", "dur": 0.1, "name": "sub_debug (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py:44)"}], "viztracer_metadata": {"overflow": false, "version": "0.16.3"}, "file_info": {"files": {"/home/tim/.local/lib/python3.11/site-packages/_distutils_hack/__init__.py": ["# don't import any costly modules\nimport sys\nimport os\n\n\nis_pypy = '__pypy__' in sys.builtin_module_names\n\n\ndef warn_distutils_present():\n    if 'distutils' not in sys.modules:\n        return\n    if is_pypy and sys.version_info < (3, 7):\n        # PyPy for 3.6 unconditionally imports distutils, so bypass the warning\n        # https://foss.heptapod.net/pypy/pypy/-/blob/be829135bc0d758997b3566062999ee8b23872b4/lib-python/3/site.py#L250\n        return\n    import warnings\n\n    warnings.warn(\n        \"Distutils was imported before Setuptools, but importing Setuptools \"\n        \"also replaces the `distutils` module in `sys.modules`. This may lead \"\n        \"to undesirable behaviors or errors. To avoid these issues, avoid \"\n        \"using distutils directly, ensure that setuptools is installed in the \"\n        \"traditional way (e.g. not an editable install), and/or make sure \"\n        \"that setuptools is always imported before distutils.\"\n    )\n\n\ndef clear_distutils():\n    if 'distutils' not in sys.modules:\n        return\n    import warnings\n\n    warnings.warn(\"Setuptools is replacing distutils.\")\n    mods = [\n        name\n        for name in sys.modules\n        if name == \"distutils\" or name.startswith(\"distutils.\")\n    ]\n    for name in mods:\n        del sys.modules[name]\n\n\ndef enabled():\n    \"\"\"\n    Allow selection of distutils by environment variable.\n    \"\"\"\n    which = os.environ.get('SETUPTOOLS_USE_DISTUTILS', 'local')\n    return which == 'local'\n\n\ndef ensure_local_distutils():\n    import importlib\n\n    clear_distutils()\n\n    # With the DistutilsMetaFinder in place,\n    # perform an import to cause distutils to be\n    # loaded from setuptools._distutils. Ref #2906.\n    with shim():\n        importlib.import_module('distutils')\n\n    # check that submodules load as expected\n    core = importlib.import_module('distutils.core')\n    assert '_distutils' in core.__file__, core.__file__\n    assert 'setuptools._distutils.log' not in sys.modules\n\n\ndef do_override():\n    \"\"\"\n    Ensure that the local copy of distutils is preferred over stdlib.\n\n    See https://github.com/pypa/setuptools/issues/417#issuecomment-392298401\n    for more motivation.\n    \"\"\"\n    if enabled():\n        warn_distutils_present()\n        ensure_local_distutils()\n\n\nclass _TrivialRe:\n    def __init__(self, *patterns):\n        self._patterns = patterns\n\n    def match(self, string):\n        return all(pat in string for pat in self._patterns)\n\n\nclass DistutilsMetaFinder:\n    def find_spec(self, fullname, path, target=None):\n        # optimization: only consider top level modules and those\n        # found in the CPython test suite.\n        if path is not None and not fullname.startswith('test.'):\n            return\n\n        method_name = 'spec_for_{fullname}'.format(**locals())\n        method = getattr(self, method_name, lambda: None)\n        return method()\n\n    def spec_for_distutils(self):\n        if self.is_cpython():\n            return\n\n        import importlib\n        import importlib.abc\n        import importlib.util\n\n        try:\n            mod = importlib.import_module('setuptools._distutils')\n        except Exception:\n            # There are a couple of cases where setuptools._distutils\n            # may not be present:\n            # - An older Setuptools without a local distutils is\n            #   taking precedence. Ref #2957.\n            # - Path manipulation during sitecustomize removes\n            #   setuptools from the path but only after the hook\n            #   has been loaded. Ref #2980.\n            # In either case, fall back to stdlib behavior.\n            return\n\n        class DistutilsLoader(importlib.abc.Loader):\n            def create_module(self, spec):\n                mod.__name__ = 'distutils'\n                return mod\n\n            def exec_module(self, module):\n                pass\n\n        return importlib.util.spec_from_loader(\n            'distutils', DistutilsLoader(), origin=mod.__file__\n        )\n\n    @staticmethod\n    def is_cpython():\n        \"\"\"\n        Suppress supplying distutils for CPython (build and tests).\n        Ref #2965 and #3007.\n        \"\"\"\n        return os.path.isfile('pybuilddir.txt')\n\n    def spec_for_pip(self):\n        \"\"\"\n        Ensure stdlib distutils when running under pip.\n        See pypa/pip#8761 for rationale.\n        \"\"\"\n        if sys.version_info >= (3, 12) or self.pip_imported_during_build():\n            return\n        clear_distutils()\n        self.spec_for_distutils = lambda: None\n\n    @classmethod\n    def pip_imported_during_build(cls):\n        \"\"\"\n        Detect if pip is being imported in a build script. Ref #2355.\n        \"\"\"\n        import traceback\n\n        return any(\n            cls.frame_file_is_setup(frame) for frame, line in traceback.walk_stack(None)\n        )\n\n    @staticmethod\n    def frame_file_is_setup(frame):\n        \"\"\"\n        Return True if the indicated frame suggests a setup.py file.\n        \"\"\"\n        # some frames may not have __file__ (#2940)\n        return frame.f_globals.get('__file__', '').endswith('setup.py')\n\n    def spec_for_sensitive_tests(self):\n        \"\"\"\n        Ensure stdlib distutils when running select tests under CPython.\n\n        python/cpython#91169\n        \"\"\"\n        clear_distutils()\n        self.spec_for_distutils = lambda: None\n\n    sensitive_tests = (\n        [\n            'test.test_distutils',\n            'test.test_peg_generator',\n            'test.test_importlib',\n        ]\n        if sys.version_info < (3, 10)\n        else [\n            'test.test_distutils',\n        ]\n    )\n\n\nfor name in DistutilsMetaFinder.sensitive_tests:\n    setattr(\n        DistutilsMetaFinder,\n        f'spec_for_{name}',\n        DistutilsMetaFinder.spec_for_sensitive_tests,\n    )\n\n\nDISTUTILS_FINDER = DistutilsMetaFinder()\n\n\ndef add_shim():\n    DISTUTILS_FINDER in sys.meta_path or insert_shim()\n\n\nclass shim:\n    def __enter__(self):\n        insert_shim()\n\n    def __exit__(self, exc, value, tb):\n        _remove_shim()\n\n\ndef insert_shim():\n    sys.meta_path.insert(0, DISTUTILS_FINDER)\n\n\ndef _remove_shim():\n    try:\n        sys.meta_path.remove(DISTUTILS_FINDER)\n    except ValueError:\n        pass\n\n\nif sys.version_info < (3, 12):\n    # DistutilsMetaFinder can only be disabled in Python < 3.12 (PEP 632)\n    remove_shim = _remove_shim\n", 227], "/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py": ["\"\"\" \nCopyright by https://github.com/zhansliu/writemdict\n\nripemd128.py - A simple ripemd128 library in pure Python.\n\nSupports both Python 2 (versions >= 2.6) and Python 3.\n\nUsage:\n    from ripemd128 import ripemd128\n    digest = ripemd128(b\"The quick brown fox jumps over the lazy dog\")\n    assert(digest == b\"\\x3f\\xa9\\xb5\\x7f\\x05\\x3c\\x05\\x3f\\xbe\\x27\\x35\\xb2\\x38\\x0d\\xb5\\x96\")\n\n\"\"\"\n      \n\n\nimport struct\n\n\n# follows this description: http://homes.esat.kuleuven.be/~bosselae/ripemd/rmd128.txt\n\ndef f(j, x, y, z):\n\tassert(0 <= j and j < 64)\n\tif j < 16:\n\t\treturn x ^ y ^ z\n\telif j < 32:\n\t\treturn (x & y) | (z & ~x)\n\telif j < 48:\n\t\treturn (x | (0xffffffff & ~y)) ^ z\n\telse:\n\t\treturn (x & z) | (y & ~z)\n\ndef K(j):\n\tassert(0 <= j and j < 64)\n\tif j < 16:\n\t\treturn 0x00000000\n\telif j < 32:\n\t\treturn 0x5a827999\n\telif j < 48:\n\t\treturn 0x6ed9eba1\n\telse:\n\t\treturn 0x8f1bbcdc\n\ndef Kp(j):\n\tassert(0 <= j and j < 64)\n\tif j < 16:\n\t\treturn 0x50a28be6\n\telif j < 32:\n\t\treturn 0x5c4dd124\n\telif j < 48:\n\t\treturn 0x6d703ef3\n\telse:\n\t\treturn 0x00000000\n\ndef padandsplit(message):\n\t\"\"\"\n\treturns a two-dimensional array X[i][j] of 32-bit integers, where j ranges\n\tfrom 0 to 16.\n\tFirst pads the message to length in bytes is congruent to 56 (mod 64), \n\tby first adding a byte 0x80, and then padding with 0x00 bytes until the\n\tmessage length is congruent to 56 (mod 64). Then adds the little-endian\n\t64-bit representation of the original length. Finally, splits the result\n\tup into 64-byte blocks, which are further parsed as 32-bit integers.\n\t\"\"\"\n\toriglen = len(message)\n\tpadlength = 64 - ((origlen - 56) % 64) #minimum padding is 1!\n\tmessage += b\"\\x80\"\n\tmessage += b\"\\x00\" * (padlength - 1)\n\tmessage += struct.pack(\"<Q\", origlen*8)\n\tassert(len(message) % 64 == 0)\n\treturn [\n\t         [\n\t           struct.unpack(\"<L\", message[i+j:i+j+4])[0]\n\t           for j in range(0, 64, 4)\n\t         ]\n\t         for i in range(0, len(message), 64)\n\t       ]\n\n\ndef add(*args):\n\treturn sum(args) & 0xffffffff\n\ndef rol(s,x):\n\tassert(s < 32)\n\treturn (x << s | x >> (32-s)) & 0xffffffff\n\nr =  [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,\n       7, 4,13, 1,10, 6,15, 3,12, 0, 9, 5, 2,14,11, 8,\n       3,10,14, 4, 9,15, 8, 1, 2, 7, 0, 6,13,11, 5,12,\n       1, 9,11,10, 0, 8,12, 4,13, 3, 7,15,14, 5, 6, 2]\nrp = [ 5,14, 7, 0, 9, 2,11, 4,13, 6,15, 8, 1,10, 3,12,\n       6,11, 3, 7, 0,13, 5,10,14,15, 8,12, 4, 9, 1, 2,\n      15, 5, 1, 3, 7,14, 6, 9,11, 8,12, 2,10, 0, 4,13,\n       8, 6, 4, 1, 3,11,15, 0, 5,12, 2,13, 9, 7,10,14]\ns =  [11,14,15,12, 5, 8, 7, 9,11,13,14,15, 6, 7, 9, 8,\n       7, 6, 8,13,11, 9, 7,15, 7,12,15, 9,11, 7,13,12,\n      11,13, 6, 7,14, 9,13,15,14, 8,13, 6, 5,12, 7, 5,\n      11,12,14,15,14,15, 9, 8, 9,14, 5, 6, 8, 6, 5,12]\nsp = [ 8, 9, 9,11,13,15,15, 5, 7, 7, 8,11,14,14,12, 6,\n       9,13,15, 7,12, 8, 9,11, 7, 7,12, 7, 6,15,13,11,\n       9, 7,15,11, 8, 6, 6,14,12,13, 5,14,13,13, 7, 5,\n      15, 5, 8,11,14,14, 6,14, 6, 9,12, 9,12, 5,15, 8]\n\n\ndef ripemd128(message):\n\th0 = 0x67452301\n\th1 = 0xefcdab89\n\th2 = 0x98badcfe\n\th3 = 0x10325476\n\tX = padandsplit(message)\n\tfor i in range(len(X)):\n\t\t(A,B,C,D) = (h0,h1,h2,h3)\n\t\t(Ap,Bp,Cp,Dp) = (h0,h1,h2,h3)\n\t\tfor j in range(64):\n\t\t\tT = rol(s[j], add(A, f(j,B,C,D), X[i][r[j]], K(j)))\n\t\t\t(A,D,C,B) = (D,C,B,T)\n\t\t\tT = rol(sp[j], add(Ap, f(63-j,Bp,Cp,Dp), X[i][rp[j]], Kp(j)))\n\t\t\t(Ap,Dp,Cp,Bp)=(Dp,Cp,Bp,T)\n\t\tT = add(h1,C,Dp)\n\t\th1 = add(h2,D,Ap)\n\t\th2 = add(h3,A,Bp)\n\t\th3 = add(h0,B,Cp)\n\t\th0 = T\n\t\n\t\n\treturn struct.pack(\"<LLLL\",h0,h1,h2,h3)\n\ndef hexstr(bstr):\n\treturn \"\".join(\"{0:02x}\".format(b) for b in bstr)\n\t\n", 130], "/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/pureSalsa20.py": ["#!/usr/bin/env python\n# coding: utf-8\n\n\"\"\"\n    Copyright by https://github.com/zhansliu/writemdict\n\n    pureSalsa20.py -- a pure Python implementation of the Salsa20 cipher, ported to Python 3\n\n    v4.0: Added Python 3 support, dropped support for Python <= 2.5.\n    \n    // zhansliu\n\n    Original comments below.\n\n    ====================================================================\n    There are comments here by two authors about three pieces of software:\n        comments by Larry Bugbee about\n            Salsa20, the stream cipher by Daniel J. Bernstein \n                 (including comments about the speed of the C version) and\n            pySalsa20, Bugbee's own Python wrapper for salsa20.c\n                 (including some references), and\n        comments by Steve Witham about\n            pureSalsa20, Witham's pure Python 2.5 implementation of Salsa20,\n                which follows pySalsa20's API, and is in this file.\n\n    Salsa20: a Fast Streaming Cipher (comments by Larry Bugbee)\n    -----------------------------------------------------------\n\n    Salsa20 is a fast stream cipher written by Daniel Bernstein \n    that basically uses a hash function and XOR making for fast \n    encryption.  (Decryption uses the same function.)  Salsa20 \n    is simple and quick.  \n    \n    Some Salsa20 parameter values...\n        design strength    128 bits\n        key length         128 or 256 bits, exactly\n        IV, aka nonce      64 bits, always\n        chunk size         must be in multiples of 64 bytes\n    \n    Salsa20 has two reduced versions, 8 and 12 rounds each.\n    \n    One benchmark (10 MB):\n        1.5GHz PPC G4     102/97/89 MB/sec for 8/12/20 rounds\n        AMD Athlon 2500+   77/67/53 MB/sec for 8/12/20 rounds\n          (no I/O and before Python GC kicks in)\n    \n    Salsa20 is a Phase 3 finalist in the EU eSTREAM competition \n    and appears to be one of the fastest ciphers.  It is well \n    documented so I will not attempt any injustice here.  Please \n    see \"References\" below.\n    \n    ...and Salsa20 is \"free for any use\".  \n    \n    \n    pySalsa20: a Python wrapper for Salsa20 (Comments by Larry Bugbee)\n    ------------------------------------------------------------------\n\n    pySalsa20.py is a simple ctypes Python wrapper.  Salsa20 is \n    as it's name implies, 20 rounds, but there are two reduced \n    versions, 8 and 12 rounds each.  Because the APIs are \n    identical, pySalsa20 is capable of wrapping all three \n    versions (number of rounds hardcoded), including a special \n    version that allows you to set the number of rounds with a \n    set_rounds() function.  Compile the version of your choice \n    as a shared library (not as a Python extension), name and \n    install it as libsalsa20.so.\n    \n    Sample usage:\n        from pySalsa20 import Salsa20\n        s20 = Salsa20(key, IV)\n        dataout = s20.encryptBytes(datain)   # same for decrypt\n    \n    This is EXPERIMENTAL software and intended for educational \n    purposes only.  To make experimentation less cumbersome, \n    pySalsa20 is also free for any use.      \n    \n    THIS PROGRAM IS PROVIDED WITHOUT WARRANTY OR GUARANTEE OF\n    ANY KIND.  USE AT YOUR OWN RISK.  \n    \n    Enjoy,\n      \n    Larry Bugbee\n    bugbee@seanet.com\n    April 2007\n\n    \n    References:\n    -----------\n      http://en.wikipedia.org/wiki/Salsa20\n      http://en.wikipedia.org/wiki/Daniel_Bernstein\n      http://cr.yp.to/djb.html\n      http://www.ecrypt.eu.org/stream/salsa20p3.html\n      http://www.ecrypt.eu.org/stream/p3ciphers/salsa20/salsa20_p3source.zip\n\n     \n    Prerequisites for pySalsa20:\n    ----------------------------\n      - Python 2.5 (haven't tested in 2.4)\n\n\n    pureSalsa20: Salsa20 in pure Python 2.5 (comments by Steve Witham)\n    ------------------------------------------------------------------\n\n    pureSalsa20 is the stand-alone Python code in this file.\n    It implements the underlying Salsa20 core algorithm\n    and emulates pySalsa20's Salsa20 class API (minus a bug(*)).\n\n    pureSalsa20 is MUCH slower than libsalsa20.so wrapped with pySalsa20--\n    about 1/1000 the speed for Salsa20/20 and 1/500 the speed for Salsa20/8,\n    when encrypting 64k-byte blocks on my computer.\n\n    pureSalsa20 is for cases where portability is much more important than\n    speed.  I wrote it for use in a \"structured\" random number generator.\n\n    There are comments about the reasons for this slowness in\n          http://www.tiac.net/~sw/2010/02/PureSalsa20\n\n    Sample usage:\n        from pureSalsa20 import Salsa20\n        s20 = Salsa20(key, IV)\n        dataout = s20.encryptBytes(datain)   # same for decrypt\n\n    I took the test code from pySalsa20, added a bunch of tests including\n    rough speed tests, and moved them into the file testSalsa20.py.  \n    To test both pySalsa20 and pureSalsa20, type\n        python testSalsa20.py\n\n    (*)The bug (?) in pySalsa20 is this.  The rounds variable is global to the\n    libsalsa20.so library and not switched when switching between instances\n    of the Salsa20 class.\n        s1 = Salsa20( key, IV, 20 )\n        s2 = Salsa20( key, IV, 8 )\n    In this example,\n        with pySalsa20, both s1 and s2 will do 8 rounds of encryption.\n        with pureSalsa20, s1 will do 20 rounds and s2 will do 8 rounds.\n    Perhaps giving each instance its own nRounds variable, which\n    is passed to the salsa20wordtobyte() function, is insecure.  I'm not a \n    cryptographer.\n\n    pureSalsa20.py and testSalsa20.py are EXPERIMENTAL software and \n    intended for educational purposes only.  To make experimentation less \n    cumbersome, pureSalsa20.py and testSalsa20.py are free for any use.\n\n    Revisions:\n    ----------\n      p3.2   Fixed bug that initialized the output buffer with plaintext!\n             Saner ramping of nreps in speed test.\n             Minor changes and print statements.\n      p3.1   Took timing variability out of add32() and rot32().\n             Made the internals more like pySalsa20/libsalsa .\n             Put the semicolons back in the main loop!\n             In encryptBytes(), modify a byte array instead of appending.\n             Fixed speed calculation bug.\n             Used subclasses instead of patches in testSalsa20.py .\n             Added 64k-byte messages to speed test to be fair to pySalsa20.\n      p3     First version, intended to parallel pySalsa20 version 3.\n\n    More references:\n    ----------------\n      http://www.seanet.com/~bugbee/crypto/salsa20/          [pySalsa20]\n      http://cr.yp.to/snuffle.html        [The original name of Salsa20]\n      http://cr.yp.to/snuffle/salsafamily-20071225.pdf [ Salsa20 design]\n      http://www.tiac.net/~sw/2010/02/PureSalsa20\n    \n    THIS PROGRAM IS PROVIDED WITHOUT WARRANTY OR GUARANTEE OF\n    ANY KIND.  USE AT YOUR OWN RISK.  \n\n    Cheers,\n\n    Steve Witham sw at remove-this tiac dot net\n    February, 2010\n\"\"\"\nimport sys\nassert(sys.version_info >= (2, 6))\n\nif sys.version_info >= (3,):\n\tinteger_types = (int,)\n\tpython3 = True\nelse:\n\tinteger_types = (int, long)\n\tpython3 = False\n\nfrom struct import Struct\nlittle_u64 = Struct( \"<Q\" )      #    little-endian 64-bit unsigned.\n                                 #    Unpacks to a tuple of one element!\n\nlittle16_i32 = Struct( \"<16i\" )  # 16 little-endian 32-bit signed ints.\nlittle4_i32 = Struct( \"<4i\" )    #  4 little-endian 32-bit signed ints.\nlittle2_i32 = Struct( \"<2i\" )    #  2 little-endian 32-bit signed ints.\n\n_version = 'p4.0'\n\n#----------- Salsa20 class which emulates pySalsa20.Salsa20 ---------------\n\nclass Salsa20(object):\n    def __init__(self, key=None, IV=None, rounds=20 ):\n        self._lastChunk64 = True\n        self._IVbitlen = 64             # must be 64 bits\n        self.ctx = [ 0 ] * 16\n        if key:\n            self.setKey(key)\n        if IV:\n            self.setIV(IV)\n\n        self.setRounds(rounds)\n\n\n    def setKey(self, key):\n        assert type(key) == bytes\n        ctx = self.ctx\n        if len( key ) == 32:  # recommended\n            constants = b\"expand 32-byte k\"\n            ctx[ 1],ctx[ 2],ctx[ 3],ctx[ 4] = little4_i32.unpack(key[0:16])\n            ctx[11],ctx[12],ctx[13],ctx[14] = little4_i32.unpack(key[16:32])\n        elif len( key ) == 16:\n            constants = b\"expand 16-byte k\"\n            ctx[ 1],ctx[ 2],ctx[ 3],ctx[ 4] = little4_i32.unpack(key[0:16])\n            ctx[11],ctx[12],ctx[13],ctx[14] = little4_i32.unpack(key[0:16])\n        else:\n            raise Exception( \"key length isn't 32 or 16 bytes.\" )\n        ctx[0],ctx[5],ctx[10],ctx[15] = little4_i32.unpack( constants )\n\n        \n    def setIV(self, IV):\n        assert type(IV) == bytes\n        assert len(IV)*8 == 64, 'nonce (IV) not 64 bits'\n        self.IV = IV\n        ctx=self.ctx\n        ctx[ 6],ctx[ 7] = little2_i32.unpack( IV )\n        ctx[ 8],ctx[ 9] = 0, 0  # Reset the block counter.\n\n    setNonce = setIV            # support an alternate name\n\n\n    def setCounter( self, counter ):\n        assert( type(counter) in integer_types )\n        assert( 0 <= counter < 1<<64 ), \"counter < 0 or >= 2**64\"\n        ctx = self.ctx\n        ctx[ 8],ctx[ 9] = little2_i32.unpack( little_u64.pack( counter ) )\n\n    def getCounter( self ):\n        return little_u64.unpack( little2_i32.pack( *self.ctx[ 8:10 ] ) ) [0]\n\n\n    def setRounds(self, rounds, testing=False ):\n        assert testing or rounds in [8, 12, 20], 'rounds must be 8, 12, 20'\n        self.rounds = rounds\n\n\n    def encryptBytes(self, data):\n        assert type(data) == bytes, 'data must be byte string'\n        assert self._lastChunk64, 'previous chunk not multiple of 64 bytes'\n        lendata = len(data)\n        munged = bytearray(lendata)\n        for i in range( 0, lendata, 64 ):\n            h = salsa20_wordtobyte( self.ctx, self.rounds, checkRounds=False )\n            self.setCounter( ( self.getCounter() + 1 ) % 2**64 )\n            # Stopping at 2^70 bytes per nonce is user's responsibility.\n            for j in range( min( 64, lendata - i ) ):\n                if python3:\n                    munged[ i+j ] = data[ i+j ] ^ h[j]\n                else:\n                    munged[ i+j ] = ord(data[ i+j ]) ^ ord(h[j])\n\n        self._lastChunk64 = not lendata % 64\n        return bytes(munged)\n    \n    decryptBytes = encryptBytes # encrypt and decrypt use same function\n\n#--------------------------------------------------------------------------\n\ndef salsa20_wordtobyte( input, nRounds=20, checkRounds=True ):\n    \"\"\" Do nRounds Salsa20 rounds on a copy of \n            input: list or tuple of 16 ints treated as little-endian unsigneds.\n        Returns a 64-byte string.\n        \"\"\"\n\n    assert( type(input) in ( list, tuple )  and  len(input) == 16 )\n    assert( not(checkRounds) or ( nRounds in [ 8, 12, 20 ] ) )\n\n    x = list( input )\n\n    def XOR( a, b ):  return a ^ b\n    ROTATE = rot32\n    PLUS   = add32\n\n    for i in range( nRounds // 2 ):\n        # These ...XOR...ROTATE...PLUS... lines are from ecrypt-linux.c\n        # unchanged except for indents and the blank line between rounds:\n        x[ 4] = XOR(x[ 4],ROTATE(PLUS(x[ 0],x[12]), 7));\n        x[ 8] = XOR(x[ 8],ROTATE(PLUS(x[ 4],x[ 0]), 9));\n        x[12] = XOR(x[12],ROTATE(PLUS(x[ 8],x[ 4]),13));\n        x[ 0] = XOR(x[ 0],ROTATE(PLUS(x[12],x[ 8]),18));\n        x[ 9] = XOR(x[ 9],ROTATE(PLUS(x[ 5],x[ 1]), 7));\n        x[13] = XOR(x[13],ROTATE(PLUS(x[ 9],x[ 5]), 9));\n        x[ 1] = XOR(x[ 1],ROTATE(PLUS(x[13],x[ 9]),13));\n        x[ 5] = XOR(x[ 5],ROTATE(PLUS(x[ 1],x[13]),18));\n        x[14] = XOR(x[14],ROTATE(PLUS(x[10],x[ 6]), 7));\n        x[ 2] = XOR(x[ 2],ROTATE(PLUS(x[14],x[10]), 9));\n        x[ 6] = XOR(x[ 6],ROTATE(PLUS(x[ 2],x[14]),13));\n        x[10] = XOR(x[10],ROTATE(PLUS(x[ 6],x[ 2]),18));\n        x[ 3] = XOR(x[ 3],ROTATE(PLUS(x[15],x[11]), 7));\n        x[ 7] = XOR(x[ 7],ROTATE(PLUS(x[ 3],x[15]), 9));\n        x[11] = XOR(x[11],ROTATE(PLUS(x[ 7],x[ 3]),13));\n        x[15] = XOR(x[15],ROTATE(PLUS(x[11],x[ 7]),18));\n\n        x[ 1] = XOR(x[ 1],ROTATE(PLUS(x[ 0],x[ 3]), 7));\n        x[ 2] = XOR(x[ 2],ROTATE(PLUS(x[ 1],x[ 0]), 9));\n        x[ 3] = XOR(x[ 3],ROTATE(PLUS(x[ 2],x[ 1]),13));\n        x[ 0] = XOR(x[ 0],ROTATE(PLUS(x[ 3],x[ 2]),18));\n        x[ 6] = XOR(x[ 6],ROTATE(PLUS(x[ 5],x[ 4]), 7));\n        x[ 7] = XOR(x[ 7],ROTATE(PLUS(x[ 6],x[ 5]), 9));\n        x[ 4] = XOR(x[ 4],ROTATE(PLUS(x[ 7],x[ 6]),13));\n        x[ 5] = XOR(x[ 5],ROTATE(PLUS(x[ 4],x[ 7]),18));\n        x[11] = XOR(x[11],ROTATE(PLUS(x[10],x[ 9]), 7));\n        x[ 8] = XOR(x[ 8],ROTATE(PLUS(x[11],x[10]), 9));\n        x[ 9] = XOR(x[ 9],ROTATE(PLUS(x[ 8],x[11]),13));\n        x[10] = XOR(x[10],ROTATE(PLUS(x[ 9],x[ 8]),18));\n        x[12] = XOR(x[12],ROTATE(PLUS(x[15],x[14]), 7));\n        x[13] = XOR(x[13],ROTATE(PLUS(x[12],x[15]), 9));\n        x[14] = XOR(x[14],ROTATE(PLUS(x[13],x[12]),13));\n        x[15] = XOR(x[15],ROTATE(PLUS(x[14],x[13]),18));\n\n    for i in range( len( input ) ):\n        x[i] = PLUS( x[i], input[i] )\n    return little16_i32.pack( *x )\n\n#--------------------------- 32-bit ops -------------------------------\n\ndef trunc32( w ):\n    \"\"\" Return the bottom 32 bits of w as a Python int.\n        This creates longs temporarily, but returns an int. \"\"\"\n    w = int( ( w & 0x7fffFFFF ) | -( w & 0x80000000 ) )\n    assert type(w) == int\n    return w\n\n\ndef add32( a, b ):\n    \"\"\" Add two 32-bit words discarding carry above 32nd bit,\n        and without creating a Python long.\n        Timing shouldn't vary.\n    \"\"\"\n    lo = ( a & 0xFFFF ) + ( b & 0xFFFF )\n    hi = ( a >> 16 ) + ( b >> 16 ) + ( lo >> 16 )\n    return ( -(hi & 0x8000) | ( hi & 0x7FFF ) ) << 16 | ( lo & 0xFFFF )\n\n\ndef rot32( w, nLeft ):\n    \"\"\" Rotate 32-bit word left by nLeft or right by -nLeft\n        without creating a Python long.\n        Timing depends on nLeft but not on w.\n    \"\"\"\n    nLeft &= 31  # which makes nLeft >= 0\n    if nLeft == 0:\n        return w\n\n    # Note: now 1 <= nLeft <= 31.\n    #     RRRsLLLLLL   There are nLeft RRR's, (31-nLeft) LLLLLL's,\n    # =>  sLLLLLLRRR   and one s which becomes the sign bit.\n    RRR = ( ( ( w >> 1 ) & 0x7fffFFFF ) >> ( 31 - nLeft ) )\n    sLLLLLL = -( (1<<(31-nLeft)) & w ) | (0x7fffFFFF>>nLeft) & w\n    return RRR | ( sLLLLLL << nLeft )\n\n\n# --------------------------------- end -----------------------------------\n", 365], "/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/readmdict.py": ["\"\"\"Repack readmdict.\"\"\"\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# readmdict.py\n# Octopus MDict Dictionary File (.mdx) and Resource File (.mdd) Analyser\n#\n# Copyright (C) 2012, 2013, 2015 Xiaoqiang Wang <xiaoqiangwang AT gmail DOT com>\n#\n# This program is a free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, version 3 of the License.\n#\n# You can get a copy of GNU General Public License along this program\n# But you can always get it from http://www.gnu.org/licenses/gpl.txt\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n\nfrom struct import pack, unpack\nfrom io import BytesIO\nimport re\nimport sys\n\nfrom ripemd128 import ripemd128\nfrom pureSalsa20 import Salsa20\n\n# zlib compression is used for engine version >=2.0\nimport zlib\n# LZO compression is used for engine version < 2.0\ntry:\n    import lzo\nexcept ImportError:\n    lzo = None\n    print(\"LZO compression support is not available\")\n\n# 2x3 compatible\nif sys.hexversion >= 0x03000000:\n    unicode = str\n\n# Cython\nfrom CY_MDict.MDict import MDict\n\nclass MDD(MDict):\n    \"\"\"\n    MDict resource file format (*.MDD) reader.\n\n    >>> mdd = MDD('example.mdd')\n    >>> len(mdd)\n    208\n    >>> for filename,content in mdd.items():\n    ... print filename, content[:10]\n    \"\"\"\n\n    def __init__(self, fname, passcode=None):\n        MDict.__init__(self, fname, encoding='UTF-16', passcode=passcode)\n\n    def items(self):\n        \"\"\"Return a generator which in turn produce tuples in the form of (filename, content).\"\"\"\n        return self._decode_record_block()\n\n    def _decode_record_block(self):\n        f = open(self._fname, 'rb')\n        f.seek(self._record_block_offset)\n\n        num_record_blocks = self._read_number(f)\n        num_entries = self._read_number(f)\n        assert(num_entries == self._num_entries)\n        record_block_info_size = self._read_number(f)\n        record_block_size = self._read_number(f)\n\n        # record block info section\n        record_block_info_list = []\n        size_counter = 0\n        for i in range(num_record_blocks):\n            compressed_size = self._read_number(f)\n            decompressed_size = self._read_number(f)\n            record_block_info_list += [(compressed_size, decompressed_size)]\n            size_counter += self._number_width * 2\n        assert(size_counter == record_block_info_size)\n\n        # actual record block\n        offset = 0\n        i = 0\n        size_counter = 0\n        for compressed_size, decompressed_size in record_block_info_list:\n            record_block_compressed = f.read(compressed_size)\n            # 4 bytes: compression type\n            record_block_type = record_block_compressed[:4]\n            # 4 bytes: adler32 checksum of decompressed record block\n            adler32 = unpack('>I', record_block_compressed[4:8])[0]\n            if record_block_type == b'\\x00\\x00\\x00\\x00':\n                record_block = record_block_compressed[8:]\n            elif record_block_type == b'\\x01\\x00\\x00\\x00':\n                if lzo is None:\n                    print(\"LZO compression is not supported\")\n                    break\n                # decompress\n                header = b'\\xf0' + pack('>I', decompressed_size)\n                record_block = lzo.decompress(header + record_block_compressed[8:])\n            elif record_block_type == b'\\x02\\x00\\x00\\x00':\n                # decompress\n                record_block = zlib.decompress(record_block_compressed[8:])\n\n            # notice that adler32 return signed value\n            assert(adler32 == zlib.adler32(record_block) & 0xffffffff)\n\n            assert(len(record_block) == decompressed_size)\n            # split record block according to the offset info from key block\n            while i < len(self._key_list):\n                record_start, key_text = self._key_list[i]\n                # reach the end of current record block\n                if record_start - offset >= len(record_block):\n                    break\n                # record end index\n                if i < len(self._key_list)-1:\n                    record_end = self._key_list[i+1][0]\n                else:\n                    record_end = len(record_block) + offset\n                i += 1\n                data = record_block[record_start-offset:record_end-offset]\n                yield key_text, data\n            offset += len(record_block)\n            size_counter += compressed_size\n        assert(size_counter == record_block_size)\n\n        f.close()\n\n\nclass MDX(MDict):\n    \"\"\"\n    Return MDict dictionary file format (*.MDD) reader.\n\n    >>> mdx = MDX('example.mdx')\n    >>> len(mdx)\n    42481\n    >>> for key,value in mdx.items():\n    ... print key, value[:10]\n    \"\"\"\n\n    def __init__(self, fname, encoding='', substyle=False, passcode=None):\n        MDict.__init__(self, fname, encoding, passcode)\n        self._substyle = substyle\n\n    def items(self):\n        \"\"\"Return a generator which in turn produce tuples in the form of (key, value).\"\"\"\n        return self._decode_record_block()\n\n    def _substitute_stylesheet(self, txt):\n        # substitute stylesheet definition\n        txt_list = re.split('`\\d+`', txt)\n        txt_tag = re.findall('`\\d+`', txt)\n        txt_styled = txt_list[0]\n        for j, p in enumerate(txt_list[1:]):\n            style = self._stylesheet[txt_tag[j][1:-1]]\n            if p and p[-1] == '\\n':\n                txt_styled = txt_styled + style[0] + p.rstrip() + style[1] + '\\r\\n'\n            else:\n                txt_styled = txt_styled + style[0] + p + style[1]\n        return txt_styled\n\n    def _decode_record_block(self):\n        f = open(self._fname, 'rb')\n        f.seek(self._record_block_offset)\n\n        num_record_blocks = self._read_number(f)\n        num_entries = self._read_number(f)\n        assert(num_entries == self._num_entries)\n        record_block_info_size = self._read_number(f)\n        record_block_size = self._read_number(f)\n\n        # record block info section\n        record_block_info_list = []\n        size_counter = 0\n        for i in range(num_record_blocks):\n            compressed_size = self._read_number(f)\n            decompressed_size = self._read_number(f)\n            record_block_info_list += [(compressed_size, decompressed_size)]\n            size_counter += self._number_width * 2\n        assert(size_counter == record_block_info_size)\n\n        # actual record block data\n        offset = 0\n        i = 0\n        size_counter = 0\n        for compressed_size, decompressed_size in record_block_info_list:\n            record_block_compressed = f.read(compressed_size)\n            # 4 bytes indicates block compression type\n            record_block_type = record_block_compressed[:4]\n            # 4 bytes adler checksum of uncompressed content\n            adler32 = unpack('>I', record_block_compressed[4:8])[0]\n            # no compression\n            if record_block_type == b'\\x00\\x00\\x00\\x00':\n                record_block = record_block_compressed[8:]\n            # lzo compression\n            elif record_block_type == b'\\x01\\x00\\x00\\x00':\n                if lzo is None:\n                    print(\"LZO compression is not supported\")\n                    break\n                # decompress\n                header = b'\\xf0' + pack('>I', decompressed_size)\n                record_block = lzo.decompress(header + record_block_compressed[8:])\n            # zlib compression\n            elif record_block_type == b'\\x02\\x00\\x00\\x00':\n                # decompress\n                record_block = zlib.decompress(record_block_compressed[8:])\n\n            # notice that adler32 return signed value\n            assert(adler32 == zlib.adler32(record_block) & 0xffffffff)\n\n            assert(len(record_block) == decompressed_size)\n            # split record block according to the offset info from key block\n            while i < len(self._key_list):\n                record_start, key_text = self._key_list[i]\n                # reach the end of current record block\n                if record_start - offset >= len(record_block):\n                    break\n                # record end index\n                if i < len(self._key_list)-1:\n                    record_end = self._key_list[i+1][0]\n                else:\n                    record_end = len(record_block) + offset\n                i += 1\n                record = record_block[record_start-offset:record_end-offset]\n                # convert to utf-8\n                record = record.decode(self._encoding, errors='ignore').strip(u'\\x00').encode('utf-8')\n                # substitute styles\n                if self._substyle and self._stylesheet:\n                    record = self._substitute_stylesheet(record)\n\n                yield key_text, record\n            offset += len(record_block)\n            size_counter += compressed_size\n        assert(size_counter == record_block_size)\n\n        f.close()\n\n", 238], "/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py": ["# Author: Steven J. Bethard <steven.bethard@gmail.com>.\n# New maintainer as of 29 August 2019:  Raymond Hettinger <raymond.hettinger@gmail.com>\n\n\"\"\"Command-line parsing library\n\nThis module is an optparse-inspired command-line parsing library that:\n\n    - handles both optional and positional arguments\n    - produces highly informative usage messages\n    - supports parsers that dispatch to sub-parsers\n\nThe following is a simple usage example that sums integers from the\ncommand-line and writes the result to a file::\n\n    parser = argparse.ArgumentParser(\n        description='sum the integers at the command line')\n    parser.add_argument(\n        'integers', metavar='int', nargs='+', type=int,\n        help='an integer to be summed')\n    parser.add_argument(\n        '--log', default=sys.stdout, type=argparse.FileType('w'),\n        help='the file where the sum should be written')\n    args = parser.parse_args()\n    args.log.write('%s' % sum(args.integers))\n    args.log.close()\n\nThe module contains the following public classes:\n\n    - ArgumentParser -- The main entry point for command-line parsing. As the\n        example above shows, the add_argument() method is used to populate\n        the parser with actions for optional and positional arguments. Then\n        the parse_args() method is invoked to convert the args at the\n        command-line into an object with attributes.\n\n    - ArgumentError -- The exception raised by ArgumentParser objects when\n        there are errors with the parser's actions. Errors raised while\n        parsing the command-line are caught by ArgumentParser and emitted\n        as command-line messages.\n\n    - FileType -- A factory for defining types of files to be created. As the\n        example above shows, instances of FileType are typically passed as\n        the type= argument of add_argument() calls.\n\n    - Action -- The base class for parser actions. Typically actions are\n        selected by passing strings like 'store_true' or 'append_const' to\n        the action= argument of add_argument(). However, for greater\n        customization of ArgumentParser actions, subclasses of Action may\n        be defined and passed as the action= argument.\n\n    - HelpFormatter, RawDescriptionHelpFormatter, RawTextHelpFormatter,\n        ArgumentDefaultsHelpFormatter -- Formatter classes which\n        may be passed as the formatter_class= argument to the\n        ArgumentParser constructor. HelpFormatter is the default,\n        RawDescriptionHelpFormatter and RawTextHelpFormatter tell the parser\n        not to change the formatting for help text, and\n        ArgumentDefaultsHelpFormatter adds information about argument defaults\n        to the help.\n\nAll other classes in this module are considered implementation details.\n(Also note that HelpFormatter and RawDescriptionHelpFormatter are only\nconsidered public as object names -- the API of the formatter objects is\nstill considered an implementation detail.)\n\"\"\"\n\n__version__ = '1.1'\n__all__ = [\n    'ArgumentParser',\n    'ArgumentError',\n    'ArgumentTypeError',\n    'BooleanOptionalAction',\n    'FileType',\n    'HelpFormatter',\n    'ArgumentDefaultsHelpFormatter',\n    'RawDescriptionHelpFormatter',\n    'RawTextHelpFormatter',\n    'MetavarTypeHelpFormatter',\n    'Namespace',\n    'Action',\n    'ONE_OR_MORE',\n    'OPTIONAL',\n    'PARSER',\n    'REMAINDER',\n    'SUPPRESS',\n    'ZERO_OR_MORE',\n]\n\n\nimport os as _os\nimport re as _re\nimport sys as _sys\n\nimport warnings\n\nfrom gettext import gettext as _, ngettext\n\nSUPPRESS = '==SUPPRESS=='\n\nOPTIONAL = '?'\nZERO_OR_MORE = '*'\nONE_OR_MORE = '+'\nPARSER = 'A...'\nREMAINDER = '...'\n_UNRECOGNIZED_ARGS_ATTR = '_unrecognized_args'\n\n# =============================\n# Utility functions and classes\n# =============================\n\nclass _AttributeHolder(object):\n    \"\"\"Abstract base class that provides __repr__.\n\n    The __repr__ method returns a string in the format::\n        ClassName(attr=name, attr=name, ...)\n    The attributes are determined either by a class-level attribute,\n    '_kwarg_names', or by inspecting the instance __dict__.\n    \"\"\"\n\n    def __repr__(self):\n        type_name = type(self).__name__\n        arg_strings = []\n        star_args = {}\n        for arg in self._get_args():\n            arg_strings.append(repr(arg))\n        for name, value in self._get_kwargs():\n            if name.isidentifier():\n                arg_strings.append('%s=%r' % (name, value))\n            else:\n                star_args[name] = value\n        if star_args:\n            arg_strings.append('**%s' % repr(star_args))\n        return '%s(%s)' % (type_name, ', '.join(arg_strings))\n\n    def _get_kwargs(self):\n        return list(self.__dict__.items())\n\n    def _get_args(self):\n        return []\n\n\ndef _copy_items(items):\n    if items is None:\n        return []\n    # The copy module is used only in the 'append' and 'append_const'\n    # actions, and it is needed only when the default value isn't a list.\n    # Delay its import for speeding up the common case.\n    if type(items) is list:\n        return items[:]\n    import copy\n    return copy.copy(items)\n\n\n# ===============\n# Formatting Help\n# ===============\n\n\nclass HelpFormatter(object):\n    \"\"\"Formatter for generating usage messages and argument help strings.\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    \"\"\"\n\n    def __init__(self,\n                 prog,\n                 indent_increment=2,\n                 max_help_position=24,\n                 width=None):\n\n        # default setting for width\n        if width is None:\n            import shutil\n            width = shutil.get_terminal_size().columns\n            width -= 2\n\n        self._prog = prog\n        self._indent_increment = indent_increment\n        self._max_help_position = min(max_help_position,\n                                      max(width - 20, indent_increment * 2))\n        self._width = width\n\n        self._current_indent = 0\n        self._level = 0\n        self._action_max_length = 0\n\n        self._root_section = self._Section(self, None)\n        self._current_section = self._root_section\n\n        self._whitespace_matcher = _re.compile(r'\\s+', _re.ASCII)\n        self._long_break_matcher = _re.compile(r'\\n\\n\\n+')\n\n    # ===============================\n    # Section and indentation methods\n    # ===============================\n    def _indent(self):\n        self._current_indent += self._indent_increment\n        self._level += 1\n\n    def _dedent(self):\n        self._current_indent -= self._indent_increment\n        assert self._current_indent >= 0, 'Indent decreased below 0.'\n        self._level -= 1\n\n    class _Section(object):\n\n        def __init__(self, formatter, parent, heading=None):\n            self.formatter = formatter\n            self.parent = parent\n            self.heading = heading\n            self.items = []\n\n        def format_help(self):\n            # format the indented section\n            if self.parent is not None:\n                self.formatter._indent()\n            join = self.formatter._join_parts\n            item_help = join([func(*args) for func, args in self.items])\n            if self.parent is not None:\n                self.formatter._dedent()\n\n            # return nothing if the section was empty\n            if not item_help:\n                return ''\n\n            # add the heading if the section was non-empty\n            if self.heading is not SUPPRESS and self.heading is not None:\n                current_indent = self.formatter._current_indent\n                heading = '%*s%s:\\n' % (current_indent, '', self.heading)\n            else:\n                heading = ''\n\n            # join the section-initial newline, the heading and the help\n            return join(['\\n', heading, item_help, '\\n'])\n\n    def _add_item(self, func, args):\n        self._current_section.items.append((func, args))\n\n    # ========================\n    # Message building methods\n    # ========================\n    def start_section(self, heading):\n        self._indent()\n        section = self._Section(self, self._current_section, heading)\n        self._add_item(section.format_help, [])\n        self._current_section = section\n\n    def end_section(self):\n        self._current_section = self._current_section.parent\n        self._dedent()\n\n    def add_text(self, text):\n        if text is not SUPPRESS and text is not None:\n            self._add_item(self._format_text, [text])\n\n    def add_usage(self, usage, actions, groups, prefix=None):\n        if usage is not SUPPRESS:\n            args = usage, actions, groups, prefix\n            self._add_item(self._format_usage, args)\n\n    def add_argument(self, action):\n        if action.help is not SUPPRESS:\n\n            # find all invocations\n            get_invocation = self._format_action_invocation\n            invocations = [get_invocation(action)]\n            for subaction in self._iter_indented_subactions(action):\n                invocations.append(get_invocation(subaction))\n\n            # update the maximum item length\n            invocation_length = max(map(len, invocations))\n            action_length = invocation_length + self._current_indent\n            self._action_max_length = max(self._action_max_length,\n                                          action_length)\n\n            # add the item to the list\n            self._add_item(self._format_action, [action])\n\n    def add_arguments(self, actions):\n        for action in actions:\n            self.add_argument(action)\n\n    # =======================\n    # Help-formatting methods\n    # =======================\n    def format_help(self):\n        help = self._root_section.format_help()\n        if help:\n            help = self._long_break_matcher.sub('\\n\\n', help)\n            help = help.strip('\\n') + '\\n'\n        return help\n\n    def _join_parts(self, part_strings):\n        return ''.join([part\n                        for part in part_strings\n                        if part and part is not SUPPRESS])\n\n    def _format_usage(self, usage, actions, groups, prefix):\n        if prefix is None:\n            prefix = _('usage: ')\n\n        # if usage is specified, use that\n        if usage is not None:\n            usage = usage % dict(prog=self._prog)\n\n        # if no optionals or positionals are available, usage is just prog\n        elif usage is None and not actions:\n            usage = '%(prog)s' % dict(prog=self._prog)\n\n        # if optionals and positionals are available, calculate usage\n        elif usage is None:\n            prog = '%(prog)s' % dict(prog=self._prog)\n\n            # split optionals from positionals\n            optionals = []\n            positionals = []\n            for action in actions:\n                if action.option_strings:\n                    optionals.append(action)\n                else:\n                    positionals.append(action)\n\n            # build full usage string\n            format = self._format_actions_usage\n            action_usage = format(optionals + positionals, groups)\n            usage = ' '.join([s for s in [prog, action_usage] if s])\n\n            # wrap the usage parts if it's too long\n            text_width = self._width - self._current_indent\n            if len(prefix) + len(usage) > text_width:\n\n                # break usage into wrappable parts\n                part_regexp = (\n                    r'\\(.*?\\)+(?=\\s|$)|'\n                    r'\\[.*?\\]+(?=\\s|$)|'\n                    r'\\S+'\n                )\n                opt_usage = format(optionals, groups)\n                pos_usage = format(positionals, groups)\n                opt_parts = _re.findall(part_regexp, opt_usage)\n                pos_parts = _re.findall(part_regexp, pos_usage)\n                assert ' '.join(opt_parts) == opt_usage\n                assert ' '.join(pos_parts) == pos_usage\n\n                # helper for wrapping lines\n                def get_lines(parts, indent, prefix=None):\n                    lines = []\n                    line = []\n                    if prefix is not None:\n                        line_len = len(prefix) - 1\n                    else:\n                        line_len = len(indent) - 1\n                    for part in parts:\n                        if line_len + 1 + len(part) > text_width and line:\n                            lines.append(indent + ' '.join(line))\n                            line = []\n                            line_len = len(indent) - 1\n                        line.append(part)\n                        line_len += len(part) + 1\n                    if line:\n                        lines.append(indent + ' '.join(line))\n                    if prefix is not None:\n                        lines[0] = lines[0][len(indent):]\n                    return lines\n\n                # if prog is short, follow it with optionals or positionals\n                if len(prefix) + len(prog) <= 0.75 * text_width:\n                    indent = ' ' * (len(prefix) + len(prog) + 1)\n                    if opt_parts:\n                        lines = get_lines([prog] + opt_parts, indent, prefix)\n                        lines.extend(get_lines(pos_parts, indent))\n                    elif pos_parts:\n                        lines = get_lines([prog] + pos_parts, indent, prefix)\n                    else:\n                        lines = [prog]\n\n                # if prog is long, put it on its own line\n                else:\n                    indent = ' ' * len(prefix)\n                    parts = opt_parts + pos_parts\n                    lines = get_lines(parts, indent)\n                    if len(lines) > 1:\n                        lines = []\n                        lines.extend(get_lines(opt_parts, indent))\n                        lines.extend(get_lines(pos_parts, indent))\n                    lines = [prog] + lines\n\n                # join lines into usage\n                usage = '\\n'.join(lines)\n\n        # prefix with 'usage:'\n        return '%s%s\\n\\n' % (prefix, usage)\n\n    def _format_actions_usage(self, actions, groups):\n        # find group indices and identify actions in groups\n        group_actions = set()\n        inserts = {}\n        for group in groups:\n            if not group._group_actions:\n                raise ValueError(f'empty group {group}')\n\n            try:\n                start = actions.index(group._group_actions[0])\n            except ValueError:\n                continue\n            else:\n                group_action_count = len(group._group_actions)\n                end = start + group_action_count\n                if actions[start:end] == group._group_actions:\n\n                    suppressed_actions_count = 0\n                    for action in group._group_actions:\n                        group_actions.add(action)\n                        if action.help is SUPPRESS:\n                            suppressed_actions_count += 1\n\n                    exposed_actions_count = group_action_count - suppressed_actions_count\n\n                    if not group.required:\n                        if start in inserts:\n                            inserts[start] += ' ['\n                        else:\n                            inserts[start] = '['\n                        if end in inserts:\n                            inserts[end] += ']'\n                        else:\n                            inserts[end] = ']'\n                    elif exposed_actions_count > 1:\n                        if start in inserts:\n                            inserts[start] += ' ('\n                        else:\n                            inserts[start] = '('\n                        if end in inserts:\n                            inserts[end] += ')'\n                        else:\n                            inserts[end] = ')'\n                    for i in range(start + 1, end):\n                        inserts[i] = '|'\n\n        # collect all actions format strings\n        parts = []\n        for i, action in enumerate(actions):\n\n            # suppressed arguments are marked with None\n            # remove | separators for suppressed arguments\n            if action.help is SUPPRESS:\n                parts.append(None)\n                if inserts.get(i) == '|':\n                    inserts.pop(i)\n                elif inserts.get(i + 1) == '|':\n                    inserts.pop(i + 1)\n\n            # produce all arg strings\n            elif not action.option_strings:\n                default = self._get_default_metavar_for_positional(action)\n                part = self._format_args(action, default)\n\n                # if it's in a group, strip the outer []\n                if action in group_actions:\n                    if part[0] == '[' and part[-1] == ']':\n                        part = part[1:-1]\n\n                # add the action string to the list\n                parts.append(part)\n\n            # produce the first way to invoke the option in brackets\n            else:\n                option_string = action.option_strings[0]\n\n                # if the Optional doesn't take a value, format is:\n                #    -s or --long\n                if action.nargs == 0:\n                    part = action.format_usage()\n\n                # if the Optional takes a value, format is:\n                #    -s ARGS or --long ARGS\n                else:\n                    default = self._get_default_metavar_for_optional(action)\n                    args_string = self._format_args(action, default)\n                    part = '%s %s' % (option_string, args_string)\n\n                # make it look optional if it's not required or in a group\n                if not action.required and action not in group_actions:\n                    part = '[%s]' % part\n\n                # add the action string to the list\n                parts.append(part)\n\n        # insert things at the necessary indices\n        for i in sorted(inserts, reverse=True):\n            parts[i:i] = [inserts[i]]\n\n        # join all the action items with spaces\n        text = ' '.join([item for item in parts if item is not None])\n\n        # clean up separators for mutually exclusive groups\n        open = r'[\\[(]'\n        close = r'[\\])]'\n        text = _re.sub(r'(%s) ' % open, r'\\1', text)\n        text = _re.sub(r' (%s)' % close, r'\\1', text)\n        text = _re.sub(r'%s *%s' % (open, close), r'', text)\n        text = text.strip()\n\n        # return the text\n        return text\n\n    def _format_text(self, text):\n        if '%(prog)' in text:\n            text = text % dict(prog=self._prog)\n        text_width = max(self._width - self._current_indent, 11)\n        indent = ' ' * self._current_indent\n        return self._fill_text(text, text_width, indent) + '\\n\\n'\n\n    def _format_action(self, action):\n        # determine the required width and the entry label\n        help_position = min(self._action_max_length + 2,\n                            self._max_help_position)\n        help_width = max(self._width - help_position, 11)\n        action_width = help_position - self._current_indent - 2\n        action_header = self._format_action_invocation(action)\n\n        # no help; start on same line and add a final newline\n        if not action.help:\n            tup = self._current_indent, '', action_header\n            action_header = '%*s%s\\n' % tup\n\n        # short action name; start on the same line and pad two spaces\n        elif len(action_header) <= action_width:\n            tup = self._current_indent, '', action_width, action_header\n            action_header = '%*s%-*s  ' % tup\n            indent_first = 0\n\n        # long action name; start on the next line\n        else:\n            tup = self._current_indent, '', action_header\n            action_header = '%*s%s\\n' % tup\n            indent_first = help_position\n\n        # collect the pieces of the action help\n        parts = [action_header]\n\n        # if there was help for the action, add lines of help text\n        if action.help and action.help.strip():\n            help_text = self._expand_help(action)\n            if help_text:\n                help_lines = self._split_lines(help_text, help_width)\n                parts.append('%*s%s\\n' % (indent_first, '', help_lines[0]))\n                for line in help_lines[1:]:\n                    parts.append('%*s%s\\n' % (help_position, '', line))\n\n        # or add a newline if the description doesn't end with one\n        elif not action_header.endswith('\\n'):\n            parts.append('\\n')\n\n        # if there are any sub-actions, add their help as well\n        for subaction in self._iter_indented_subactions(action):\n            parts.append(self._format_action(subaction))\n\n        # return a single string\n        return self._join_parts(parts)\n\n    def _format_action_invocation(self, action):\n        if not action.option_strings:\n            default = self._get_default_metavar_for_positional(action)\n            metavar, = self._metavar_formatter(action, default)(1)\n            return metavar\n\n        else:\n            parts = []\n\n            # if the Optional doesn't take a value, format is:\n            #    -s, --long\n            if action.nargs == 0:\n                parts.extend(action.option_strings)\n\n            # if the Optional takes a value, format is:\n            #    -s ARGS, --long ARGS\n            else:\n                default = self._get_default_metavar_for_optional(action)\n                args_string = self._format_args(action, default)\n                for option_string in action.option_strings:\n                    parts.append('%s %s' % (option_string, args_string))\n\n            return ', '.join(parts)\n\n    def _metavar_formatter(self, action, default_metavar):\n        if action.metavar is not None:\n            result = action.metavar\n        elif action.choices is not None:\n            choice_strs = [str(choice) for choice in action.choices]\n            result = '{%s}' % ','.join(choice_strs)\n        else:\n            result = default_metavar\n\n        def format(tuple_size):\n            if isinstance(result, tuple):\n                return result\n            else:\n                return (result, ) * tuple_size\n        return format\n\n    def _format_args(self, action, default_metavar):\n        get_metavar = self._metavar_formatter(action, default_metavar)\n        if action.nargs is None:\n            result = '%s' % get_metavar(1)\n        elif action.nargs == OPTIONAL:\n            result = '[%s]' % get_metavar(1)\n        elif action.nargs == ZERO_OR_MORE:\n            metavar = get_metavar(1)\n            if len(metavar) == 2:\n                result = '[%s [%s ...]]' % metavar\n            else:\n                result = '[%s ...]' % metavar\n        elif action.nargs == ONE_OR_MORE:\n            result = '%s [%s ...]' % get_metavar(2)\n        elif action.nargs == REMAINDER:\n            result = '...'\n        elif action.nargs == PARSER:\n            result = '%s ...' % get_metavar(1)\n        elif action.nargs == SUPPRESS:\n            result = ''\n        else:\n            try:\n                formats = ['%s' for _ in range(action.nargs)]\n            except TypeError:\n                raise ValueError(\"invalid nargs value\") from None\n            result = ' '.join(formats) % get_metavar(action.nargs)\n        return result\n\n    def _expand_help(self, action):\n        params = dict(vars(action), prog=self._prog)\n        for name in list(params):\n            if params[name] is SUPPRESS:\n                del params[name]\n        for name in list(params):\n            if hasattr(params[name], '__name__'):\n                params[name] = params[name].__name__\n        if params.get('choices') is not None:\n            choices_str = ', '.join([str(c) for c in params['choices']])\n            params['choices'] = choices_str\n        return self._get_help_string(action) % params\n\n    def _iter_indented_subactions(self, action):\n        try:\n            get_subactions = action._get_subactions\n        except AttributeError:\n            pass\n        else:\n            self._indent()\n            yield from get_subactions()\n            self._dedent()\n\n    def _split_lines(self, text, width):\n        text = self._whitespace_matcher.sub(' ', text).strip()\n        # The textwrap module is used only for formatting help.\n        # Delay its import for speeding up the common usage of argparse.\n        import textwrap\n        return textwrap.wrap(text, width)\n\n    def _fill_text(self, text, width, indent):\n        text = self._whitespace_matcher.sub(' ', text).strip()\n        import textwrap\n        return textwrap.fill(text, width,\n                             initial_indent=indent,\n                             subsequent_indent=indent)\n\n    def _get_help_string(self, action):\n        return action.help\n\n    def _get_default_metavar_for_optional(self, action):\n        return action.dest.upper()\n\n    def _get_default_metavar_for_positional(self, action):\n        return action.dest\n\n\nclass RawDescriptionHelpFormatter(HelpFormatter):\n    \"\"\"Help message formatter which retains any formatting in descriptions.\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    \"\"\"\n\n    def _fill_text(self, text, width, indent):\n        return ''.join(indent + line for line in text.splitlines(keepends=True))\n\n\nclass RawTextHelpFormatter(RawDescriptionHelpFormatter):\n    \"\"\"Help message formatter which retains formatting of all help text.\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    \"\"\"\n\n    def _split_lines(self, text, width):\n        return text.splitlines()\n\n\nclass ArgumentDefaultsHelpFormatter(HelpFormatter):\n    \"\"\"Help message formatter which adds default values to argument help.\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    \"\"\"\n\n    def _get_help_string(self, action):\n        \"\"\"\n        Add the default value to the option help message.\n\n        ArgumentDefaultsHelpFormatter and BooleanOptionalAction when it isn't\n        already present. This code will do that, detecting cornercases to\n        prevent duplicates or cases where it wouldn't make sense to the end\n        user.\n        \"\"\"\n        help = action.help\n        if help is None:\n            help = ''\n\n        if '%(default)' not in help:\n            if action.default is not SUPPRESS:\n                defaulting_nargs = [OPTIONAL, ZERO_OR_MORE]\n                if action.option_strings or action.nargs in defaulting_nargs:\n                    help += ' (default: %(default)s)'\n        return help\n\n\n\nclass MetavarTypeHelpFormatter(HelpFormatter):\n    \"\"\"Help message formatter which uses the argument 'type' as the default\n    metavar value (instead of the argument 'dest')\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    \"\"\"\n\n    def _get_default_metavar_for_optional(self, action):\n        return action.type.__name__\n\n    def _get_default_metavar_for_positional(self, action):\n        return action.type.__name__\n\n\n# =====================\n# Options and Arguments\n# =====================\n\ndef _get_action_name(argument):\n    if argument is None:\n        return None\n    elif argument.option_strings:\n        return '/'.join(argument.option_strings)\n    elif argument.metavar not in (None, SUPPRESS):\n        return argument.metavar\n    elif argument.dest not in (None, SUPPRESS):\n        return argument.dest\n    elif argument.choices:\n        return '{' + ','.join(argument.choices) + '}'\n    else:\n        return None\n\n\nclass ArgumentError(Exception):\n    \"\"\"An error from creating or using an argument (optional or positional).\n\n    The string value of this exception is the message, augmented with\n    information about the argument that caused it.\n    \"\"\"\n\n    def __init__(self, argument, message):\n        self.argument_name = _get_action_name(argument)\n        self.message = message\n\n    def __str__(self):\n        if self.argument_name is None:\n            format = '%(message)s'\n        else:\n            format = _('argument %(argument_name)s: %(message)s')\n        return format % dict(message=self.message,\n                             argument_name=self.argument_name)\n\n\nclass ArgumentTypeError(Exception):\n    \"\"\"An error from trying to convert a command line string to a type.\"\"\"\n    pass\n\n\n# ==============\n# Action classes\n# ==============\n\nclass Action(_AttributeHolder):\n    \"\"\"Information about how to convert command line strings to Python objects.\n\n    Action objects are used by an ArgumentParser to represent the information\n    needed to parse a single argument from one or more strings from the\n    command line. The keyword arguments to the Action constructor are also\n    all attributes of Action instances.\n\n    Keyword Arguments:\n\n        - option_strings -- A list of command-line option strings which\n            should be associated with this action.\n\n        - dest -- The name of the attribute to hold the created object(s)\n\n        - nargs -- The number of command-line arguments that should be\n            consumed. By default, one argument will be consumed and a single\n            value will be produced.  Other values include:\n                - N (an integer) consumes N arguments (and produces a list)\n                - '?' consumes zero or one arguments\n                - '*' consumes zero or more arguments (and produces a list)\n                - '+' consumes one or more arguments (and produces a list)\n            Note that the difference between the default and nargs=1 is that\n            with the default, a single value will be produced, while with\n            nargs=1, a list containing a single value will be produced.\n\n        - const -- The value to be produced if the option is specified and the\n            option uses an action that takes no values.\n\n        - default -- The value to be produced if the option is not specified.\n\n        - type -- A callable that accepts a single string argument, and\n            returns the converted value.  The standard Python types str, int,\n            float, and complex are useful examples of such callables.  If None,\n            str is used.\n\n        - choices -- A container of values that should be allowed. If not None,\n            after a command-line argument has been converted to the appropriate\n            type, an exception will be raised if it is not a member of this\n            collection.\n\n        - required -- True if the action must always be specified at the\n            command line. This is only meaningful for optional command-line\n            arguments.\n\n        - help -- The help string describing the argument.\n\n        - metavar -- The name to be used for the option's argument with the\n            help string. If None, the 'dest' value will be used as the name.\n    \"\"\"\n\n    def __init__(self,\n                 option_strings,\n                 dest,\n                 nargs=None,\n                 const=None,\n                 default=None,\n                 type=None,\n                 choices=None,\n                 required=False,\n                 help=None,\n                 metavar=None):\n        self.option_strings = option_strings\n        self.dest = dest\n        self.nargs = nargs\n        self.const = const\n        self.default = default\n        self.type = type\n        self.choices = choices\n        self.required = required\n        self.help = help\n        self.metavar = metavar\n\n    def _get_kwargs(self):\n        names = [\n            'option_strings',\n            'dest',\n            'nargs',\n            'const',\n            'default',\n            'type',\n            'choices',\n            'required',\n            'help',\n            'metavar',\n        ]\n        return [(name, getattr(self, name)) for name in names]\n\n    def format_usage(self):\n        return self.option_strings[0]\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        raise NotImplementedError(_('.__call__() not defined'))\n\n\nclass BooleanOptionalAction(Action):\n    def __init__(self,\n                 option_strings,\n                 dest,\n                 default=None,\n                 type=None,\n                 choices=None,\n                 required=False,\n                 help=None,\n                 metavar=None):\n\n        _option_strings = []\n        for option_string in option_strings:\n            _option_strings.append(option_string)\n\n            if option_string.startswith('--'):\n                option_string = '--no-' + option_string[2:]\n                _option_strings.append(option_string)\n\n        super().__init__(\n            option_strings=_option_strings,\n            dest=dest,\n            nargs=0,\n            default=default,\n            type=type,\n            choices=choices,\n            required=required,\n            help=help,\n            metavar=metavar)\n\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        if option_string in self.option_strings:\n            setattr(namespace, self.dest, not option_string.startswith('--no-'))\n\n    def format_usage(self):\n        return ' | '.join(self.option_strings)\n\n\nclass _StoreAction(Action):\n\n    def __init__(self,\n                 option_strings,\n                 dest,\n                 nargs=None,\n                 const=None,\n                 default=None,\n                 type=None,\n                 choices=None,\n                 required=False,\n                 help=None,\n                 metavar=None):\n        if nargs == 0:\n            raise ValueError('nargs for store actions must be != 0; if you '\n                             'have nothing to store, actions such as store '\n                             'true or store const may be more appropriate')\n        if const is not None and nargs != OPTIONAL:\n            raise ValueError('nargs must be %r to supply const' % OPTIONAL)\n        super(_StoreAction, self).__init__(\n            option_strings=option_strings,\n            dest=dest,\n            nargs=nargs,\n            const=const,\n            default=default,\n            type=type,\n            choices=choices,\n            required=required,\n            help=help,\n            metavar=metavar)\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        setattr(namespace, self.dest, values)\n\n\nclass _StoreConstAction(Action):\n\n    def __init__(self,\n                 option_strings,\n                 dest,\n                 const=None,\n                 default=None,\n                 required=False,\n                 help=None,\n                 metavar=None):\n        super(_StoreConstAction, self).__init__(\n            option_strings=option_strings,\n            dest=dest,\n            nargs=0,\n            const=const,\n            default=default,\n            required=required,\n            help=help)\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        setattr(namespace, self.dest, self.const)\n\n\nclass _StoreTrueAction(_StoreConstAction):\n\n    def __init__(self,\n                 option_strings,\n                 dest,\n                 default=False,\n                 required=False,\n                 help=None):\n        super(_StoreTrueAction, self).__init__(\n            option_strings=option_strings,\n            dest=dest,\n            const=True,\n            default=default,\n            required=required,\n            help=help)\n\n\nclass _StoreFalseAction(_StoreConstAction):\n\n    def __init__(self,\n                 option_strings,\n                 dest,\n                 default=True,\n                 required=False,\n                 help=None):\n        super(_StoreFalseAction, self).__init__(\n            option_strings=option_strings,\n            dest=dest,\n            const=False,\n            default=default,\n            required=required,\n            help=help)\n\n\nclass _AppendAction(Action):\n\n    def __init__(self,\n                 option_strings,\n                 dest,\n                 nargs=None,\n                 const=None,\n                 default=None,\n                 type=None,\n                 choices=None,\n                 required=False,\n                 help=None,\n                 metavar=None):\n        if nargs == 0:\n            raise ValueError('nargs for append actions must be != 0; if arg '\n                             'strings are not supplying the value to append, '\n                             'the append const action may be more appropriate')\n        if const is not None and nargs != OPTIONAL:\n            raise ValueError('nargs must be %r to supply const' % OPTIONAL)\n        super(_AppendAction, self).__init__(\n            option_strings=option_strings,\n            dest=dest,\n            nargs=nargs,\n            const=const,\n            default=default,\n            type=type,\n            choices=choices,\n            required=required,\n            help=help,\n            metavar=metavar)\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        items = getattr(namespace, self.dest, None)\n        items = _copy_items(items)\n        items.append(values)\n        setattr(namespace, self.dest, items)\n\n\nclass _AppendConstAction(Action):\n\n    def __init__(self,\n                 option_strings,\n                 dest,\n                 const=None,\n                 default=None,\n                 required=False,\n                 help=None,\n                 metavar=None):\n        super(_AppendConstAction, self).__init__(\n            option_strings=option_strings,\n            dest=dest,\n            nargs=0,\n            const=const,\n            default=default,\n            required=required,\n            help=help,\n            metavar=metavar)\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        items = getattr(namespace, self.dest, None)\n        items = _copy_items(items)\n        items.append(self.const)\n        setattr(namespace, self.dest, items)\n\n\nclass _CountAction(Action):\n\n    def __init__(self,\n                 option_strings,\n                 dest,\n                 default=None,\n                 required=False,\n                 help=None):\n        super(_CountAction, self).__init__(\n            option_strings=option_strings,\n            dest=dest,\n            nargs=0,\n            default=default,\n            required=required,\n            help=help)\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        count = getattr(namespace, self.dest, None)\n        if count is None:\n            count = 0\n        setattr(namespace, self.dest, count + 1)\n\n\nclass _HelpAction(Action):\n\n    def __init__(self,\n                 option_strings,\n                 dest=SUPPRESS,\n                 default=SUPPRESS,\n                 help=None):\n        super(_HelpAction, self).__init__(\n            option_strings=option_strings,\n            dest=dest,\n            default=default,\n            nargs=0,\n            help=help)\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        parser.print_help()\n        parser.exit()\n\n\nclass _VersionAction(Action):\n\n    def __init__(self,\n                 option_strings,\n                 version=None,\n                 dest=SUPPRESS,\n                 default=SUPPRESS,\n                 help=\"show program's version number and exit\"):\n        super(_VersionAction, self).__init__(\n            option_strings=option_strings,\n            dest=dest,\n            default=default,\n            nargs=0,\n            help=help)\n        self.version = version\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        version = self.version\n        if version is None:\n            version = parser.version\n        formatter = parser._get_formatter()\n        formatter.add_text(version)\n        parser._print_message(formatter.format_help(), _sys.stdout)\n        parser.exit()\n\n\nclass _SubParsersAction(Action):\n\n    class _ChoicesPseudoAction(Action):\n\n        def __init__(self, name, aliases, help):\n            metavar = dest = name\n            if aliases:\n                metavar += ' (%s)' % ', '.join(aliases)\n            sup = super(_SubParsersAction._ChoicesPseudoAction, self)\n            sup.__init__(option_strings=[], dest=dest, help=help,\n                         metavar=metavar)\n\n    def __init__(self,\n                 option_strings,\n                 prog,\n                 parser_class,\n                 dest=SUPPRESS,\n                 required=False,\n                 help=None,\n                 metavar=None):\n\n        self._prog_prefix = prog\n        self._parser_class = parser_class\n        self._name_parser_map = {}\n        self._choices_actions = []\n\n        super(_SubParsersAction, self).__init__(\n            option_strings=option_strings,\n            dest=dest,\n            nargs=PARSER,\n            choices=self._name_parser_map,\n            required=required,\n            help=help,\n            metavar=metavar)\n\n    def add_parser(self, name, **kwargs):\n        # set prog from the existing prefix\n        if kwargs.get('prog') is None:\n            kwargs['prog'] = '%s %s' % (self._prog_prefix, name)\n\n        aliases = kwargs.pop('aliases', ())\n\n        if name in self._name_parser_map:\n            raise ArgumentError(self, _('conflicting subparser: %s') % name)\n        for alias in aliases:\n            if alias in self._name_parser_map:\n                raise ArgumentError(\n                    self, _('conflicting subparser alias: %s') % alias)\n\n        # create a pseudo-action to hold the choice help\n        if 'help' in kwargs:\n            help = kwargs.pop('help')\n            choice_action = self._ChoicesPseudoAction(name, aliases, help)\n            self._choices_actions.append(choice_action)\n\n        # create the parser and add it to the map\n        parser = self._parser_class(**kwargs)\n        self._name_parser_map[name] = parser\n\n        # make parser available under aliases also\n        for alias in aliases:\n            self._name_parser_map[alias] = parser\n\n        return parser\n\n    def _get_subactions(self):\n        return self._choices_actions\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        parser_name = values[0]\n        arg_strings = values[1:]\n\n        # set the parser name if requested\n        if self.dest is not SUPPRESS:\n            setattr(namespace, self.dest, parser_name)\n\n        # select the parser\n        try:\n            parser = self._name_parser_map[parser_name]\n        except KeyError:\n            args = {'parser_name': parser_name,\n                    'choices': ', '.join(self._name_parser_map)}\n            msg = _('unknown parser %(parser_name)r (choices: %(choices)s)') % args\n            raise ArgumentError(self, msg)\n\n        # parse all the remaining options into the namespace\n        # store any unrecognized options on the object, so that the top\n        # level parser can decide what to do with them\n\n        # In case this subparser defines new defaults, we parse them\n        # in a new namespace object and then update the original\n        # namespace for the relevant parts.\n        subnamespace, arg_strings = parser.parse_known_args(arg_strings, None)\n        for key, value in vars(subnamespace).items():\n            setattr(namespace, key, value)\n\n        if arg_strings:\n            vars(namespace).setdefault(_UNRECOGNIZED_ARGS_ATTR, [])\n            getattr(namespace, _UNRECOGNIZED_ARGS_ATTR).extend(arg_strings)\n\nclass _ExtendAction(_AppendAction):\n    def __call__(self, parser, namespace, values, option_string=None):\n        items = getattr(namespace, self.dest, None)\n        items = _copy_items(items)\n        items.extend(values)\n        setattr(namespace, self.dest, items)\n\n# ==============\n# Type classes\n# ==============\n\nclass FileType(object):\n    \"\"\"Factory for creating file object types\n\n    Instances of FileType are typically passed as type= arguments to the\n    ArgumentParser add_argument() method.\n\n    Keyword Arguments:\n        - mode -- A string indicating how the file is to be opened. Accepts the\n            same values as the builtin open() function.\n        - bufsize -- The file's desired buffer size. Accepts the same values as\n            the builtin open() function.\n        - encoding -- The file's encoding. Accepts the same values as the\n            builtin open() function.\n        - errors -- A string indicating how encoding and decoding errors are to\n            be handled. Accepts the same value as the builtin open() function.\n    \"\"\"\n\n    def __init__(self, mode='r', bufsize=-1, encoding=None, errors=None):\n        self._mode = mode\n        self._bufsize = bufsize\n        self._encoding = encoding\n        self._errors = errors\n\n    def __call__(self, string):\n        # the special argument \"-\" means sys.std{in,out}\n        if string == '-':\n            if 'r' in self._mode:\n                return _sys.stdin.buffer if 'b' in self._mode else _sys.stdin\n            elif any(c in self._mode for c in 'wax'):\n                return _sys.stdout.buffer if 'b' in self._mode else _sys.stdout\n            else:\n                msg = _('argument \"-\" with mode %r') % self._mode\n                raise ValueError(msg)\n\n        # all other arguments are used as file names\n        try:\n            return open(string, self._mode, self._bufsize, self._encoding,\n                        self._errors)\n        except OSError as e:\n            args = {'filename': string, 'error': e}\n            message = _(\"can't open '%(filename)s': %(error)s\")\n            raise ArgumentTypeError(message % args)\n\n    def __repr__(self):\n        args = self._mode, self._bufsize\n        kwargs = [('encoding', self._encoding), ('errors', self._errors)]\n        args_str = ', '.join([repr(arg) for arg in args if arg != -1] +\n                             ['%s=%r' % (kw, arg) for kw, arg in kwargs\n                              if arg is not None])\n        return '%s(%s)' % (type(self).__name__, args_str)\n\n# ===========================\n# Optional and Positional Parsing\n# ===========================\n\nclass Namespace(_AttributeHolder):\n    \"\"\"Simple object for storing attributes.\n\n    Implements equality by attribute names and values, and provides a simple\n    string representation.\n    \"\"\"\n\n    def __init__(self, **kwargs):\n        for name in kwargs:\n            setattr(self, name, kwargs[name])\n\n    def __eq__(self, other):\n        if not isinstance(other, Namespace):\n            return NotImplemented\n        return vars(self) == vars(other)\n\n    def __contains__(self, key):\n        return key in self.__dict__\n\n\nclass _ActionsContainer(object):\n\n    def __init__(self,\n                 description,\n                 prefix_chars,\n                 argument_default,\n                 conflict_handler):\n        super(_ActionsContainer, self).__init__()\n\n        self.description = description\n        self.argument_default = argument_default\n        self.prefix_chars = prefix_chars\n        self.conflict_handler = conflict_handler\n\n        # set up registries\n        self._registries = {}\n\n        # register actions\n        self.register('action', None, _StoreAction)\n        self.register('action', 'store', _StoreAction)\n        self.register('action', 'store_const', _StoreConstAction)\n        self.register('action', 'store_true', _StoreTrueAction)\n        self.register('action', 'store_false', _StoreFalseAction)\n        self.register('action', 'append', _AppendAction)\n        self.register('action', 'append_const', _AppendConstAction)\n        self.register('action', 'count', _CountAction)\n        self.register('action', 'help', _HelpAction)\n        self.register('action', 'version', _VersionAction)\n        self.register('action', 'parsers', _SubParsersAction)\n        self.register('action', 'extend', _ExtendAction)\n\n        # raise an exception if the conflict handler is invalid\n        self._get_handler()\n\n        # action storage\n        self._actions = []\n        self._option_string_actions = {}\n\n        # groups\n        self._action_groups = []\n        self._mutually_exclusive_groups = []\n\n        # defaults storage\n        self._defaults = {}\n\n        # determines whether an \"option\" looks like a negative number\n        self._negative_number_matcher = _re.compile(r'^-\\d+$|^-\\d*\\.\\d+$')\n\n        # whether or not there are any optionals that look like negative\n        # numbers -- uses a list so it can be shared and edited\n        self._has_negative_number_optionals = []\n\n    # ====================\n    # Registration methods\n    # ====================\n    def register(self, registry_name, value, object):\n        registry = self._registries.setdefault(registry_name, {})\n        registry[value] = object\n\n    def _registry_get(self, registry_name, value, default=None):\n        return self._registries[registry_name].get(value, default)\n\n    # ==================================\n    # Namespace default accessor methods\n    # ==================================\n    def set_defaults(self, **kwargs):\n        self._defaults.update(kwargs)\n\n        # if these defaults match any existing arguments, replace\n        # the previous default on the object with the new one\n        for action in self._actions:\n            if action.dest in kwargs:\n                action.default = kwargs[action.dest]\n\n    def get_default(self, dest):\n        for action in self._actions:\n            if action.dest == dest and action.default is not None:\n                return action.default\n        return self._defaults.get(dest, None)\n\n\n    # =======================\n    # Adding argument actions\n    # =======================\n    def add_argument(self, *args, **kwargs):\n        \"\"\"\n        add_argument(dest, ..., name=value, ...)\n        add_argument(option_string, option_string, ..., name=value, ...)\n        \"\"\"\n\n        # if no positional args are supplied or only one is supplied and\n        # it doesn't look like an option string, parse a positional\n        # argument\n        chars = self.prefix_chars\n        if not args or len(args) == 1 and args[0][0] not in chars:\n            if args and 'dest' in kwargs:\n                raise ValueError('dest supplied twice for positional argument')\n            kwargs = self._get_positional_kwargs(*args, **kwargs)\n\n        # otherwise, we're adding an optional argument\n        else:\n            kwargs = self._get_optional_kwargs(*args, **kwargs)\n\n        # if no default was supplied, use the parser-level default\n        if 'default' not in kwargs:\n            dest = kwargs['dest']\n            if dest in self._defaults:\n                kwargs['default'] = self._defaults[dest]\n            elif self.argument_default is not None:\n                kwargs['default'] = self.argument_default\n\n        # create the action object, and add it to the parser\n        action_class = self._pop_action_class(kwargs)\n        if not callable(action_class):\n            raise ValueError('unknown action \"%s\"' % (action_class,))\n        action = action_class(**kwargs)\n\n        # raise an error if the action type is not callable\n        type_func = self._registry_get('type', action.type, action.type)\n        if not callable(type_func):\n            raise ValueError('%r is not callable' % (type_func,))\n\n        if type_func is FileType:\n            raise ValueError('%r is a FileType class object, instance of it'\n                             ' must be passed' % (type_func,))\n\n        # raise an error if the metavar does not match the type\n        if hasattr(self, \"_get_formatter\"):\n            try:\n                self._get_formatter()._format_args(action, None)\n            except TypeError:\n                raise ValueError(\"length of metavar tuple does not match nargs\")\n\n        return self._add_action(action)\n\n    def add_argument_group(self, *args, **kwargs):\n        group = _ArgumentGroup(self, *args, **kwargs)\n        self._action_groups.append(group)\n        return group\n\n    def add_mutually_exclusive_group(self, **kwargs):\n        group = _MutuallyExclusiveGroup(self, **kwargs)\n        self._mutually_exclusive_groups.append(group)\n        return group\n\n    def _add_action(self, action):\n        # resolve any conflicts\n        self._check_conflict(action)\n\n        # add to actions list\n        self._actions.append(action)\n        action.container = self\n\n        # index the action by any option strings it has\n        for option_string in action.option_strings:\n            self._option_string_actions[option_string] = action\n\n        # set the flag if any option strings look like negative numbers\n        for option_string in action.option_strings:\n            if self._negative_number_matcher.match(option_string):\n                if not self._has_negative_number_optionals:\n                    self._has_negative_number_optionals.append(True)\n\n        # return the created action\n        return action\n\n    def _remove_action(self, action):\n        self._actions.remove(action)\n\n    def _add_container_actions(self, container):\n        # collect groups by titles\n        title_group_map = {}\n        for group in self._action_groups:\n            if group.title in title_group_map:\n                msg = _('cannot merge actions - two groups are named %r')\n                raise ValueError(msg % (group.title))\n            title_group_map[group.title] = group\n\n        # map each action to its group\n        group_map = {}\n        for group in container._action_groups:\n\n            # if a group with the title exists, use that, otherwise\n            # create a new group matching the container's group\n            if group.title not in title_group_map:\n                title_group_map[group.title] = self.add_argument_group(\n                    title=group.title,\n                    description=group.description,\n                    conflict_handler=group.conflict_handler)\n\n            # map the actions to their new group\n            for action in group._group_actions:\n                group_map[action] = title_group_map[group.title]\n\n        # add container's mutually exclusive groups\n        # NOTE: if add_mutually_exclusive_group ever gains title= and\n        # description= then this code will need to be expanded as above\n        for group in container._mutually_exclusive_groups:\n            mutex_group = self.add_mutually_exclusive_group(\n                required=group.required)\n\n            # map the actions to their new mutex group\n            for action in group._group_actions:\n                group_map[action] = mutex_group\n\n        # add all actions to this container or their group\n        for action in container._actions:\n            group_map.get(action, self)._add_action(action)\n\n    def _get_positional_kwargs(self, dest, **kwargs):\n        # make sure required is not specified\n        if 'required' in kwargs:\n            msg = _(\"'required' is an invalid argument for positionals\")\n            raise TypeError(msg)\n\n        # mark positional arguments as required if at least one is\n        # always required\n        if kwargs.get('nargs') not in [OPTIONAL, ZERO_OR_MORE]:\n            kwargs['required'] = True\n        if kwargs.get('nargs') == ZERO_OR_MORE and 'default' not in kwargs:\n            kwargs['required'] = True\n\n        # return the keyword arguments with no option strings\n        return dict(kwargs, dest=dest, option_strings=[])\n\n    def _get_optional_kwargs(self, *args, **kwargs):\n        # determine short and long option strings\n        option_strings = []\n        long_option_strings = []\n        for option_string in args:\n            # error on strings that don't start with an appropriate prefix\n            if not option_string[0] in self.prefix_chars:\n                args = {'option': option_string,\n                        'prefix_chars': self.prefix_chars}\n                msg = _('invalid option string %(option)r: '\n                        'must start with a character %(prefix_chars)r')\n                raise ValueError(msg % args)\n\n            # strings starting with two prefix characters are long options\n            option_strings.append(option_string)\n            if len(option_string) > 1 and option_string[1] in self.prefix_chars:\n                long_option_strings.append(option_string)\n\n        # infer destination, '--foo-bar' -> 'foo_bar' and '-x' -> 'x'\n        dest = kwargs.pop('dest', None)\n        if dest is None:\n            if long_option_strings:\n                dest_option_string = long_option_strings[0]\n            else:\n                dest_option_string = option_strings[0]\n            dest = dest_option_string.lstrip(self.prefix_chars)\n            if not dest:\n                msg = _('dest= is required for options like %r')\n                raise ValueError(msg % option_string)\n            dest = dest.replace('-', '_')\n\n        # return the updated keyword arguments\n        return dict(kwargs, dest=dest, option_strings=option_strings)\n\n    def _pop_action_class(self, kwargs, default=None):\n        action = kwargs.pop('action', default)\n        return self._registry_get('action', action, action)\n\n    def _get_handler(self):\n        # determine function from conflict handler string\n        handler_func_name = '_handle_conflict_%s' % self.conflict_handler\n        try:\n            return getattr(self, handler_func_name)\n        except AttributeError:\n            msg = _('invalid conflict_resolution value: %r')\n            raise ValueError(msg % self.conflict_handler)\n\n    def _check_conflict(self, action):\n\n        # find all options that conflict with this option\n        confl_optionals = []\n        for option_string in action.option_strings:\n            if option_string in self._option_string_actions:\n                confl_optional = self._option_string_actions[option_string]\n                confl_optionals.append((option_string, confl_optional))\n\n        # resolve any conflicts\n        if confl_optionals:\n            conflict_handler = self._get_handler()\n            conflict_handler(action, confl_optionals)\n\n    def _handle_conflict_error(self, action, conflicting_actions):\n        message = ngettext('conflicting option string: %s',\n                           'conflicting option strings: %s',\n                           len(conflicting_actions))\n        conflict_string = ', '.join([option_string\n                                     for option_string, action\n                                     in conflicting_actions])\n        raise ArgumentError(action, message % conflict_string)\n\n    def _handle_conflict_resolve(self, action, conflicting_actions):\n\n        # remove all conflicting options\n        for option_string, action in conflicting_actions:\n\n            # remove the conflicting option\n            action.option_strings.remove(option_string)\n            self._option_string_actions.pop(option_string, None)\n\n            # if the option now has no option string, remove it from the\n            # container holding it\n            if not action.option_strings:\n                action.container._remove_action(action)\n\n\nclass _ArgumentGroup(_ActionsContainer):\n\n    def __init__(self, container, title=None, description=None, **kwargs):\n        # add any missing keyword arguments by checking the container\n        update = kwargs.setdefault\n        update('conflict_handler', container.conflict_handler)\n        update('prefix_chars', container.prefix_chars)\n        update('argument_default', container.argument_default)\n        super_init = super(_ArgumentGroup, self).__init__\n        super_init(description=description, **kwargs)\n\n        # group attributes\n        self.title = title\n        self._group_actions = []\n\n        # share most attributes with the container\n        self._registries = container._registries\n        self._actions = container._actions\n        self._option_string_actions = container._option_string_actions\n        self._defaults = container._defaults\n        self._has_negative_number_optionals = \\\n            container._has_negative_number_optionals\n        self._mutually_exclusive_groups = container._mutually_exclusive_groups\n\n    def _add_action(self, action):\n        action = super(_ArgumentGroup, self)._add_action(action)\n        self._group_actions.append(action)\n        return action\n\n    def _remove_action(self, action):\n        super(_ArgumentGroup, self)._remove_action(action)\n        self._group_actions.remove(action)\n\n    def add_argument_group(self, *args, **kwargs):\n        warnings.warn(\n            \"Nesting argument groups is deprecated.\",\n            category=DeprecationWarning,\n            stacklevel=2\n        )\n        return super().add_argument_group(*args, **kwargs)\n\n\nclass _MutuallyExclusiveGroup(_ArgumentGroup):\n\n    def __init__(self, container, required=False):\n        super(_MutuallyExclusiveGroup, self).__init__(container)\n        self.required = required\n        self._container = container\n\n    def _add_action(self, action):\n        if action.required:\n            msg = _('mutually exclusive arguments must be optional')\n            raise ValueError(msg)\n        action = self._container._add_action(action)\n        self._group_actions.append(action)\n        return action\n\n    def _remove_action(self, action):\n        self._container._remove_action(action)\n        self._group_actions.remove(action)\n\n    def add_mutually_exclusive_group(self, *args, **kwargs):\n        warnings.warn(\n            \"Nesting mutually exclusive groups is deprecated.\",\n            category=DeprecationWarning,\n            stacklevel=2\n        )\n        return super().add_mutually_exclusive_group(*args, **kwargs)\n\n\nclass ArgumentParser(_AttributeHolder, _ActionsContainer):\n    \"\"\"Object for parsing command line strings into Python objects.\n\n    Keyword Arguments:\n        - prog -- The name of the program (default:\n            ``os.path.basename(sys.argv[0])``)\n        - usage -- A usage message (default: auto-generated from arguments)\n        - description -- A description of what the program does\n        - epilog -- Text following the argument descriptions\n        - parents -- Parsers whose arguments should be copied into this one\n        - formatter_class -- HelpFormatter class for printing help messages\n        - prefix_chars -- Characters that prefix optional arguments\n        - fromfile_prefix_chars -- Characters that prefix files containing\n            additional arguments\n        - argument_default -- The default value for all arguments\n        - conflict_handler -- String indicating how to handle conflicts\n        - add_help -- Add a -h/-help option\n        - allow_abbrev -- Allow long options to be abbreviated unambiguously\n        - exit_on_error -- Determines whether or not ArgumentParser exits with\n            error info when an error occurs\n    \"\"\"\n\n    def __init__(self,\n                 prog=None,\n                 usage=None,\n                 description=None,\n                 epilog=None,\n                 parents=[],\n                 formatter_class=HelpFormatter,\n                 prefix_chars='-',\n                 fromfile_prefix_chars=None,\n                 argument_default=None,\n                 conflict_handler='error',\n                 add_help=True,\n                 allow_abbrev=True,\n                 exit_on_error=True):\n\n        superinit = super(ArgumentParser, self).__init__\n        superinit(description=description,\n                  prefix_chars=prefix_chars,\n                  argument_default=argument_default,\n                  conflict_handler=conflict_handler)\n\n        # default setting for prog\n        if prog is None:\n            prog = _os.path.basename(_sys.argv[0])\n\n        self.prog = prog\n        self.usage = usage\n        self.epilog = epilog\n        self.formatter_class = formatter_class\n        self.fromfile_prefix_chars = fromfile_prefix_chars\n        self.add_help = add_help\n        self.allow_abbrev = allow_abbrev\n        self.exit_on_error = exit_on_error\n\n        add_group = self.add_argument_group\n        self._positionals = add_group(_('positional arguments'))\n        self._optionals = add_group(_('options'))\n        self._subparsers = None\n\n        # register types\n        def identity(string):\n            return string\n        self.register('type', None, identity)\n\n        # add help argument if necessary\n        # (using explicit default to override global argument_default)\n        default_prefix = '-' if '-' in prefix_chars else prefix_chars[0]\n        if self.add_help:\n            self.add_argument(\n                default_prefix+'h', default_prefix*2+'help',\n                action='help', default=SUPPRESS,\n                help=_('show this help message and exit'))\n\n        # add parent arguments and defaults\n        for parent in parents:\n            self._add_container_actions(parent)\n            try:\n                defaults = parent._defaults\n            except AttributeError:\n                pass\n            else:\n                self._defaults.update(defaults)\n\n    # =======================\n    # Pretty __repr__ methods\n    # =======================\n    def _get_kwargs(self):\n        names = [\n            'prog',\n            'usage',\n            'description',\n            'formatter_class',\n            'conflict_handler',\n            'add_help',\n        ]\n        return [(name, getattr(self, name)) for name in names]\n\n    # ==================================\n    # Optional/Positional adding methods\n    # ==================================\n    def add_subparsers(self, **kwargs):\n        if self._subparsers is not None:\n            self.error(_('cannot have multiple subparser arguments'))\n\n        # add the parser class to the arguments if it's not present\n        kwargs.setdefault('parser_class', type(self))\n\n        if 'title' in kwargs or 'description' in kwargs:\n            title = _(kwargs.pop('title', 'subcommands'))\n            description = _(kwargs.pop('description', None))\n            self._subparsers = self.add_argument_group(title, description)\n        else:\n            self._subparsers = self._positionals\n\n        # prog defaults to the usage message of this parser, skipping\n        # optional arguments and with no \"usage:\" prefix\n        if kwargs.get('prog') is None:\n            formatter = self._get_formatter()\n            positionals = self._get_positional_actions()\n            groups = self._mutually_exclusive_groups\n            formatter.add_usage(self.usage, positionals, groups, '')\n            kwargs['prog'] = formatter.format_help().strip()\n\n        # create the parsers action and add it to the positionals list\n        parsers_class = self._pop_action_class(kwargs, 'parsers')\n        action = parsers_class(option_strings=[], **kwargs)\n        self._subparsers._add_action(action)\n\n        # return the created parsers action\n        return action\n\n    def _add_action(self, action):\n        if action.option_strings:\n            self._optionals._add_action(action)\n        else:\n            self._positionals._add_action(action)\n        return action\n\n    def _get_optional_actions(self):\n        return [action\n                for action in self._actions\n                if action.option_strings]\n\n    def _get_positional_actions(self):\n        return [action\n                for action in self._actions\n                if not action.option_strings]\n\n    # =====================================\n    # Command line argument parsing methods\n    # =====================================\n    def parse_args(self, args=None, namespace=None):\n        args, argv = self.parse_known_args(args, namespace)\n        if argv:\n            msg = _('unrecognized arguments: %s')\n            self.error(msg % ' '.join(argv))\n        return args\n\n    def parse_known_args(self, args=None, namespace=None):\n        if args is None:\n            # args default to the system args\n            args = _sys.argv[1:]\n        else:\n            # make sure that args are mutable\n            args = list(args)\n\n        # default Namespace built from parser defaults\n        if namespace is None:\n            namespace = Namespace()\n\n        # add any action defaults that aren't present\n        for action in self._actions:\n            if action.dest is not SUPPRESS:\n                if not hasattr(namespace, action.dest):\n                    if action.default is not SUPPRESS:\n                        setattr(namespace, action.dest, action.default)\n\n        # add any parser defaults that aren't present\n        for dest in self._defaults:\n            if not hasattr(namespace, dest):\n                setattr(namespace, dest, self._defaults[dest])\n\n        # parse the arguments and exit if there are any errors\n        if self.exit_on_error:\n            try:\n                namespace, args = self._parse_known_args(args, namespace)\n            except ArgumentError as err:\n                self.error(str(err))\n        else:\n            namespace, args = self._parse_known_args(args, namespace)\n\n        if hasattr(namespace, _UNRECOGNIZED_ARGS_ATTR):\n            args.extend(getattr(namespace, _UNRECOGNIZED_ARGS_ATTR))\n            delattr(namespace, _UNRECOGNIZED_ARGS_ATTR)\n        return namespace, args\n\n    def _parse_known_args(self, arg_strings, namespace):\n        # replace arg strings that are file references\n        if self.fromfile_prefix_chars is not None:\n            arg_strings = self._read_args_from_files(arg_strings)\n\n        # map all mutually exclusive arguments to the other arguments\n        # they can't occur with\n        action_conflicts = {}\n        for mutex_group in self._mutually_exclusive_groups:\n            group_actions = mutex_group._group_actions\n            for i, mutex_action in enumerate(mutex_group._group_actions):\n                conflicts = action_conflicts.setdefault(mutex_action, [])\n                conflicts.extend(group_actions[:i])\n                conflicts.extend(group_actions[i + 1:])\n\n        # find all option indices, and determine the arg_string_pattern\n        # which has an 'O' if there is an option at an index,\n        # an 'A' if there is an argument, or a '-' if there is a '--'\n        option_string_indices = {}\n        arg_string_pattern_parts = []\n        arg_strings_iter = iter(arg_strings)\n        for i, arg_string in enumerate(arg_strings_iter):\n\n            # all args after -- are non-options\n            if arg_string == '--':\n                arg_string_pattern_parts.append('-')\n                for arg_string in arg_strings_iter:\n                    arg_string_pattern_parts.append('A')\n\n            # otherwise, add the arg to the arg strings\n            # and note the index if it was an option\n            else:\n                option_tuple = self._parse_optional(arg_string)\n                if option_tuple is None:\n                    pattern = 'A'\n                else:\n                    option_string_indices[i] = option_tuple\n                    pattern = 'O'\n                arg_string_pattern_parts.append(pattern)\n\n        # join the pieces together to form the pattern\n        arg_strings_pattern = ''.join(arg_string_pattern_parts)\n\n        # converts arg strings to the appropriate and then takes the action\n        seen_actions = set()\n        seen_non_default_actions = set()\n\n        def take_action(action, argument_strings, option_string=None):\n            seen_actions.add(action)\n            argument_values = self._get_values(action, argument_strings)\n\n            # error if this argument is not allowed with other previously\n            # seen arguments, assuming that actions that use the default\n            # value don't really count as \"present\"\n            if argument_values is not action.default:\n                seen_non_default_actions.add(action)\n                for conflict_action in action_conflicts.get(action, []):\n                    if conflict_action in seen_non_default_actions:\n                        msg = _('not allowed with argument %s')\n                        action_name = _get_action_name(conflict_action)\n                        raise ArgumentError(action, msg % action_name)\n\n            # take the action if we didn't receive a SUPPRESS value\n            # (e.g. from a default)\n            if argument_values is not SUPPRESS:\n                action(self, namespace, argument_values, option_string)\n\n        # function to convert arg_strings into an optional action\n        def consume_optional(start_index):\n\n            # get the optional identified at this index\n            option_tuple = option_string_indices[start_index]\n            action, option_string, explicit_arg = option_tuple\n\n            # identify additional optionals in the same arg string\n            # (e.g. -xyz is the same as -x -y -z if no args are required)\n            match_argument = self._match_argument\n            action_tuples = []\n            while True:\n\n                # if we found no optional action, skip it\n                if action is None:\n                    extras.append(arg_strings[start_index])\n                    return start_index + 1\n\n                # if there is an explicit argument, try to match the\n                # optional's string arguments to only this\n                if explicit_arg is not None:\n                    arg_count = match_argument(action, 'A')\n\n                    # if the action is a single-dash option and takes no\n                    # arguments, try to parse more single-dash options out\n                    # of the tail of the option string\n                    chars = self.prefix_chars\n                    if (\n                        arg_count == 0\n                        and option_string[1] not in chars\n                        and explicit_arg != ''\n                    ):\n                        action_tuples.append((action, [], option_string))\n                        char = option_string[0]\n                        option_string = char + explicit_arg[0]\n                        new_explicit_arg = explicit_arg[1:] or None\n                        optionals_map = self._option_string_actions\n                        if option_string in optionals_map:\n                            action = optionals_map[option_string]\n                            explicit_arg = new_explicit_arg\n                        else:\n                            msg = _('ignored explicit argument %r')\n                            raise ArgumentError(action, msg % explicit_arg)\n\n                    # if the action expect exactly one argument, we've\n                    # successfully matched the option; exit the loop\n                    elif arg_count == 1:\n                        stop = start_index + 1\n                        args = [explicit_arg]\n                        action_tuples.append((action, args, option_string))\n                        break\n\n                    # error if a double-dash option did not use the\n                    # explicit argument\n                    else:\n                        msg = _('ignored explicit argument %r')\n                        raise ArgumentError(action, msg % explicit_arg)\n\n                # if there is no explicit argument, try to match the\n                # optional's string arguments with the following strings\n                # if successful, exit the loop\n                else:\n                    start = start_index + 1\n                    selected_patterns = arg_strings_pattern[start:]\n                    arg_count = match_argument(action, selected_patterns)\n                    stop = start + arg_count\n                    args = arg_strings[start:stop]\n                    action_tuples.append((action, args, option_string))\n                    break\n\n            # add the Optional to the list and return the index at which\n            # the Optional's string args stopped\n            assert action_tuples\n            for action, args, option_string in action_tuples:\n                take_action(action, args, option_string)\n            return stop\n\n        # the list of Positionals left to be parsed; this is modified\n        # by consume_positionals()\n        positionals = self._get_positional_actions()\n\n        # function to convert arg_strings into positional actions\n        def consume_positionals(start_index):\n            # match as many Positionals as possible\n            match_partial = self._match_arguments_partial\n            selected_pattern = arg_strings_pattern[start_index:]\n            arg_counts = match_partial(positionals, selected_pattern)\n\n            # slice off the appropriate arg strings for each Positional\n            # and add the Positional and its args to the list\n            for action, arg_count in zip(positionals, arg_counts):\n                args = arg_strings[start_index: start_index + arg_count]\n                start_index += arg_count\n                take_action(action, args)\n\n            # slice off the Positionals that we just parsed and return the\n            # index at which the Positionals' string args stopped\n            positionals[:] = positionals[len(arg_counts):]\n            return start_index\n\n        # consume Positionals and Optionals alternately, until we have\n        # passed the last option string\n        extras = []\n        start_index = 0\n        if option_string_indices:\n            max_option_string_index = max(option_string_indices)\n        else:\n            max_option_string_index = -1\n        while start_index <= max_option_string_index:\n\n            # consume any Positionals preceding the next option\n            next_option_string_index = min([\n                index\n                for index in option_string_indices\n                if index >= start_index])\n            if start_index != next_option_string_index:\n                positionals_end_index = consume_positionals(start_index)\n\n                # only try to parse the next optional if we didn't consume\n                # the option string during the positionals parsing\n                if positionals_end_index > start_index:\n                    start_index = positionals_end_index\n                    continue\n                else:\n                    start_index = positionals_end_index\n\n            # if we consumed all the positionals we could and we're not\n            # at the index of an option string, there were extra arguments\n            if start_index not in option_string_indices:\n                strings = arg_strings[start_index:next_option_string_index]\n                extras.extend(strings)\n                start_index = next_option_string_index\n\n            # consume the next optional and any arguments for it\n            start_index = consume_optional(start_index)\n\n        # consume any positionals following the last Optional\n        stop_index = consume_positionals(start_index)\n\n        # if we didn't consume all the argument strings, there were extras\n        extras.extend(arg_strings[stop_index:])\n\n        # make sure all required actions were present and also convert\n        # action defaults which were not given as arguments\n        required_actions = []\n        for action in self._actions:\n            if action not in seen_actions:\n                if action.required:\n                    required_actions.append(_get_action_name(action))\n                else:\n                    # Convert action default now instead of doing it before\n                    # parsing arguments to avoid calling convert functions\n                    # twice (which may fail) if the argument was given, but\n                    # only if it was defined already in the namespace\n                    if (action.default is not None and\n                        isinstance(action.default, str) and\n                        hasattr(namespace, action.dest) and\n                        action.default is getattr(namespace, action.dest)):\n                        setattr(namespace, action.dest,\n                                self._get_value(action, action.default))\n\n        if required_actions:\n            self.error(_('the following arguments are required: %s') %\n                       ', '.join(required_actions))\n\n        # make sure all required groups had one option present\n        for group in self._mutually_exclusive_groups:\n            if group.required:\n                for action in group._group_actions:\n                    if action in seen_non_default_actions:\n                        break\n\n                # if no actions were used, report the error\n                else:\n                    names = [_get_action_name(action)\n                             for action in group._group_actions\n                             if action.help is not SUPPRESS]\n                    msg = _('one of the arguments %s is required')\n                    self.error(msg % ' '.join(names))\n\n        # return the updated namespace and the extra arguments\n        return namespace, extras\n\n    def _read_args_from_files(self, arg_strings):\n        # expand arguments referencing files\n        new_arg_strings = []\n        for arg_string in arg_strings:\n\n            # for regular arguments, just add them back into the list\n            if not arg_string or arg_string[0] not in self.fromfile_prefix_chars:\n                new_arg_strings.append(arg_string)\n\n            # replace arguments referencing files with the file content\n            else:\n                try:\n                    with open(arg_string[1:]) as args_file:\n                        arg_strings = []\n                        for arg_line in args_file.read().splitlines():\n                            for arg in self.convert_arg_line_to_args(arg_line):\n                                arg_strings.append(arg)\n                        arg_strings = self._read_args_from_files(arg_strings)\n                        new_arg_strings.extend(arg_strings)\n                except OSError as err:\n                    self.error(str(err))\n\n        # return the modified argument list\n        return new_arg_strings\n\n    def convert_arg_line_to_args(self, arg_line):\n        return [arg_line]\n\n    def _match_argument(self, action, arg_strings_pattern):\n        # match the pattern for this action to the arg strings\n        nargs_pattern = self._get_nargs_pattern(action)\n        match = _re.match(nargs_pattern, arg_strings_pattern)\n\n        # raise an exception if we weren't able to find a match\n        if match is None:\n            nargs_errors = {\n                None: _('expected one argument'),\n                OPTIONAL: _('expected at most one argument'),\n                ONE_OR_MORE: _('expected at least one argument'),\n            }\n            msg = nargs_errors.get(action.nargs)\n            if msg is None:\n                msg = ngettext('expected %s argument',\n                               'expected %s arguments',\n                               action.nargs) % action.nargs\n            raise ArgumentError(action, msg)\n\n        # return the number of arguments matched\n        return len(match.group(1))\n\n    def _match_arguments_partial(self, actions, arg_strings_pattern):\n        # progressively shorten the actions list by slicing off the\n        # final actions until we find a match\n        result = []\n        for i in range(len(actions), 0, -1):\n            actions_slice = actions[:i]\n            pattern = ''.join([self._get_nargs_pattern(action)\n                               for action in actions_slice])\n            match = _re.match(pattern, arg_strings_pattern)\n            if match is not None:\n                result.extend([len(string) for string in match.groups()])\n                break\n\n        # return the list of arg string counts\n        return result\n\n    def _parse_optional(self, arg_string):\n        # if it's an empty string, it was meant to be a positional\n        if not arg_string:\n            return None\n\n        # if it doesn't start with a prefix, it was meant to be positional\n        if not arg_string[0] in self.prefix_chars:\n            return None\n\n        # if the option string is present in the parser, return the action\n        if arg_string in self._option_string_actions:\n            action = self._option_string_actions[arg_string]\n            return action, arg_string, None\n\n        # if it's just a single character, it was meant to be positional\n        if len(arg_string) == 1:\n            return None\n\n        # if the option string before the \"=\" is present, return the action\n        if '=' in arg_string:\n            option_string, explicit_arg = arg_string.split('=', 1)\n            if option_string in self._option_string_actions:\n                action = self._option_string_actions[option_string]\n                return action, option_string, explicit_arg\n\n        # search through all possible prefixes of the option string\n        # and all actions in the parser for possible interpretations\n        option_tuples = self._get_option_tuples(arg_string)\n\n        # if multiple actions match, the option string was ambiguous\n        if len(option_tuples) > 1:\n            options = ', '.join([option_string\n                for action, option_string, explicit_arg in option_tuples])\n            args = {'option': arg_string, 'matches': options}\n            msg = _('ambiguous option: %(option)s could match %(matches)s')\n            self.error(msg % args)\n\n        # if exactly one action matched, this segmentation is good,\n        # so return the parsed action\n        elif len(option_tuples) == 1:\n            option_tuple, = option_tuples\n            return option_tuple\n\n        # if it was not found as an option, but it looks like a negative\n        # number, it was meant to be positional\n        # unless there are negative-number-like options\n        if self._negative_number_matcher.match(arg_string):\n            if not self._has_negative_number_optionals:\n                return None\n\n        # if it contains a space, it was meant to be a positional\n        if ' ' in arg_string:\n            return None\n\n        # it was meant to be an optional but there is no such option\n        # in this parser (though it might be a valid option in a subparser)\n        return None, arg_string, None\n\n    def _get_option_tuples(self, option_string):\n        result = []\n\n        # option strings starting with two prefix characters are only\n        # split at the '='\n        chars = self.prefix_chars\n        if option_string[0] in chars and option_string[1] in chars:\n            if self.allow_abbrev:\n                if '=' in option_string:\n                    option_prefix, explicit_arg = option_string.split('=', 1)\n                else:\n                    option_prefix = option_string\n                    explicit_arg = None\n                for option_string in self._option_string_actions:\n                    if option_string.startswith(option_prefix):\n                        action = self._option_string_actions[option_string]\n                        tup = action, option_string, explicit_arg\n                        result.append(tup)\n\n        # single character options can be concatenated with their arguments\n        # but multiple character options always have to have their argument\n        # separate\n        elif option_string[0] in chars and option_string[1] not in chars:\n            option_prefix = option_string\n            explicit_arg = None\n            short_option_prefix = option_string[:2]\n            short_explicit_arg = option_string[2:]\n\n            for option_string in self._option_string_actions:\n                if option_string == short_option_prefix:\n                    action = self._option_string_actions[option_string]\n                    tup = action, option_string, short_explicit_arg\n                    result.append(tup)\n                elif option_string.startswith(option_prefix):\n                    action = self._option_string_actions[option_string]\n                    tup = action, option_string, explicit_arg\n                    result.append(tup)\n\n        # shouldn't ever get here\n        else:\n            self.error(_('unexpected option string: %s') % option_string)\n\n        # return the collected option tuples\n        return result\n\n    def _get_nargs_pattern(self, action):\n        # in all examples below, we have to allow for '--' args\n        # which are represented as '-' in the pattern\n        nargs = action.nargs\n\n        # the default (None) is assumed to be a single argument\n        if nargs is None:\n            nargs_pattern = '(-*A-*)'\n\n        # allow zero or one arguments\n        elif nargs == OPTIONAL:\n            nargs_pattern = '(-*A?-*)'\n\n        # allow zero or more arguments\n        elif nargs == ZERO_OR_MORE:\n            nargs_pattern = '(-*[A-]*)'\n\n        # allow one or more arguments\n        elif nargs == ONE_OR_MORE:\n            nargs_pattern = '(-*A[A-]*)'\n\n        # allow any number of options or arguments\n        elif nargs == REMAINDER:\n            nargs_pattern = '([-AO]*)'\n\n        # allow one argument followed by any number of options or arguments\n        elif nargs == PARSER:\n            nargs_pattern = '(-*A[-AO]*)'\n\n        # suppress action, like nargs=0\n        elif nargs == SUPPRESS:\n            nargs_pattern = '(-*-*)'\n\n        # all others should be integers\n        else:\n            nargs_pattern = '(-*%s-*)' % '-*'.join('A' * nargs)\n\n        # if this is an optional action, -- is not allowed\n        if action.option_strings:\n            nargs_pattern = nargs_pattern.replace('-*', '')\n            nargs_pattern = nargs_pattern.replace('-', '')\n\n        # return the pattern\n        return nargs_pattern\n\n    # ========================\n    # Alt command line argument parsing, allowing free intermix\n    # ========================\n\n    def parse_intermixed_args(self, args=None, namespace=None):\n        args, argv = self.parse_known_intermixed_args(args, namespace)\n        if argv:\n            msg = _('unrecognized arguments: %s')\n            self.error(msg % ' '.join(argv))\n        return args\n\n    def parse_known_intermixed_args(self, args=None, namespace=None):\n        # returns a namespace and list of extras\n        #\n        # positional can be freely intermixed with optionals.  optionals are\n        # first parsed with all positional arguments deactivated.  The 'extras'\n        # are then parsed.  If the parser definition is incompatible with the\n        # intermixed assumptions (e.g. use of REMAINDER, subparsers) a\n        # TypeError is raised.\n        #\n        # positionals are 'deactivated' by setting nargs and default to\n        # SUPPRESS.  This blocks the addition of that positional to the\n        # namespace\n\n        positionals = self._get_positional_actions()\n        a = [action for action in positionals\n             if action.nargs in [PARSER, REMAINDER]]\n        if a:\n            raise TypeError('parse_intermixed_args: positional arg'\n                            ' with nargs=%s'%a[0].nargs)\n\n        if [action.dest for group in self._mutually_exclusive_groups\n            for action in group._group_actions if action in positionals]:\n            raise TypeError('parse_intermixed_args: positional in'\n                            ' mutuallyExclusiveGroup')\n\n        try:\n            save_usage = self.usage\n            try:\n                if self.usage is None:\n                    # capture the full usage for use in error messages\n                    self.usage = self.format_usage()[7:]\n                for action in positionals:\n                    # deactivate positionals\n                    action.save_nargs = action.nargs\n                    # action.nargs = 0\n                    action.nargs = SUPPRESS\n                    action.save_default = action.default\n                    action.default = SUPPRESS\n                namespace, remaining_args = self.parse_known_args(args,\n                                                                  namespace)\n                for action in positionals:\n                    # remove the empty positional values from namespace\n                    if (hasattr(namespace, action.dest)\n                            and getattr(namespace, action.dest)==[]):\n                        from warnings import warn\n                        warn('Do not expect %s in %s' % (action.dest, namespace))\n                        delattr(namespace, action.dest)\n            finally:\n                # restore nargs and usage before exiting\n                for action in positionals:\n                    action.nargs = action.save_nargs\n                    action.default = action.save_default\n            optionals = self._get_optional_actions()\n            try:\n                # parse positionals.  optionals aren't normally required, but\n                # they could be, so make sure they aren't.\n                for action in optionals:\n                    action.save_required = action.required\n                    action.required = False\n                for group in self._mutually_exclusive_groups:\n                    group.save_required = group.required\n                    group.required = False\n                namespace, extras = self.parse_known_args(remaining_args,\n                                                          namespace)\n            finally:\n                # restore parser values before exiting\n                for action in optionals:\n                    action.required = action.save_required\n                for group in self._mutually_exclusive_groups:\n                    group.required = group.save_required\n        finally:\n            self.usage = save_usage\n        return namespace, extras\n\n    # ========================\n    # Value conversion methods\n    # ========================\n    def _get_values(self, action, arg_strings):\n        # for everything but PARSER, REMAINDER args, strip out first '--'\n        if action.nargs not in [PARSER, REMAINDER]:\n            try:\n                arg_strings.remove('--')\n            except ValueError:\n                pass\n\n        # optional argument produces a default when not present\n        if not arg_strings and action.nargs == OPTIONAL:\n            if action.option_strings:\n                value = action.const\n            else:\n                value = action.default\n            if isinstance(value, str):\n                value = self._get_value(action, value)\n                self._check_value(action, value)\n\n        # when nargs='*' on a positional, if there were no command-line\n        # args, use the default if it is anything other than None\n        elif (not arg_strings and action.nargs == ZERO_OR_MORE and\n              not action.option_strings):\n            if action.default is not None:\n                value = action.default\n            else:\n                value = arg_strings\n            self._check_value(action, value)\n\n        # single argument or optional argument produces a single value\n        elif len(arg_strings) == 1 and action.nargs in [None, OPTIONAL]:\n            arg_string, = arg_strings\n            value = self._get_value(action, arg_string)\n            self._check_value(action, value)\n\n        # REMAINDER arguments convert all values, checking none\n        elif action.nargs == REMAINDER:\n            value = [self._get_value(action, v) for v in arg_strings]\n\n        # PARSER arguments convert all values, but check only the first\n        elif action.nargs == PARSER:\n            value = [self._get_value(action, v) for v in arg_strings]\n            self._check_value(action, value[0])\n\n        # SUPPRESS argument does not put anything in the namespace\n        elif action.nargs == SUPPRESS:\n            value = SUPPRESS\n\n        # all other types of nargs produce a list\n        else:\n            value = [self._get_value(action, v) for v in arg_strings]\n            for v in value:\n                self._check_value(action, v)\n\n        # return the converted value\n        return value\n\n    def _get_value(self, action, arg_string):\n        type_func = self._registry_get('type', action.type, action.type)\n        if not callable(type_func):\n            msg = _('%r is not callable')\n            raise ArgumentError(action, msg % type_func)\n\n        # convert the value to the appropriate type\n        try:\n            result = type_func(arg_string)\n\n        # ArgumentTypeErrors indicate errors\n        except ArgumentTypeError as err:\n            name = getattr(action.type, '__name__', repr(action.type))\n            msg = str(err)\n            raise ArgumentError(action, msg)\n\n        # TypeErrors or ValueErrors also indicate errors\n        except (TypeError, ValueError):\n            name = getattr(action.type, '__name__', repr(action.type))\n            args = {'type': name, 'value': arg_string}\n            msg = _('invalid %(type)s value: %(value)r')\n            raise ArgumentError(action, msg % args)\n\n        # return the converted value\n        return result\n\n    def _check_value(self, action, value):\n        # converted value must be one of the choices (if specified)\n        if action.choices is not None and value not in action.choices:\n            args = {'value': value,\n                    'choices': ', '.join(map(repr, action.choices))}\n            msg = _('invalid choice: %(value)r (choose from %(choices)s)')\n            raise ArgumentError(action, msg % args)\n\n    # =======================\n    # Help-formatting methods\n    # =======================\n    def format_usage(self):\n        formatter = self._get_formatter()\n        formatter.add_usage(self.usage, self._actions,\n                            self._mutually_exclusive_groups)\n        return formatter.format_help()\n\n    def format_help(self):\n        formatter = self._get_formatter()\n\n        # usage\n        formatter.add_usage(self.usage, self._actions,\n                            self._mutually_exclusive_groups)\n\n        # description\n        formatter.add_text(self.description)\n\n        # positionals, optionals and user-defined groups\n        for action_group in self._action_groups:\n            formatter.start_section(action_group.title)\n            formatter.add_text(action_group.description)\n            formatter.add_arguments(action_group._group_actions)\n            formatter.end_section()\n\n        # epilog\n        formatter.add_text(self.epilog)\n\n        # determine help from format above\n        return formatter.format_help()\n\n    def _get_formatter(self):\n        return self.formatter_class(prog=self.prog)\n\n    # =====================\n    # Help-printing methods\n    # =====================\n    def print_usage(self, file=None):\n        if file is None:\n            file = _sys.stdout\n        self._print_message(self.format_usage(), file)\n\n    def print_help(self, file=None):\n        if file is None:\n            file = _sys.stdout\n        self._print_message(self.format_help(), file)\n\n    def _print_message(self, message, file=None):\n        if message:\n            file = file or _sys.stderr\n            try:\n                file.write(message)\n            except (AttributeError, OSError):\n                pass\n\n    # ===============\n    # Exiting methods\n    # ===============\n    def exit(self, status=0, message=None):\n        if message:\n            self._print_message(message, _sys.stderr)\n        _sys.exit(status)\n\n    def error(self, message):\n        \"\"\"error(message: string)\n\n        Prints a usage message incorporating the message to stderr and\n        exits.\n\n        If you override this in a subclass, it should not return -- it\n        should either exit or raise an exception.\n        \"\"\"\n        self.print_usage(_sys.stderr)\n        args = {'prog': self.prog, 'message': message}\n        self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n", 2630], "/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py": ["#\n# Secret Labs' Regular Expression Engine\n#\n# re-compatible interface for the sre matching engine\n#\n# Copyright (c) 1998-2001 by Secret Labs AB.  All rights reserved.\n#\n# This version of the SRE library can be redistributed under CNRI's\n# Python 1.6 license.  For any other use, please contact Secret Labs\n# AB (info@pythonware.com).\n#\n# Portions of this engine have been developed in cooperation with\n# CNRI.  Hewlett-Packard provided funding for 1.6 integration and\n# other compatibility work.\n#\n\nr\"\"\"Support for regular expressions (RE).\n\nThis module provides regular expression matching operations similar to\nthose found in Perl.  It supports both 8-bit and Unicode strings; both\nthe pattern and the strings being processed can contain null bytes and\ncharacters outside the US ASCII range.\n\nRegular expressions can contain both special and ordinary characters.\nMost ordinary characters, like \"A\", \"a\", or \"0\", are the simplest\nregular expressions; they simply match themselves.  You can\nconcatenate ordinary characters, so last matches the string 'last'.\n\nThe special characters are:\n    \".\"      Matches any character except a newline.\n    \"^\"      Matches the start of the string.\n    \"$\"      Matches the end of the string or just before the newline at\n             the end of the string.\n    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.\n             Greedy means that it will match as many repetitions as possible.\n    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.\n    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.\n    *?,+?,?? Non-greedy versions of the previous three special characters.\n    {m,n}    Matches from m to n repetitions of the preceding RE.\n    {m,n}?   Non-greedy version of the above.\n    \"\\\\\"     Either escapes special characters or signals a special sequence.\n    []       Indicates a set of characters.\n             A \"^\" as the first character indicates a complementing set.\n    \"|\"      A|B, creates an RE that will match either A or B.\n    (...)    Matches the RE inside the parentheses.\n             The contents can be retrieved or matched later in the string.\n    (?aiLmsux) The letters set the corresponding flags defined below.\n    (?:...)  Non-grouping version of regular parentheses.\n    (?P<name>...) The substring matched by the group is accessible by name.\n    (?P=name)     Matches the text matched earlier by the group named name.\n    (?#...)  A comment; ignored.\n    (?=...)  Matches if ... matches next, but doesn't consume the string.\n    (?!...)  Matches if ... doesn't match next.\n    (?<=...) Matches if preceded by ... (must be fixed length).\n    (?<!...) Matches if not preceded by ... (must be fixed length).\n    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,\n                       the (optional) no pattern otherwise.\n\nThe special sequences consist of \"\\\\\" and a character from the list\nbelow.  If the ordinary character is not on the list, then the\nresulting RE will match the second character.\n    \\number  Matches the contents of the group of the same number.\n    \\A       Matches only at the start of the string.\n    \\Z       Matches only at the end of the string.\n    \\b       Matches the empty string, but only at the start or end of a word.\n    \\B       Matches the empty string, but not at the start or end of a word.\n    \\d       Matches any decimal digit; equivalent to the set [0-9] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode digits.\n    \\D       Matches any non-digit character; equivalent to [^\\d].\n    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode whitespace characters.\n    \\S       Matches any non-whitespace character; equivalent to [^\\s].\n    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]\n             in bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the\n             range of Unicode alphanumeric characters (letters plus digits\n             plus underscore).\n             With LOCALE, it will match the set [0-9_] plus characters defined\n             as letters for the current locale.\n    \\W       Matches the complement of \\w.\n    \\\\       Matches a literal backslash.\n\nThis module exports the following functions:\n    match     Match a regular expression pattern to the beginning of a string.\n    fullmatch Match a regular expression pattern to all of a string.\n    search    Search a string for the presence of a pattern.\n    sub       Substitute occurrences of a pattern found in a string.\n    subn      Same as sub, but also return the number of substitutions made.\n    split     Split a string by the occurrences of a pattern.\n    findall   Find all occurrences of a pattern in a string.\n    finditer  Return an iterator yielding a Match object for each match.\n    compile   Compile a pattern into a Pattern object.\n    purge     Clear the regular expression cache.\n    escape    Backslash all non-alphanumerics in a string.\n\nEach function other than purge and escape can take an optional 'flags' argument\nconsisting of one or more of the following module constants, joined by \"|\".\nA, L, and U are mutually exclusive.\n    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D\n                   match the corresponding ASCII character categories\n                   (rather than the whole Unicode categories, which is the\n                   default).\n                   For bytes patterns, this flag is the only available\n                   behaviour and needn't be specified.\n    I  IGNORECASE  Perform case-insensitive matching.\n    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.\n    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)\n                   as well as the string.\n                   \"$\" matches the end of lines (before a newline) as well\n                   as the end of the string.\n    S  DOTALL      \".\" matches any character at all, including the newline.\n    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.\n    U  UNICODE     For compatibility only. Ignored for string patterns (it\n                   is the default), and forbidden for bytes patterns.\n\nThis module also defines an exception 'error'.\n\n\"\"\"\n\nimport enum\nfrom . import _compiler, _parser\nimport functools\n\n\n# public symbols\n__all__ = [\n    \"match\", \"fullmatch\", \"search\", \"sub\", \"subn\", \"split\",\n    \"findall\", \"finditer\", \"compile\", \"purge\", \"template\", \"escape\",\n    \"error\", \"Pattern\", \"Match\", \"A\", \"I\", \"L\", \"M\", \"S\", \"X\", \"U\",\n    \"ASCII\", \"IGNORECASE\", \"LOCALE\", \"MULTILINE\", \"DOTALL\", \"VERBOSE\",\n    \"UNICODE\", \"NOFLAG\", \"RegexFlag\",\n]\n\n__version__ = \"2.2.1\"\n\n@enum.global_enum\n@enum._simple_enum(enum.IntFlag, boundary=enum.KEEP)\nclass RegexFlag:\n    NOFLAG = 0\n    ASCII = A = _compiler.SRE_FLAG_ASCII # assume ascii \"locale\"\n    IGNORECASE = I = _compiler.SRE_FLAG_IGNORECASE # ignore case\n    LOCALE = L = _compiler.SRE_FLAG_LOCALE # assume current 8-bit locale\n    UNICODE = U = _compiler.SRE_FLAG_UNICODE # assume unicode \"locale\"\n    MULTILINE = M = _compiler.SRE_FLAG_MULTILINE # make anchors look for newline\n    DOTALL = S = _compiler.SRE_FLAG_DOTALL # make dot match newline\n    VERBOSE = X = _compiler.SRE_FLAG_VERBOSE # ignore whitespace and comments\n    # sre extensions (experimental, don't rely on these)\n    TEMPLATE = T = _compiler.SRE_FLAG_TEMPLATE # unknown purpose, deprecated\n    DEBUG = _compiler.SRE_FLAG_DEBUG # dump pattern after compilation\n    __str__ = object.__str__\n    _numeric_repr_ = hex\n\n# sre exception\nerror = _compiler.error\n\n# --------------------------------------------------------------------\n# public interface\n\ndef match(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern at the start of the string, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).match(string)\n\ndef fullmatch(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern to all of the string, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).fullmatch(string)\n\ndef search(pattern, string, flags=0):\n    \"\"\"Scan through string looking for a match to the pattern, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).search(string)\n\ndef sub(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement repl.  repl can be either a string or a callable;\n    if a string, backslash escapes in it are processed.  If it is\n    a callable, it's passed the Match object and must return\n    a replacement string to be used.\"\"\"\n    return _compile(pattern, flags).sub(repl, string, count)\n\ndef subn(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return a 2-tuple containing (new_string, number).\n    new_string is the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in the source\n    string by the replacement repl.  number is the number of\n    substitutions that were made. repl can be either a string or a\n    callable; if a string, backslash escapes in it are processed.\n    If it is a callable, it's passed the Match object and must\n    return a replacement string to be used.\"\"\"\n    return _compile(pattern, flags).subn(repl, string, count)\n\ndef split(pattern, string, maxsplit=0, flags=0):\n    \"\"\"Split the source string by the occurrences of the pattern,\n    returning a list containing the resulting substrings.  If\n    capturing parentheses are used in pattern, then the text of all\n    groups in the pattern are also returned as part of the resulting\n    list.  If maxsplit is nonzero, at most maxsplit splits occur,\n    and the remainder of the string is returned as the final element\n    of the list.\"\"\"\n    return _compile(pattern, flags).split(string, maxsplit)\n\ndef findall(pattern, string, flags=0):\n    \"\"\"Return a list of all non-overlapping matches in the string.\n\n    If one or more capturing groups are present in the pattern, return\n    a list of groups; this will be a list of tuples if the pattern\n    has more than one group.\n\n    Empty matches are included in the result.\"\"\"\n    return _compile(pattern, flags).findall(string)\n\ndef finditer(pattern, string, flags=0):\n    \"\"\"Return an iterator over all non-overlapping matches in the\n    string.  For each match, the iterator returns a Match object.\n\n    Empty matches are included in the result.\"\"\"\n    return _compile(pattern, flags).finditer(string)\n\ndef compile(pattern, flags=0):\n    \"Compile a regular expression pattern, returning a Pattern object.\"\n    return _compile(pattern, flags)\n\ndef purge():\n    \"Clear the regular expression caches\"\n    _cache.clear()\n    _compile_repl.cache_clear()\n\ndef template(pattern, flags=0):\n    \"Compile a template pattern, returning a Pattern object, deprecated\"\n    import warnings\n    warnings.warn(\"The re.template() function is deprecated \"\n                  \"as it is an undocumented function \"\n                  \"without an obvious purpose. \"\n                  \"Use re.compile() instead.\",\n                  DeprecationWarning)\n    with warnings.catch_warnings():\n        warnings.simplefilter(\"ignore\", DeprecationWarning)  # warn just once\n        return _compile(pattern, flags|T)\n\n# SPECIAL_CHARS\n# closing ')', '}' and ']'\n# '-' (a range in character set)\n# '&', '~', (extended character set operations)\n# '#' (comment) and WHITESPACE (ignored) in verbose mode\n_special_chars_map = {i: '\\\\' + chr(i) for i in b'()[]{}?*+-|^$\\\\.&~# \\t\\n\\r\\v\\f'}\n\ndef escape(pattern):\n    \"\"\"\n    Escape special characters in a string.\n    \"\"\"\n    if isinstance(pattern, str):\n        return pattern.translate(_special_chars_map)\n    else:\n        pattern = str(pattern, 'latin1')\n        return pattern.translate(_special_chars_map).encode('latin1')\n\nPattern = type(_compiler.compile('', 0))\nMatch = type(_compiler.compile('', 0).match(''))\n\n# --------------------------------------------------------------------\n# internals\n\n_cache = {}  # ordered!\n\n_MAXCACHE = 512\ndef _compile(pattern, flags):\n    # internal: compile pattern\n    if isinstance(flags, RegexFlag):\n        flags = flags.value\n    try:\n        return _cache[type(pattern), pattern, flags]\n    except KeyError:\n        pass\n    if isinstance(pattern, Pattern):\n        if flags:\n            raise ValueError(\n                \"cannot process flags argument with a compiled pattern\")\n        return pattern\n    if not _compiler.isstring(pattern):\n        raise TypeError(\"first argument must be string or compiled pattern\")\n    if flags & T:\n        import warnings\n        warnings.warn(\"The re.TEMPLATE/re.T flag is deprecated \"\n                  \"as it is an undocumented flag \"\n                  \"without an obvious purpose. \"\n                  \"Don't use it.\",\n                  DeprecationWarning)\n    p = _compiler.compile(pattern, flags)\n    if not (flags & DEBUG):\n        if len(_cache) >= _MAXCACHE:\n            # Drop the oldest item\n            try:\n                del _cache[next(iter(_cache))]\n            except (StopIteration, RuntimeError, KeyError):\n                pass\n        _cache[type(pattern), pattern, flags] = p\n    return p\n\n@functools.lru_cache(_MAXCACHE)\ndef _compile_repl(repl, pattern):\n    # internal: compile replacement pattern\n    return _parser.parse_template(repl, pattern)\n\ndef _expand(pattern, match, template):\n    # internal: Match.expand implementation hook\n    template = _parser.parse_template(template, pattern)\n    return _parser.expand_template(template, match)\n\ndef _subx(pattern, template):\n    # internal: Pattern.sub/subn implementation helper\n    template = _compile_repl(template, pattern)\n    if not template[0] and len(template[1]) == 1:\n        # literal replacement\n        return template[1][0]\n    def filter(match, template=template):\n        return _parser.expand_template(template, match)\n    return filter\n\n# register myself for pickling\n\nimport copyreg\n\ndef _pickle(p):\n    return _compile, (p.pattern, p.flags)\n\ncopyreg.pickle(Pattern, _pickle, _compile)\n\n# --------------------------------------------------------------------\n# experimental stuff (see python-dev discussions for details)\n\nclass Scanner:\n    def __init__(self, lexicon, flags=0):\n        from ._constants import BRANCH, SUBPATTERN\n        if isinstance(flags, RegexFlag):\n            flags = flags.value\n        self.lexicon = lexicon\n        # combine phrases into a compound pattern\n        p = []\n        s = _parser.State()\n        s.flags = flags\n        for phrase, action in lexicon:\n            gid = s.opengroup()\n            p.append(_parser.SubPattern(s, [\n                (SUBPATTERN, (gid, 0, 0, _parser.parse(phrase, flags))),\n                ]))\n            s.closegroup(gid, p[-1])\n        p = _parser.SubPattern(s, [(BRANCH, (None, p))])\n        self.scanner = _compiler.compile(p)\n    def scan(self, string):\n        result = []\n        append = result.append\n        match = self.scanner.scanner(string).match\n        i = 0\n        while True:\n            m = match()\n            if not m:\n                break\n            j = m.end()\n            if i == j:\n                break\n            action = self.lexicon[m.lastindex-1][1]\n            if callable(action):\n                self.match = m\n                action = action(self, m.group())\n            if action is not None:\n                append(action)\n            i = j\n        return result, string[i:]\n", 374], "/home/tim/mambaforge/envs/llm/lib/python3.11/encodings/__init__.py": ["\"\"\" Standard \"encodings\" Package\n\n    Standard Python encoding modules are stored in this package\n    directory.\n\n    Codec modules must have names corresponding to normalized encoding\n    names as defined in the normalize_encoding() function below, e.g.\n    'utf-8' must be implemented by the module 'utf_8.py'.\n\n    Each codec module must export the following interface:\n\n    * getregentry() -> codecs.CodecInfo object\n    The getregentry() API must return a CodecInfo object with encoder, decoder,\n    incrementalencoder, incrementaldecoder, streamwriter and streamreader\n    attributes which adhere to the Python Codec Interface Standard.\n\n    In addition, a module may optionally also define the following\n    APIs which are then used by the package's codec search function:\n\n    * getaliases() -> sequence of encoding name strings to use as aliases\n\n    Alias names returned by getaliases() must be normalized encoding\n    names as defined by normalize_encoding().\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n\"\"\"#\"\n\nimport codecs\nimport sys\nfrom . import aliases\n\n_cache = {}\n_unknown = '--unknown--'\n_import_tail = ['*']\n_aliases = aliases.aliases\n\nclass CodecRegistryError(LookupError, SystemError):\n    pass\n\ndef normalize_encoding(encoding):\n\n    \"\"\" Normalize an encoding name.\n\n        Normalization works as follows: all non-alphanumeric\n        characters except the dot used for Python package names are\n        collapsed and replaced with a single underscore, e.g. '  -;#'\n        becomes '_'. Leading and trailing underscores are removed.\n\n        Note that encoding names should be ASCII only.\n\n    \"\"\"\n    if isinstance(encoding, bytes):\n        encoding = str(encoding, \"ascii\")\n\n    chars = []\n    punct = False\n    for c in encoding:\n        if c.isalnum() or c == '.':\n            if punct and chars:\n                chars.append('_')\n            if c.isascii():\n                chars.append(c)\n            punct = False\n        else:\n            punct = True\n    return ''.join(chars)\n\ndef search_function(encoding):\n\n    # Cache lookup\n    entry = _cache.get(encoding, _unknown)\n    if entry is not _unknown:\n        return entry\n\n    # Import the module:\n    #\n    # First try to find an alias for the normalized encoding\n    # name and lookup the module using the aliased name, then try to\n    # lookup the module using the standard import scheme, i.e. first\n    # try in the encodings package, then at top-level.\n    #\n    norm_encoding = normalize_encoding(encoding)\n    aliased_encoding = _aliases.get(norm_encoding) or \\\n                       _aliases.get(norm_encoding.replace('.', '_'))\n    if aliased_encoding is not None:\n        modnames = [aliased_encoding,\n                    norm_encoding]\n    else:\n        modnames = [norm_encoding]\n    for modname in modnames:\n        if not modname or '.' in modname:\n            continue\n        try:\n            # Import is absolute to prevent the possibly malicious import of a\n            # module with side-effects that is not in the 'encodings' package.\n            mod = __import__('encodings.' + modname, fromlist=_import_tail,\n                             level=0)\n        except ImportError:\n            # ImportError may occur because 'encodings.(modname)' does not exist,\n            # or because it imports a name that does not exist (see mbcs and oem)\n            pass\n        else:\n            break\n    else:\n        mod = None\n\n    try:\n        getregentry = mod.getregentry\n    except AttributeError:\n        # Not a codec module\n        mod = None\n\n    if mod is None:\n        # Cache misses\n        _cache[encoding] = None\n        return None\n\n    # Now ask the module for the registry entry\n    entry = getregentry()\n    if not isinstance(entry, codecs.CodecInfo):\n        if not 4 <= len(entry) <= 7:\n            raise CodecRegistryError('module \"%s\" (%s) failed to register'\n                                     % (mod.__name__, mod.__file__))\n        if not callable(entry[0]) or not callable(entry[1]) or \\\n           (entry[2] is not None and not callable(entry[2])) or \\\n           (entry[3] is not None and not callable(entry[3])) or \\\n           (len(entry) > 4 and entry[4] is not None and not callable(entry[4])) or \\\n           (len(entry) > 5 and entry[5] is not None and not callable(entry[5])):\n            raise CodecRegistryError('incompatible codecs in module \"%s\" (%s)'\n                                     % (mod.__name__, mod.__file__))\n        if len(entry)<7 or entry[6] is None:\n            entry += (None,)*(6-len(entry)) + (mod.__name__.split(\".\", 1)[1],)\n        entry = codecs.CodecInfo(*entry)\n\n    # Cache the codec registry entry\n    _cache[encoding] = entry\n\n    # Register its aliases (without overwriting previously registered\n    # aliases)\n    try:\n        codecaliases = mod.getaliases()\n    except AttributeError:\n        pass\n    else:\n        for alias in codecaliases:\n            if alias not in _aliases:\n                _aliases[alias] = modname\n\n    # Return the registry entry\n    return entry\n\n# Register the search_function in the Python codec registry\ncodecs.register(search_function)\n\nif sys.platform == 'win32':\n    # bpo-671666, bpo-46668: If Python does not implement a codec for current\n    # Windows ANSI code page, use the \"mbcs\" codec instead:\n    # WideCharToMultiByte() and MultiByteToWideChar() functions with CP_ACP.\n    # Python does not support custom code pages.\n    def _alias_mbcs(encoding):\n        try:\n            import _winapi\n            ansi_code_page = \"cp%s\" % _winapi.GetACP()\n            if encoding == ansi_code_page:\n                import encodings.mbcs\n                return encodings.mbcs.getregentry()\n        except ImportError:\n            # Imports may fail while we are shutting down\n            pass\n\n    codecs.register(_alias_mbcs)\n", 174], "/home/tim/mambaforge/envs/llm/lib/python3.11/locale.py": ["\"\"\"Locale support module.\n\nThe module provides low-level access to the C lib's locale APIs and adds high\nlevel number formatting APIs as well as a locale aliasing engine to complement\nthese.\n\nThe aliasing engine includes support for many commonly used locale names and\nmaps them to values suitable for passing to the C lib's setlocale() function. It\nalso includes default encodings for all supported locale names.\n\n\"\"\"\n\nimport sys\nimport encodings\nimport encodings.aliases\nimport re\nimport _collections_abc\nfrom builtins import str as _builtin_str\nimport functools\n\n# Try importing the _locale module.\n#\n# If this fails, fall back on a basic 'C' locale emulation.\n\n# Yuck:  LC_MESSAGES is non-standard:  can't tell whether it exists before\n# trying the import.  So __all__ is also fiddled at the end of the file.\n__all__ = [\"getlocale\", \"getdefaultlocale\", \"getpreferredencoding\", \"Error\",\n           \"setlocale\", \"resetlocale\", \"localeconv\", \"strcoll\", \"strxfrm\",\n           \"str\", \"atof\", \"atoi\", \"format\", \"format_string\", \"currency\",\n           \"normalize\", \"LC_CTYPE\", \"LC_COLLATE\", \"LC_TIME\", \"LC_MONETARY\",\n           \"LC_NUMERIC\", \"LC_ALL\", \"CHAR_MAX\", \"getencoding\"]\n\ndef _strcoll(a,b):\n    \"\"\" strcoll(string,string) -> int.\n        Compares two strings according to the locale.\n    \"\"\"\n    return (a > b) - (a < b)\n\ndef _strxfrm(s):\n    \"\"\" strxfrm(string) -> string.\n        Returns a string that behaves for cmp locale-aware.\n    \"\"\"\n    return s\n\ntry:\n\n    from _locale import *\n\nexcept ImportError:\n\n    # Locale emulation\n\n    CHAR_MAX = 127\n    LC_ALL = 6\n    LC_COLLATE = 3\n    LC_CTYPE = 0\n    LC_MESSAGES = 5\n    LC_MONETARY = 4\n    LC_NUMERIC = 1\n    LC_TIME = 2\n    Error = ValueError\n\n    def localeconv():\n        \"\"\" localeconv() -> dict.\n            Returns numeric and monetary locale-specific parameters.\n        \"\"\"\n        # 'C' locale default values\n        return {'grouping': [127],\n                'currency_symbol': '',\n                'n_sign_posn': 127,\n                'p_cs_precedes': 127,\n                'n_cs_precedes': 127,\n                'mon_grouping': [],\n                'n_sep_by_space': 127,\n                'decimal_point': '.',\n                'negative_sign': '',\n                'positive_sign': '',\n                'p_sep_by_space': 127,\n                'int_curr_symbol': '',\n                'p_sign_posn': 127,\n                'thousands_sep': '',\n                'mon_thousands_sep': '',\n                'frac_digits': 127,\n                'mon_decimal_point': '',\n                'int_frac_digits': 127}\n\n    def setlocale(category, value=None):\n        \"\"\" setlocale(integer,string=None) -> string.\n            Activates/queries locale processing.\n        \"\"\"\n        if value not in (None, '', 'C'):\n            raise Error('_locale emulation only supports \"C\" locale')\n        return 'C'\n\n# These may or may not exist in _locale, so be sure to set them.\nif 'strxfrm' not in globals():\n    strxfrm = _strxfrm\nif 'strcoll' not in globals():\n    strcoll = _strcoll\n\n\n_localeconv = localeconv\n\n# With this dict, you can override some items of localeconv's return value.\n# This is useful for testing purposes.\n_override_localeconv = {}\n\n@functools.wraps(_localeconv)\ndef localeconv():\n    d = _localeconv()\n    if _override_localeconv:\n        d.update(_override_localeconv)\n    return d\n\n\n### Number formatting APIs\n\n# Author: Martin von Loewis\n# improved by Georg Brandl\n\n# Iterate over grouping intervals\ndef _grouping_intervals(grouping):\n    last_interval = None\n    for interval in grouping:\n        # if grouping is -1, we are done\n        if interval == CHAR_MAX:\n            return\n        # 0: re-use last group ad infinitum\n        if interval == 0:\n            if last_interval is None:\n                raise ValueError(\"invalid grouping\")\n            while True:\n                yield last_interval\n        yield interval\n        last_interval = interval\n\n#perform the grouping from right to left\ndef _group(s, monetary=False):\n    conv = localeconv()\n    thousands_sep = conv[monetary and 'mon_thousands_sep' or 'thousands_sep']\n    grouping = conv[monetary and 'mon_grouping' or 'grouping']\n    if not grouping:\n        return (s, 0)\n    if s[-1] == ' ':\n        stripped = s.rstrip()\n        right_spaces = s[len(stripped):]\n        s = stripped\n    else:\n        right_spaces = ''\n    left_spaces = ''\n    groups = []\n    for interval in _grouping_intervals(grouping):\n        if not s or s[-1] not in \"0123456789\":\n            # only non-digit characters remain (sign, spaces)\n            left_spaces = s\n            s = ''\n            break\n        groups.append(s[-interval:])\n        s = s[:-interval]\n    if s:\n        groups.append(s)\n    groups.reverse()\n    return (\n        left_spaces + thousands_sep.join(groups) + right_spaces,\n        len(thousands_sep) * (len(groups) - 1)\n    )\n\n# Strip a given amount of excess padding from the given string\ndef _strip_padding(s, amount):\n    lpos = 0\n    while amount and s[lpos] == ' ':\n        lpos += 1\n        amount -= 1\n    rpos = len(s) - 1\n    while amount and s[rpos] == ' ':\n        rpos -= 1\n        amount -= 1\n    return s[lpos:rpos+1]\n\n_percent_re = re.compile(r'%(?:\\((?P<key>.*?)\\))?'\n                         r'(?P<modifiers>[-#0-9 +*.hlL]*?)[eEfFgGdiouxXcrs%]')\n\ndef _format(percent, value, grouping=False, monetary=False, *additional):\n    if additional:\n        formatted = percent % ((value,) + additional)\n    else:\n        formatted = percent % value\n    if percent[-1] in 'eEfFgGdiu':\n        formatted = _localize(formatted, grouping, monetary)\n    return formatted\n\n# Transform formatted as locale number according to the locale settings\ndef _localize(formatted, grouping=False, monetary=False):\n    # floats and decimal ints need special action!\n    if '.' in formatted:\n        seps = 0\n        parts = formatted.split('.')\n        if grouping:\n            parts[0], seps = _group(parts[0], monetary=monetary)\n        decimal_point = localeconv()[monetary and 'mon_decimal_point'\n                                              or 'decimal_point']\n        formatted = decimal_point.join(parts)\n        if seps:\n            formatted = _strip_padding(formatted, seps)\n    else:\n        seps = 0\n        if grouping:\n            formatted, seps = _group(formatted, monetary=monetary)\n        if seps:\n            formatted = _strip_padding(formatted, seps)\n    return formatted\n\ndef format_string(f, val, grouping=False, monetary=False):\n    \"\"\"Formats a string in the same way that the % formatting would use,\n    but takes the current locale into account.\n\n    Grouping is applied if the third parameter is true.\n    Conversion uses monetary thousands separator and grouping strings if\n    forth parameter monetary is true.\"\"\"\n    percents = list(_percent_re.finditer(f))\n    new_f = _percent_re.sub('%s', f)\n\n    if isinstance(val, _collections_abc.Mapping):\n        new_val = []\n        for perc in percents:\n            if perc.group()[-1]=='%':\n                new_val.append('%')\n            else:\n                new_val.append(_format(perc.group(), val, grouping, monetary))\n    else:\n        if not isinstance(val, tuple):\n            val = (val,)\n        new_val = []\n        i = 0\n        for perc in percents:\n            if perc.group()[-1]=='%':\n                new_val.append('%')\n            else:\n                starcount = perc.group('modifiers').count('*')\n                new_val.append(_format(perc.group(),\n                                      val[i],\n                                      grouping,\n                                      monetary,\n                                      *val[i+1:i+1+starcount]))\n                i += (1 + starcount)\n    val = tuple(new_val)\n\n    return new_f % val\n\ndef format(percent, value, grouping=False, monetary=False, *additional):\n    \"\"\"Deprecated, use format_string instead.\"\"\"\n    import warnings\n    warnings.warn(\n        \"This method will be removed in a future version of Python. \"\n        \"Use 'locale.format_string()' instead.\",\n        DeprecationWarning, stacklevel=2\n    )\n\n    match = _percent_re.match(percent)\n    if not match or len(match.group())!= len(percent):\n        raise ValueError((\"format() must be given exactly one %%char \"\n                         \"format specifier, %s not valid\") % repr(percent))\n    return _format(percent, value, grouping, monetary, *additional)\n\ndef currency(val, symbol=True, grouping=False, international=False):\n    \"\"\"Formats val according to the currency settings\n    in the current locale.\"\"\"\n    conv = localeconv()\n\n    # check for illegal values\n    digits = conv[international and 'int_frac_digits' or 'frac_digits']\n    if digits == 127:\n        raise ValueError(\"Currency formatting is not possible using \"\n                         \"the 'C' locale.\")\n\n    s = _localize(f'{abs(val):.{digits}f}', grouping, monetary=True)\n    # '<' and '>' are markers if the sign must be inserted between symbol and value\n    s = '<' + s + '>'\n\n    if symbol:\n        smb = conv[international and 'int_curr_symbol' or 'currency_symbol']\n        precedes = conv[val<0 and 'n_cs_precedes' or 'p_cs_precedes']\n        separated = conv[val<0 and 'n_sep_by_space' or 'p_sep_by_space']\n\n        if precedes:\n            s = smb + (separated and ' ' or '') + s\n        else:\n            if international and smb[-1] == ' ':\n                smb = smb[:-1]\n            s = s + (separated and ' ' or '') + smb\n\n    sign_pos = conv[val<0 and 'n_sign_posn' or 'p_sign_posn']\n    sign = conv[val<0 and 'negative_sign' or 'positive_sign']\n\n    if sign_pos == 0:\n        s = '(' + s + ')'\n    elif sign_pos == 1:\n        s = sign + s\n    elif sign_pos == 2:\n        s = s + sign\n    elif sign_pos == 3:\n        s = s.replace('<', sign)\n    elif sign_pos == 4:\n        s = s.replace('>', sign)\n    else:\n        # the default if nothing specified;\n        # this should be the most fitting sign position\n        s = sign + s\n\n    return s.replace('<', '').replace('>', '')\n\ndef str(val):\n    \"\"\"Convert float to string, taking the locale into account.\"\"\"\n    return _format(\"%.12g\", val)\n\ndef delocalize(string):\n    \"Parses a string as a normalized number according to the locale settings.\"\n\n    conv = localeconv()\n\n    #First, get rid of the grouping\n    ts = conv['thousands_sep']\n    if ts:\n        string = string.replace(ts, '')\n\n    #next, replace the decimal point with a dot\n    dd = conv['decimal_point']\n    if dd:\n        string = string.replace(dd, '.')\n    return string\n\ndef localize(string, grouping=False, monetary=False):\n    \"\"\"Parses a string as locale number according to the locale settings.\"\"\"\n    return _localize(string, grouping, monetary)\n\ndef atof(string, func=float):\n    \"Parses a string as a float according to the locale settings.\"\n    return func(delocalize(string))\n\ndef atoi(string):\n    \"Converts a string to an integer according to the locale settings.\"\n    return int(delocalize(string))\n\ndef _test():\n    setlocale(LC_ALL, \"\")\n    #do grouping\n    s1 = format_string(\"%d\", 123456789,1)\n    print(s1, \"is\", atoi(s1))\n    #standard formatting\n    s1 = str(3.14)\n    print(s1, \"is\", atof(s1))\n\n### Locale name aliasing engine\n\n# Author: Marc-Andre Lemburg, mal@lemburg.com\n# Various tweaks by Fredrik Lundh <fredrik@pythonware.com>\n\n# store away the low-level version of setlocale (it's\n# overridden below)\n_setlocale = setlocale\n\ndef _replace_encoding(code, encoding):\n    if '.' in code:\n        langname = code[:code.index('.')]\n    else:\n        langname = code\n    # Convert the encoding to a C lib compatible encoding string\n    norm_encoding = encodings.normalize_encoding(encoding)\n    #print('norm encoding: %r' % norm_encoding)\n    norm_encoding = encodings.aliases.aliases.get(norm_encoding.lower(),\n                                                  norm_encoding)\n    #print('aliased encoding: %r' % norm_encoding)\n    encoding = norm_encoding\n    norm_encoding = norm_encoding.lower()\n    if norm_encoding in locale_encoding_alias:\n        encoding = locale_encoding_alias[norm_encoding]\n    else:\n        norm_encoding = norm_encoding.replace('_', '')\n        norm_encoding = norm_encoding.replace('-', '')\n        if norm_encoding in locale_encoding_alias:\n            encoding = locale_encoding_alias[norm_encoding]\n    #print('found encoding %r' % encoding)\n    return langname + '.' + encoding\n\ndef _append_modifier(code, modifier):\n    if modifier == 'euro':\n        if '.' not in code:\n            return code + '.ISO8859-15'\n        _, _, encoding = code.partition('.')\n        if encoding in ('ISO8859-15', 'UTF-8'):\n            return code\n        if encoding == 'ISO8859-1':\n            return _replace_encoding(code, 'ISO8859-15')\n    return code + '@' + modifier\n\ndef normalize(localename):\n\n    \"\"\" Returns a normalized locale code for the given locale\n        name.\n\n        The returned locale code is formatted for use with\n        setlocale().\n\n        If normalization fails, the original name is returned\n        unchanged.\n\n        If the given encoding is not known, the function defaults to\n        the default encoding for the locale code just like setlocale()\n        does.\n\n    \"\"\"\n    # Normalize the locale name and extract the encoding and modifier\n    code = localename.lower()\n    if ':' in code:\n        # ':' is sometimes used as encoding delimiter.\n        code = code.replace(':', '.')\n    if '@' in code:\n        code, modifier = code.split('@', 1)\n    else:\n        modifier = ''\n    if '.' in code:\n        langname, encoding = code.split('.')[:2]\n    else:\n        langname = code\n        encoding = ''\n\n    # First lookup: fullname (possibly with encoding and modifier)\n    lang_enc = langname\n    if encoding:\n        norm_encoding = encoding.replace('-', '')\n        norm_encoding = norm_encoding.replace('_', '')\n        lang_enc += '.' + norm_encoding\n    lookup_name = lang_enc\n    if modifier:\n        lookup_name += '@' + modifier\n    code = locale_alias.get(lookup_name, None)\n    if code is not None:\n        return code\n    #print('first lookup failed')\n\n    if modifier:\n        # Second try: fullname without modifier (possibly with encoding)\n        code = locale_alias.get(lang_enc, None)\n        if code is not None:\n            #print('lookup without modifier succeeded')\n            if '@' not in code:\n                return _append_modifier(code, modifier)\n            if code.split('@', 1)[1].lower() == modifier:\n                return code\n        #print('second lookup failed')\n\n    if encoding:\n        # Third try: langname (without encoding, possibly with modifier)\n        lookup_name = langname\n        if modifier:\n            lookup_name += '@' + modifier\n        code = locale_alias.get(lookup_name, None)\n        if code is not None:\n            #print('lookup without encoding succeeded')\n            if '@' not in code:\n                return _replace_encoding(code, encoding)\n            code, modifier = code.split('@', 1)\n            return _replace_encoding(code, encoding) + '@' + modifier\n\n        if modifier:\n            # Fourth try: langname (without encoding and modifier)\n            code = locale_alias.get(langname, None)\n            if code is not None:\n                #print('lookup without modifier and encoding succeeded')\n                if '@' not in code:\n                    code = _replace_encoding(code, encoding)\n                    return _append_modifier(code, modifier)\n                code, defmod = code.split('@', 1)\n                if defmod.lower() == modifier:\n                    return _replace_encoding(code, encoding) + '@' + defmod\n\n    return localename\n\ndef _parse_localename(localename):\n\n    \"\"\" Parses the locale code for localename and returns the\n        result as tuple (language code, encoding).\n\n        The localename is normalized and passed through the locale\n        alias engine. A ValueError is raised in case the locale name\n        cannot be parsed.\n\n        The language code corresponds to RFC 1766.  code and encoding\n        can be None in case the values cannot be determined or are\n        unknown to this implementation.\n\n    \"\"\"\n    code = normalize(localename)\n    if '@' in code:\n        # Deal with locale modifiers\n        code, modifier = code.split('@', 1)\n        if modifier == 'euro' and '.' not in code:\n            # Assume Latin-9 for @euro locales. This is bogus,\n            # since some systems may use other encodings for these\n            # locales. Also, we ignore other modifiers.\n            return code, 'iso-8859-15'\n\n    if '.' in code:\n        return tuple(code.split('.')[:2])\n    elif code == 'C':\n        return None, None\n    elif code == 'UTF-8':\n        # On macOS \"LC_CTYPE=UTF-8\" is a valid locale setting\n        # for getting UTF-8 handling for text.\n        return None, 'UTF-8'\n    raise ValueError('unknown locale: %s' % localename)\n\ndef _build_localename(localetuple):\n\n    \"\"\" Builds a locale code from the given tuple (language code,\n        encoding).\n\n        No aliasing or normalizing takes place.\n\n    \"\"\"\n    try:\n        language, encoding = localetuple\n\n        if language is None:\n            language = 'C'\n        if encoding is None:\n            return language\n        else:\n            return language + '.' + encoding\n    except (TypeError, ValueError):\n        raise TypeError('Locale must be None, a string, or an iterable of '\n                        'two strings -- language code, encoding.') from None\n\ndef getdefaultlocale(envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')):\n\n    \"\"\" Tries to determine the default locale settings and returns\n        them as tuple (language code, encoding).\n\n        According to POSIX, a program which has not called\n        setlocale(LC_ALL, \"\") runs using the portable 'C' locale.\n        Calling setlocale(LC_ALL, \"\") lets it use the default locale as\n        defined by the LANG variable. Since we don't want to interfere\n        with the current locale setting we thus emulate the behavior\n        in the way described above.\n\n        To maintain compatibility with other platforms, not only the\n        LANG variable is tested, but a list of variables given as\n        envvars parameter. The first found to be defined will be\n        used. envvars defaults to the search path used in GNU gettext;\n        it must always contain the variable name 'LANG'.\n\n        Except for the code 'C', the language code corresponds to RFC\n        1766.  code and encoding can be None in case the values cannot\n        be determined.\n\n    \"\"\"\n\n    import warnings\n    warnings._deprecated(\n        \"locale.getdefaultlocale\",\n        \"{name!r} is deprecated and slated for removal in Python {remove}. \"\n        \"Use setlocale(), getencoding() and getlocale() instead.\",\n        remove=(3, 15))\n\n    try:\n        # check if it's supported by the _locale module\n        import _locale\n        code, encoding = _locale._getdefaultlocale()\n    except (ImportError, AttributeError):\n        pass\n    else:\n        # make sure the code/encoding values are valid\n        if sys.platform == \"win32\" and code and code[:2] == \"0x\":\n            # map windows language identifier to language name\n            code = windows_locale.get(int(code, 0))\n        # ...add other platform-specific processing here, if\n        # necessary...\n        return code, encoding\n\n    # fall back on POSIX behaviour\n    import os\n    lookup = os.environ.get\n    for variable in envvars:\n        localename = lookup(variable,None)\n        if localename:\n            if variable == 'LANGUAGE':\n                localename = localename.split(':')[0]\n            break\n    else:\n        localename = 'C'\n    return _parse_localename(localename)\n\n\ndef getlocale(category=LC_CTYPE):\n\n    \"\"\" Returns the current setting for the given locale category as\n        tuple (language code, encoding).\n\n        category may be one of the LC_* value except LC_ALL. It\n        defaults to LC_CTYPE.\n\n        Except for the code 'C', the language code corresponds to RFC\n        1766.  code and encoding can be None in case the values cannot\n        be determined.\n\n    \"\"\"\n    localename = _setlocale(category)\n    if category == LC_ALL and ';' in localename:\n        raise TypeError('category LC_ALL is not supported')\n    return _parse_localename(localename)\n\ndef setlocale(category, locale=None):\n\n    \"\"\" Set the locale for the given category.  The locale can be\n        a string, an iterable of two strings (language code and encoding),\n        or None.\n\n        Iterables are converted to strings using the locale aliasing\n        engine.  Locale strings are passed directly to the C lib.\n\n        category may be given as one of the LC_* values.\n\n    \"\"\"\n    if locale and not isinstance(locale, _builtin_str):\n        # convert to string\n        locale = normalize(_build_localename(locale))\n    return _setlocale(category, locale)\n\ndef resetlocale(category=LC_ALL):\n\n    \"\"\" Sets the locale for category to the default setting.\n\n        The default setting is determined by calling\n        getdefaultlocale(). category defaults to LC_ALL.\n\n    \"\"\"\n    import warnings\n    warnings.warn(\n        'Use locale.setlocale(locale.LC_ALL, \"\") instead',\n        DeprecationWarning, stacklevel=2\n    )\n\n    with warnings.catch_warnings():\n        warnings.simplefilter('ignore', category=DeprecationWarning)\n        loc = getdefaultlocale()\n\n    _setlocale(category, _build_localename(loc))\n\n\ntry:\n    from _locale import getencoding\nexcept ImportError:\n    def getencoding():\n        if hasattr(sys, 'getandroidapilevel'):\n            # On Android langinfo.h and CODESET are missing, and UTF-8 is\n            # always used in mbstowcs() and wcstombs().\n            return 'utf-8'\n        encoding = getdefaultlocale()[1]\n        if encoding is None:\n            # LANG not set, default to UTF-8\n            encoding = 'utf-8'\n        return encoding\n\ntry:\n    CODESET\nexcept NameError:\n    def getpreferredencoding(do_setlocale=True):\n        \"\"\"Return the charset that the user is likely using.\"\"\"\n        if sys.flags.warn_default_encoding:\n            import warnings\n            warnings.warn(\n                \"UTF-8 Mode affects locale.getpreferredencoding(). Consider locale.getencoding() instead.\",\n                EncodingWarning, 2)\n        if sys.flags.utf8_mode:\n            return 'utf-8'\n        return getencoding()\nelse:\n    # On Unix, if CODESET is available, use that.\n    def getpreferredencoding(do_setlocale=True):\n        \"\"\"Return the charset that the user is likely using,\n        according to the system configuration.\"\"\"\n\n        if sys.flags.warn_default_encoding:\n            import warnings\n            warnings.warn(\n                \"UTF-8 Mode affects locale.getpreferredencoding(). Consider locale.getencoding() instead.\",\n                EncodingWarning, 2)\n        if sys.flags.utf8_mode:\n            return 'utf-8'\n\n        if not do_setlocale:\n            return getencoding()\n\n        old_loc = setlocale(LC_CTYPE)\n        try:\n            try:\n                setlocale(LC_CTYPE, \"\")\n            except Error:\n                pass\n            return getencoding()\n        finally:\n            setlocale(LC_CTYPE, old_loc)\n\n\n### Database\n#\n# The following data was extracted from the locale.alias file which\n# comes with X11 and then hand edited removing the explicit encoding\n# definitions and adding some more aliases. The file is usually\n# available as /usr/lib/X11/locale/locale.alias.\n#\n\n#\n# The local_encoding_alias table maps lowercase encoding alias names\n# to C locale encoding names (case-sensitive). Note that normalize()\n# first looks up the encoding in the encodings.aliases dictionary and\n# then applies this mapping to find the correct C lib name for the\n# encoding.\n#\nlocale_encoding_alias = {\n\n    # Mappings for non-standard encoding names used in locale names\n    '437':                          'C',\n    'c':                            'C',\n    'en':                           'ISO8859-1',\n    'jis':                          'JIS7',\n    'jis7':                         'JIS7',\n    'ajec':                         'eucJP',\n    'koi8c':                        'KOI8-C',\n    'microsoftcp1251':              'CP1251',\n    'microsoftcp1255':              'CP1255',\n    'microsoftcp1256':              'CP1256',\n    '88591':                        'ISO8859-1',\n    '88592':                        'ISO8859-2',\n    '88595':                        'ISO8859-5',\n    '885915':                       'ISO8859-15',\n\n    # Mappings from Python codec names to C lib encoding names\n    'ascii':                        'ISO8859-1',\n    'latin_1':                      'ISO8859-1',\n    'iso8859_1':                    'ISO8859-1',\n    'iso8859_10':                   'ISO8859-10',\n    'iso8859_11':                   'ISO8859-11',\n    'iso8859_13':                   'ISO8859-13',\n    'iso8859_14':                   'ISO8859-14',\n    'iso8859_15':                   'ISO8859-15',\n    'iso8859_16':                   'ISO8859-16',\n    'iso8859_2':                    'ISO8859-2',\n    'iso8859_3':                    'ISO8859-3',\n    'iso8859_4':                    'ISO8859-4',\n    'iso8859_5':                    'ISO8859-5',\n    'iso8859_6':                    'ISO8859-6',\n    'iso8859_7':                    'ISO8859-7',\n    'iso8859_8':                    'ISO8859-8',\n    'iso8859_9':                    'ISO8859-9',\n    'iso2022_jp':                   'JIS7',\n    'shift_jis':                    'SJIS',\n    'tactis':                       'TACTIS',\n    'euc_jp':                       'eucJP',\n    'euc_kr':                       'eucKR',\n    'utf_8':                        'UTF-8',\n    'koi8_r':                       'KOI8-R',\n    'koi8_t':                       'KOI8-T',\n    'koi8_u':                       'KOI8-U',\n    'kz1048':                       'RK1048',\n    'cp1251':                       'CP1251',\n    'cp1255':                       'CP1255',\n    'cp1256':                       'CP1256',\n\n    # XXX This list is still incomplete. If you know more\n    # mappings, please file a bug report. Thanks.\n}\n\nfor k, v in sorted(locale_encoding_alias.items()):\n    k = k.replace('_', '')\n    locale_encoding_alias.setdefault(k, v)\ndel k, v\n\n#\n# The locale_alias table maps lowercase alias names to C locale names\n# (case-sensitive). Encodings are always separated from the locale\n# name using a dot ('.'); they should only be given in case the\n# language name is needed to interpret the given encoding alias\n# correctly (CJK codes often have this need).\n#\n# Note that the normalize() function which uses this tables\n# removes '_' and '-' characters from the encoding part of the\n# locale name before doing the lookup. This saves a lot of\n# space in the table.\n#\n# MAL 2004-12-10:\n# Updated alias mapping to most recent locale.alias file\n# from X.org distribution using makelocalealias.py.\n#\n# These are the differences compared to the old mapping (Python 2.4\n# and older):\n#\n#    updated 'bg' -> 'bg_BG.ISO8859-5' to 'bg_BG.CP1251'\n#    updated 'bg_bg' -> 'bg_BG.ISO8859-5' to 'bg_BG.CP1251'\n#    updated 'bulgarian' -> 'bg_BG.ISO8859-5' to 'bg_BG.CP1251'\n#    updated 'cz' -> 'cz_CZ.ISO8859-2' to 'cs_CZ.ISO8859-2'\n#    updated 'cz_cz' -> 'cz_CZ.ISO8859-2' to 'cs_CZ.ISO8859-2'\n#    updated 'czech' -> 'cs_CS.ISO8859-2' to 'cs_CZ.ISO8859-2'\n#    updated 'dutch' -> 'nl_BE.ISO8859-1' to 'nl_NL.ISO8859-1'\n#    updated 'et' -> 'et_EE.ISO8859-4' to 'et_EE.ISO8859-15'\n#    updated 'et_ee' -> 'et_EE.ISO8859-4' to 'et_EE.ISO8859-15'\n#    updated 'fi' -> 'fi_FI.ISO8859-1' to 'fi_FI.ISO8859-15'\n#    updated 'fi_fi' -> 'fi_FI.ISO8859-1' to 'fi_FI.ISO8859-15'\n#    updated 'iw' -> 'iw_IL.ISO8859-8' to 'he_IL.ISO8859-8'\n#    updated 'iw_il' -> 'iw_IL.ISO8859-8' to 'he_IL.ISO8859-8'\n#    updated 'japanese' -> 'ja_JP.SJIS' to 'ja_JP.eucJP'\n#    updated 'lt' -> 'lt_LT.ISO8859-4' to 'lt_LT.ISO8859-13'\n#    updated 'lv' -> 'lv_LV.ISO8859-4' to 'lv_LV.ISO8859-13'\n#    updated 'sl' -> 'sl_CS.ISO8859-2' to 'sl_SI.ISO8859-2'\n#    updated 'slovene' -> 'sl_CS.ISO8859-2' to 'sl_SI.ISO8859-2'\n#    updated 'th_th' -> 'th_TH.TACTIS' to 'th_TH.ISO8859-11'\n#    updated 'zh_cn' -> 'zh_CN.eucCN' to 'zh_CN.gb2312'\n#    updated 'zh_cn.big5' -> 'zh_TW.eucTW' to 'zh_TW.big5'\n#    updated 'zh_tw' -> 'zh_TW.eucTW' to 'zh_TW.big5'\n#\n# MAL 2008-05-30:\n# Updated alias mapping to most recent locale.alias file\n# from X.org distribution using makelocalealias.py.\n#\n# These are the differences compared to the old mapping (Python 2.5\n# and older):\n#\n#    updated 'cs_cs.iso88592' -> 'cs_CZ.ISO8859-2' to 'cs_CS.ISO8859-2'\n#    updated 'serbocroatian' -> 'sh_YU.ISO8859-2' to 'sr_CS.ISO8859-2'\n#    updated 'sh' -> 'sh_YU.ISO8859-2' to 'sr_CS.ISO8859-2'\n#    updated 'sh_hr.iso88592' -> 'sh_HR.ISO8859-2' to 'hr_HR.ISO8859-2'\n#    updated 'sh_sp' -> 'sh_YU.ISO8859-2' to 'sr_CS.ISO8859-2'\n#    updated 'sh_yu' -> 'sh_YU.ISO8859-2' to 'sr_CS.ISO8859-2'\n#    updated 'sp' -> 'sp_YU.ISO8859-5' to 'sr_CS.ISO8859-5'\n#    updated 'sp_yu' -> 'sp_YU.ISO8859-5' to 'sr_CS.ISO8859-5'\n#    updated 'sr' -> 'sr_YU.ISO8859-5' to 'sr_CS.ISO8859-5'\n#    updated 'sr@cyrillic' -> 'sr_YU.ISO8859-5' to 'sr_CS.ISO8859-5'\n#    updated 'sr_sp' -> 'sr_SP.ISO8859-2' to 'sr_CS.ISO8859-2'\n#    updated 'sr_yu' -> 'sr_YU.ISO8859-5' to 'sr_CS.ISO8859-5'\n#    updated 'sr_yu.cp1251@cyrillic' -> 'sr_YU.CP1251' to 'sr_CS.CP1251'\n#    updated 'sr_yu.iso88592' -> 'sr_YU.ISO8859-2' to 'sr_CS.ISO8859-2'\n#    updated 'sr_yu.iso88595' -> 'sr_YU.ISO8859-5' to 'sr_CS.ISO8859-5'\n#    updated 'sr_yu.iso88595@cyrillic' -> 'sr_YU.ISO8859-5' to 'sr_CS.ISO8859-5'\n#    updated 'sr_yu.microsoftcp1251@cyrillic' -> 'sr_YU.CP1251' to 'sr_CS.CP1251'\n#    updated 'sr_yu.utf8@cyrillic' -> 'sr_YU.UTF-8' to 'sr_CS.UTF-8'\n#    updated 'sr_yu@cyrillic' -> 'sr_YU.ISO8859-5' to 'sr_CS.ISO8859-5'\n#\n# AP 2010-04-12:\n# Updated alias mapping to most recent locale.alias file\n# from X.org distribution using makelocalealias.py.\n#\n# These are the differences compared to the old mapping (Python 2.6.5\n# and older):\n#\n#    updated 'ru' -> 'ru_RU.ISO8859-5' to 'ru_RU.UTF-8'\n#    updated 'ru_ru' -> 'ru_RU.ISO8859-5' to 'ru_RU.UTF-8'\n#    updated 'serbocroatian' -> 'sr_CS.ISO8859-2' to 'sr_RS.UTF-8@latin'\n#    updated 'sh' -> 'sr_CS.ISO8859-2' to 'sr_RS.UTF-8@latin'\n#    updated 'sh_yu' -> 'sr_CS.ISO8859-2' to 'sr_RS.UTF-8@latin'\n#    updated 'sr' -> 'sr_CS.ISO8859-5' to 'sr_RS.UTF-8'\n#    updated 'sr@cyrillic' -> 'sr_CS.ISO8859-5' to 'sr_RS.UTF-8'\n#    updated 'sr@latn' -> 'sr_CS.ISO8859-2' to 'sr_RS.UTF-8@latin'\n#    updated 'sr_cs.utf8@latn' -> 'sr_CS.UTF-8' to 'sr_RS.UTF-8@latin'\n#    updated 'sr_cs@latn' -> 'sr_CS.ISO8859-2' to 'sr_RS.UTF-8@latin'\n#    updated 'sr_yu' -> 'sr_CS.ISO8859-5' to 'sr_RS.UTF-8@latin'\n#    updated 'sr_yu.utf8@cyrillic' -> 'sr_CS.UTF-8' to 'sr_RS.UTF-8'\n#    updated 'sr_yu@cyrillic' -> 'sr_CS.ISO8859-5' to 'sr_RS.UTF-8'\n#\n# SS 2013-12-20:\n# Updated alias mapping to most recent locale.alias file\n# from X.org distribution using makelocalealias.py.\n#\n# These are the differences compared to the old mapping (Python 3.3.3\n# and older):\n#\n#    updated 'a3' -> 'a3_AZ.KOI8-C' to 'az_AZ.KOI8-C'\n#    updated 'a3_az' -> 'a3_AZ.KOI8-C' to 'az_AZ.KOI8-C'\n#    updated 'a3_az.koi8c' -> 'a3_AZ.KOI8-C' to 'az_AZ.KOI8-C'\n#    updated 'cs_cs.iso88592' -> 'cs_CS.ISO8859-2' to 'cs_CZ.ISO8859-2'\n#    updated 'hebrew' -> 'iw_IL.ISO8859-8' to 'he_IL.ISO8859-8'\n#    updated 'hebrew.iso88598' -> 'iw_IL.ISO8859-8' to 'he_IL.ISO8859-8'\n#    updated 'sd' -> 'sd_IN@devanagari.UTF-8' to 'sd_IN.UTF-8'\n#    updated 'sr@latn' -> 'sr_RS.UTF-8@latin' to 'sr_CS.UTF-8@latin'\n#    updated 'sr_cs' -> 'sr_RS.UTF-8' to 'sr_CS.UTF-8'\n#    updated 'sr_cs.utf8@latn' -> 'sr_RS.UTF-8@latin' to 'sr_CS.UTF-8@latin'\n#    updated 'sr_cs@latn' -> 'sr_RS.UTF-8@latin' to 'sr_CS.UTF-8@latin'\n#\n# SS 2014-10-01:\n# Updated alias mapping with glibc 2.19 supported locales.\n#\n# SS 2018-05-05:\n# Updated alias mapping with glibc 2.27 supported locales.\n#\n# These are the differences compared to the old mapping (Python 3.6.5\n# and older):\n#\n#    updated 'ca_es@valencia' -> 'ca_ES.ISO8859-15@valencia' to 'ca_ES.UTF-8@valencia'\n#    updated 'kk_kz' -> 'kk_KZ.RK1048' to 'kk_KZ.ptcp154'\n#    updated 'russian' -> 'ru_RU.ISO8859-5' to 'ru_RU.KOI8-R'\n\nlocale_alias = {\n    'a3':                                   'az_AZ.KOI8-C',\n    'a3_az':                                'az_AZ.KOI8-C',\n    'a3_az.koic':                           'az_AZ.KOI8-C',\n    'aa_dj':                                'aa_DJ.ISO8859-1',\n    'aa_er':                                'aa_ER.UTF-8',\n    'aa_et':                                'aa_ET.UTF-8',\n    'af':                                   'af_ZA.ISO8859-1',\n    'af_za':                                'af_ZA.ISO8859-1',\n    'agr_pe':                               'agr_PE.UTF-8',\n    'ak_gh':                                'ak_GH.UTF-8',\n    'am':                                   'am_ET.UTF-8',\n    'am_et':                                'am_ET.UTF-8',\n    'american':                             'en_US.ISO8859-1',\n    'an_es':                                'an_ES.ISO8859-15',\n    'anp_in':                               'anp_IN.UTF-8',\n    'ar':                                   'ar_AA.ISO8859-6',\n    'ar_aa':                                'ar_AA.ISO8859-6',\n    'ar_ae':                                'ar_AE.ISO8859-6',\n    'ar_bh':                                'ar_BH.ISO8859-6',\n    'ar_dz':                                'ar_DZ.ISO8859-6',\n    'ar_eg':                                'ar_EG.ISO8859-6',\n    'ar_in':                                'ar_IN.UTF-8',\n    'ar_iq':                                'ar_IQ.ISO8859-6',\n    'ar_jo':                                'ar_JO.ISO8859-6',\n    'ar_kw':                                'ar_KW.ISO8859-6',\n    'ar_lb':                                'ar_LB.ISO8859-6',\n    'ar_ly':                                'ar_LY.ISO8859-6',\n    'ar_ma':                                'ar_MA.ISO8859-6',\n    'ar_om':                                'ar_OM.ISO8859-6',\n    'ar_qa':                                'ar_QA.ISO8859-6',\n    'ar_sa':                                'ar_SA.ISO8859-6',\n    'ar_sd':                                'ar_SD.ISO8859-6',\n    'ar_ss':                                'ar_SS.UTF-8',\n    'ar_sy':                                'ar_SY.ISO8859-6',\n    'ar_tn':                                'ar_TN.ISO8859-6',\n    'ar_ye':                                'ar_YE.ISO8859-6',\n    'arabic':                               'ar_AA.ISO8859-6',\n    'as':                                   'as_IN.UTF-8',\n    'as_in':                                'as_IN.UTF-8',\n    'ast_es':                               'ast_ES.ISO8859-15',\n    'ayc_pe':                               'ayc_PE.UTF-8',\n    'az':                                   'az_AZ.ISO8859-9E',\n    'az_az':                                'az_AZ.ISO8859-9E',\n    'az_az.iso88599e':                      'az_AZ.ISO8859-9E',\n    'az_ir':                                'az_IR.UTF-8',\n    'be':                                   'be_BY.CP1251',\n    'be@latin':                             'be_BY.UTF-8@latin',\n    'be_bg.utf8':                           'bg_BG.UTF-8',\n    'be_by':                                'be_BY.CP1251',\n    'be_by@latin':                          'be_BY.UTF-8@latin',\n    'bem_zm':                               'bem_ZM.UTF-8',\n    'ber_dz':                               'ber_DZ.UTF-8',\n    'ber_ma':                               'ber_MA.UTF-8',\n    'bg':                                   'bg_BG.CP1251',\n    'bg_bg':                                'bg_BG.CP1251',\n    'bhb_in.utf8':                          'bhb_IN.UTF-8',\n    'bho_in':                               'bho_IN.UTF-8',\n    'bho_np':                               'bho_NP.UTF-8',\n    'bi_vu':                                'bi_VU.UTF-8',\n    'bn_bd':                                'bn_BD.UTF-8',\n    'bn_in':                                'bn_IN.UTF-8',\n    'bo_cn':                                'bo_CN.UTF-8',\n    'bo_in':                                'bo_IN.UTF-8',\n    'bokmal':                               'nb_NO.ISO8859-1',\n    'bokm\\xe5l':                            'nb_NO.ISO8859-1',\n    'br':                                   'br_FR.ISO8859-1',\n    'br_fr':                                'br_FR.ISO8859-1',\n    'brx_in':                               'brx_IN.UTF-8',\n    'bs':                                   'bs_BA.ISO8859-2',\n    'bs_ba':                                'bs_BA.ISO8859-2',\n    'bulgarian':                            'bg_BG.CP1251',\n    'byn_er':                               'byn_ER.UTF-8',\n    'c':                                    'C',\n    'c-french':                             'fr_CA.ISO8859-1',\n    'c.ascii':                              'C',\n    'c.en':                                 'C',\n    'c.iso88591':                           'en_US.ISO8859-1',\n    'c.utf8':                               'en_US.UTF-8',\n    'c_c':                                  'C',\n    'c_c.c':                                'C',\n    'ca':                                   'ca_ES.ISO8859-1',\n    'ca_ad':                                'ca_AD.ISO8859-1',\n    'ca_es':                                'ca_ES.ISO8859-1',\n    'ca_es@valencia':                       'ca_ES.UTF-8@valencia',\n    'ca_fr':                                'ca_FR.ISO8859-1',\n    'ca_it':                                'ca_IT.ISO8859-1',\n    'catalan':                              'ca_ES.ISO8859-1',\n    'ce_ru':                                'ce_RU.UTF-8',\n    'cextend':                              'en_US.ISO8859-1',\n    'chinese-s':                            'zh_CN.eucCN',\n    'chinese-t':                            'zh_TW.eucTW',\n    'chr_us':                               'chr_US.UTF-8',\n    'ckb_iq':                               'ckb_IQ.UTF-8',\n    'cmn_tw':                               'cmn_TW.UTF-8',\n    'crh_ua':                               'crh_UA.UTF-8',\n    'croatian':                             'hr_HR.ISO8859-2',\n    'cs':                                   'cs_CZ.ISO8859-2',\n    'cs_cs':                                'cs_CZ.ISO8859-2',\n    'cs_cz':                                'cs_CZ.ISO8859-2',\n    'csb_pl':                               'csb_PL.UTF-8',\n    'cv_ru':                                'cv_RU.UTF-8',\n    'cy':                                   'cy_GB.ISO8859-1',\n    'cy_gb':                                'cy_GB.ISO8859-1',\n    'cz':                                   'cs_CZ.ISO8859-2',\n    'cz_cz':                                'cs_CZ.ISO8859-2',\n    'czech':                                'cs_CZ.ISO8859-2',\n    'da':                                   'da_DK.ISO8859-1',\n    'da_dk':                                'da_DK.ISO8859-1',\n    'danish':                               'da_DK.ISO8859-1',\n    'dansk':                                'da_DK.ISO8859-1',\n    'de':                                   'de_DE.ISO8859-1',\n    'de_at':                                'de_AT.ISO8859-1',\n    'de_be':                                'de_BE.ISO8859-1',\n    'de_ch':                                'de_CH.ISO8859-1',\n    'de_de':                                'de_DE.ISO8859-1',\n    'de_it':                                'de_IT.ISO8859-1',\n    'de_li.utf8':                           'de_LI.UTF-8',\n    'de_lu':                                'de_LU.ISO8859-1',\n    'deutsch':                              'de_DE.ISO8859-1',\n    'doi_in':                               'doi_IN.UTF-8',\n    'dutch':                                'nl_NL.ISO8859-1',\n    'dutch.iso88591':                       'nl_BE.ISO8859-1',\n    'dv_mv':                                'dv_MV.UTF-8',\n    'dz_bt':                                'dz_BT.UTF-8',\n    'ee':                                   'ee_EE.ISO8859-4',\n    'ee_ee':                                'ee_EE.ISO8859-4',\n    'eesti':                                'et_EE.ISO8859-1',\n    'el':                                   'el_GR.ISO8859-7',\n    'el_cy':                                'el_CY.ISO8859-7',\n    'el_gr':                                'el_GR.ISO8859-7',\n    'el_gr@euro':                           'el_GR.ISO8859-15',\n    'en':                                   'en_US.ISO8859-1',\n    'en_ag':                                'en_AG.UTF-8',\n    'en_au':                                'en_AU.ISO8859-1',\n    'en_be':                                'en_BE.ISO8859-1',\n    'en_bw':                                'en_BW.ISO8859-1',\n    'en_ca':                                'en_CA.ISO8859-1',\n    'en_dk':                                'en_DK.ISO8859-1',\n    'en_dl.utf8':                           'en_DL.UTF-8',\n    'en_gb':                                'en_GB.ISO8859-1',\n    'en_hk':                                'en_HK.ISO8859-1',\n    'en_ie':                                'en_IE.ISO8859-1',\n    'en_il':                                'en_IL.UTF-8',\n    'en_in':                                'en_IN.ISO8859-1',\n    'en_ng':                                'en_NG.UTF-8',\n    'en_nz':                                'en_NZ.ISO8859-1',\n    'en_ph':                                'en_PH.ISO8859-1',\n    'en_sc.utf8':                           'en_SC.UTF-8',\n    'en_sg':                                'en_SG.ISO8859-1',\n    'en_uk':                                'en_GB.ISO8859-1',\n    'en_us':                                'en_US.ISO8859-1',\n    'en_us@euro@euro':                      'en_US.ISO8859-15',\n    'en_za':                                'en_ZA.ISO8859-1',\n    'en_zm':                                'en_ZM.UTF-8',\n    'en_zw':                                'en_ZW.ISO8859-1',\n    'en_zw.utf8':                           'en_ZS.UTF-8',\n    'eng_gb':                               'en_GB.ISO8859-1',\n    'english':                              'en_EN.ISO8859-1',\n    'english.iso88591':                     'en_US.ISO8859-1',\n    'english_uk':                           'en_GB.ISO8859-1',\n    'english_united-states':                'en_US.ISO8859-1',\n    'english_united-states.437':            'C',\n    'english_us':                           'en_US.ISO8859-1',\n    'eo':                                   'eo_XX.ISO8859-3',\n    'eo.utf8':                              'eo.UTF-8',\n    'eo_eo':                                'eo_EO.ISO8859-3',\n    'eo_us.utf8':                           'eo_US.UTF-8',\n    'eo_xx':                                'eo_XX.ISO8859-3',\n    'es':                                   'es_ES.ISO8859-1',\n    'es_ar':                                'es_AR.ISO8859-1',\n    'es_bo':                                'es_BO.ISO8859-1',\n    'es_cl':                                'es_CL.ISO8859-1',\n    'es_co':                                'es_CO.ISO8859-1',\n    'es_cr':                                'es_CR.ISO8859-1',\n    'es_cu':                                'es_CU.UTF-8',\n    'es_do':                                'es_DO.ISO8859-1',\n    'es_ec':                                'es_EC.ISO8859-1',\n    'es_es':                                'es_ES.ISO8859-1',\n    'es_gt':                                'es_GT.ISO8859-1',\n    'es_hn':                                'es_HN.ISO8859-1',\n    'es_mx':                                'es_MX.ISO8859-1',\n    'es_ni':                                'es_NI.ISO8859-1',\n    'es_pa':                                'es_PA.ISO8859-1',\n    'es_pe':                                'es_PE.ISO8859-1',\n    'es_pr':                                'es_PR.ISO8859-1',\n    'es_py':                                'es_PY.ISO8859-1',\n    'es_sv':                                'es_SV.ISO8859-1',\n    'es_us':                                'es_US.ISO8859-1',\n    'es_uy':                                'es_UY.ISO8859-1',\n    'es_ve':                                'es_VE.ISO8859-1',\n    'estonian':                             'et_EE.ISO8859-1',\n    'et':                                   'et_EE.ISO8859-15',\n    'et_ee':                                'et_EE.ISO8859-15',\n    'eu':                                   'eu_ES.ISO8859-1',\n    'eu_es':                                'eu_ES.ISO8859-1',\n    'eu_fr':                                'eu_FR.ISO8859-1',\n    'fa':                                   'fa_IR.UTF-8',\n    'fa_ir':                                'fa_IR.UTF-8',\n    'fa_ir.isiri3342':                      'fa_IR.ISIRI-3342',\n    'ff_sn':                                'ff_SN.UTF-8',\n    'fi':                                   'fi_FI.ISO8859-15',\n    'fi_fi':                                'fi_FI.ISO8859-15',\n    'fil_ph':                               'fil_PH.UTF-8',\n    'finnish':                              'fi_FI.ISO8859-1',\n    'fo':                                   'fo_FO.ISO8859-1',\n    'fo_fo':                                'fo_FO.ISO8859-1',\n    'fr':                                   'fr_FR.ISO8859-1',\n    'fr_be':                                'fr_BE.ISO8859-1',\n    'fr_ca':                                'fr_CA.ISO8859-1',\n    'fr_ch':                                'fr_CH.ISO8859-1',\n    'fr_fr':                                'fr_FR.ISO8859-1',\n    'fr_lu':                                'fr_LU.ISO8859-1',\n    'fran\\xe7ais':                          'fr_FR.ISO8859-1',\n    'fre_fr':                               'fr_FR.ISO8859-1',\n    'french':                               'fr_FR.ISO8859-1',\n    'french.iso88591':                      'fr_CH.ISO8859-1',\n    'french_france':                        'fr_FR.ISO8859-1',\n    'fur_it':                               'fur_IT.UTF-8',\n    'fy_de':                                'fy_DE.UTF-8',\n    'fy_nl':                                'fy_NL.UTF-8',\n    'ga':                                   'ga_IE.ISO8859-1',\n    'ga_ie':                                'ga_IE.ISO8859-1',\n    'galego':                               'gl_ES.ISO8859-1',\n    'galician':                             'gl_ES.ISO8859-1',\n    'gd':                                   'gd_GB.ISO8859-1',\n    'gd_gb':                                'gd_GB.ISO8859-1',\n    'ger_de':                               'de_DE.ISO8859-1',\n    'german':                               'de_DE.ISO8859-1',\n    'german.iso88591':                      'de_CH.ISO8859-1',\n    'german_germany':                       'de_DE.ISO8859-1',\n    'gez_er':                               'gez_ER.UTF-8',\n    'gez_et':                               'gez_ET.UTF-8',\n    'gl':                                   'gl_ES.ISO8859-1',\n    'gl_es':                                'gl_ES.ISO8859-1',\n    'greek':                                'el_GR.ISO8859-7',\n    'gu_in':                                'gu_IN.UTF-8',\n    'gv':                                   'gv_GB.ISO8859-1',\n    'gv_gb':                                'gv_GB.ISO8859-1',\n    'ha_ng':                                'ha_NG.UTF-8',\n    'hak_tw':                               'hak_TW.UTF-8',\n    'he':                                   'he_IL.ISO8859-8',\n    'he_il':                                'he_IL.ISO8859-8',\n    'hebrew':                               'he_IL.ISO8859-8',\n    'hi':                                   'hi_IN.ISCII-DEV',\n    'hi_in':                                'hi_IN.ISCII-DEV',\n    'hi_in.isciidev':                       'hi_IN.ISCII-DEV',\n    'hif_fj':                               'hif_FJ.UTF-8',\n    'hne':                                  'hne_IN.UTF-8',\n    'hne_in':                               'hne_IN.UTF-8',\n    'hr':                                   'hr_HR.ISO8859-2',\n    'hr_hr':                                'hr_HR.ISO8859-2',\n    'hrvatski':                             'hr_HR.ISO8859-2',\n    'hsb_de':                               'hsb_DE.ISO8859-2',\n    'ht_ht':                                'ht_HT.UTF-8',\n    'hu':                                   'hu_HU.ISO8859-2',\n    'hu_hu':                                'hu_HU.ISO8859-2',\n    'hungarian':                            'hu_HU.ISO8859-2',\n    'hy_am':                                'hy_AM.UTF-8',\n    'hy_am.armscii8':                       'hy_AM.ARMSCII_8',\n    'ia':                                   'ia.UTF-8',\n    'ia_fr':                                'ia_FR.UTF-8',\n    'icelandic':                            'is_IS.ISO8859-1',\n    'id':                                   'id_ID.ISO8859-1',\n    'id_id':                                'id_ID.ISO8859-1',\n    'ig_ng':                                'ig_NG.UTF-8',\n    'ik_ca':                                'ik_CA.UTF-8',\n    'in':                                   'id_ID.ISO8859-1',\n    'in_id':                                'id_ID.ISO8859-1',\n    'is':                                   'is_IS.ISO8859-1',\n    'is_is':                                'is_IS.ISO8859-1',\n    'iso-8859-1':                           'en_US.ISO8859-1',\n    'iso-8859-15':                          'en_US.ISO8859-15',\n    'iso8859-1':                            'en_US.ISO8859-1',\n    'iso8859-15':                           'en_US.ISO8859-15',\n    'iso_8859_1':                           'en_US.ISO8859-1',\n    'iso_8859_15':                          'en_US.ISO8859-15',\n    'it':                                   'it_IT.ISO8859-1',\n    'it_ch':                                'it_CH.ISO8859-1',\n    'it_it':                                'it_IT.ISO8859-1',\n    'italian':                              'it_IT.ISO8859-1',\n    'iu':                                   'iu_CA.NUNACOM-8',\n    'iu_ca':                                'iu_CA.NUNACOM-8',\n    'iu_ca.nunacom8':                       'iu_CA.NUNACOM-8',\n    'iw':                                   'he_IL.ISO8859-8',\n    'iw_il':                                'he_IL.ISO8859-8',\n    'iw_il.utf8':                           'iw_IL.UTF-8',\n    'ja':                                   'ja_JP.eucJP',\n    'ja_jp':                                'ja_JP.eucJP',\n    'ja_jp.euc':                            'ja_JP.eucJP',\n    'ja_jp.mscode':                         'ja_JP.SJIS',\n    'ja_jp.pck':                            'ja_JP.SJIS',\n    'japan':                                'ja_JP.eucJP',\n    'japanese':                             'ja_JP.eucJP',\n    'japanese-euc':                         'ja_JP.eucJP',\n    'japanese.euc':                         'ja_JP.eucJP',\n    'jp_jp':                                'ja_JP.eucJP',\n    'ka':                                   'ka_GE.GEORGIAN-ACADEMY',\n    'ka_ge':                                'ka_GE.GEORGIAN-ACADEMY',\n    'ka_ge.georgianacademy':                'ka_GE.GEORGIAN-ACADEMY',\n    'ka_ge.georgianps':                     'ka_GE.GEORGIAN-PS',\n    'ka_ge.georgianrs':                     'ka_GE.GEORGIAN-ACADEMY',\n    'kab_dz':                               'kab_DZ.UTF-8',\n    'kk_kz':                                'kk_KZ.ptcp154',\n    'kl':                                   'kl_GL.ISO8859-1',\n    'kl_gl':                                'kl_GL.ISO8859-1',\n    'km_kh':                                'km_KH.UTF-8',\n    'kn':                                   'kn_IN.UTF-8',\n    'kn_in':                                'kn_IN.UTF-8',\n    'ko':                                   'ko_KR.eucKR',\n    'ko_kr':                                'ko_KR.eucKR',\n    'ko_kr.euc':                            'ko_KR.eucKR',\n    'kok_in':                               'kok_IN.UTF-8',\n    'korean':                               'ko_KR.eucKR',\n    'korean.euc':                           'ko_KR.eucKR',\n    'ks':                                   'ks_IN.UTF-8',\n    'ks_in':                                'ks_IN.UTF-8',\n    'ks_in@devanagari.utf8':                'ks_IN.UTF-8@devanagari',\n    'ku_tr':                                'ku_TR.ISO8859-9',\n    'kw':                                   'kw_GB.ISO8859-1',\n    'kw_gb':                                'kw_GB.ISO8859-1',\n    'ky':                                   'ky_KG.UTF-8',\n    'ky_kg':                                'ky_KG.UTF-8',\n    'lb_lu':                                'lb_LU.UTF-8',\n    'lg_ug':                                'lg_UG.ISO8859-10',\n    'li_be':                                'li_BE.UTF-8',\n    'li_nl':                                'li_NL.UTF-8',\n    'lij_it':                               'lij_IT.UTF-8',\n    'lithuanian':                           'lt_LT.ISO8859-13',\n    'ln_cd':                                'ln_CD.UTF-8',\n    'lo':                                   'lo_LA.MULELAO-1',\n    'lo_la':                                'lo_LA.MULELAO-1',\n    'lo_la.cp1133':                         'lo_LA.IBM-CP1133',\n    'lo_la.ibmcp1133':                      'lo_LA.IBM-CP1133',\n    'lo_la.mulelao1':                       'lo_LA.MULELAO-1',\n    'lt':                                   'lt_LT.ISO8859-13',\n    'lt_lt':                                'lt_LT.ISO8859-13',\n    'lv':                                   'lv_LV.ISO8859-13',\n    'lv_lv':                                'lv_LV.ISO8859-13',\n    'lzh_tw':                               'lzh_TW.UTF-8',\n    'mag_in':                               'mag_IN.UTF-8',\n    'mai':                                  'mai_IN.UTF-8',\n    'mai_in':                               'mai_IN.UTF-8',\n    'mai_np':                               'mai_NP.UTF-8',\n    'mfe_mu':                               'mfe_MU.UTF-8',\n    'mg_mg':                                'mg_MG.ISO8859-15',\n    'mhr_ru':                               'mhr_RU.UTF-8',\n    'mi':                                   'mi_NZ.ISO8859-1',\n    'mi_nz':                                'mi_NZ.ISO8859-1',\n    'miq_ni':                               'miq_NI.UTF-8',\n    'mjw_in':                               'mjw_IN.UTF-8',\n    'mk':                                   'mk_MK.ISO8859-5',\n    'mk_mk':                                'mk_MK.ISO8859-5',\n    'ml':                                   'ml_IN.UTF-8',\n    'ml_in':                                'ml_IN.UTF-8',\n    'mn_mn':                                'mn_MN.UTF-8',\n    'mni_in':                               'mni_IN.UTF-8',\n    'mr':                                   'mr_IN.UTF-8',\n    'mr_in':                                'mr_IN.UTF-8',\n    'ms':                                   'ms_MY.ISO8859-1',\n    'ms_my':                                'ms_MY.ISO8859-1',\n    'mt':                                   'mt_MT.ISO8859-3',\n    'mt_mt':                                'mt_MT.ISO8859-3',\n    'my_mm':                                'my_MM.UTF-8',\n    'nan_tw':                               'nan_TW.UTF-8',\n    'nb':                                   'nb_NO.ISO8859-1',\n    'nb_no':                                'nb_NO.ISO8859-1',\n    'nds_de':                               'nds_DE.UTF-8',\n    'nds_nl':                               'nds_NL.UTF-8',\n    'ne_np':                                'ne_NP.UTF-8',\n    'nhn_mx':                               'nhn_MX.UTF-8',\n    'niu_nu':                               'niu_NU.UTF-8',\n    'niu_nz':                               'niu_NZ.UTF-8',\n    'nl':                                   'nl_NL.ISO8859-1',\n    'nl_aw':                                'nl_AW.UTF-8',\n    'nl_be':                                'nl_BE.ISO8859-1',\n    'nl_nl':                                'nl_NL.ISO8859-1',\n    'nn':                                   'nn_NO.ISO8859-1',\n    'nn_no':                                'nn_NO.ISO8859-1',\n    'no':                                   'no_NO.ISO8859-1',\n    'no@nynorsk':                           'ny_NO.ISO8859-1',\n    'no_no':                                'no_NO.ISO8859-1',\n    'no_no.iso88591@bokmal':                'no_NO.ISO8859-1',\n    'no_no.iso88591@nynorsk':               'no_NO.ISO8859-1',\n    'norwegian':                            'no_NO.ISO8859-1',\n    'nr':                                   'nr_ZA.ISO8859-1',\n    'nr_za':                                'nr_ZA.ISO8859-1',\n    'nso':                                  'nso_ZA.ISO8859-15',\n    'nso_za':                               'nso_ZA.ISO8859-15',\n    'ny':                                   'ny_NO.ISO8859-1',\n    'ny_no':                                'ny_NO.ISO8859-1',\n    'nynorsk':                              'nn_NO.ISO8859-1',\n    'oc':                                   'oc_FR.ISO8859-1',\n    'oc_fr':                                'oc_FR.ISO8859-1',\n    'om_et':                                'om_ET.UTF-8',\n    'om_ke':                                'om_KE.ISO8859-1',\n    'or':                                   'or_IN.UTF-8',\n    'or_in':                                'or_IN.UTF-8',\n    'os_ru':                                'os_RU.UTF-8',\n    'pa':                                   'pa_IN.UTF-8',\n    'pa_in':                                'pa_IN.UTF-8',\n    'pa_pk':                                'pa_PK.UTF-8',\n    'pap_an':                               'pap_AN.UTF-8',\n    'pap_aw':                               'pap_AW.UTF-8',\n    'pap_cw':                               'pap_CW.UTF-8',\n    'pd':                                   'pd_US.ISO8859-1',\n    'pd_de':                                'pd_DE.ISO8859-1',\n    'pd_us':                                'pd_US.ISO8859-1',\n    'ph':                                   'ph_PH.ISO8859-1',\n    'ph_ph':                                'ph_PH.ISO8859-1',\n    'pl':                                   'pl_PL.ISO8859-2',\n    'pl_pl':                                'pl_PL.ISO8859-2',\n    'polish':                               'pl_PL.ISO8859-2',\n    'portuguese':                           'pt_PT.ISO8859-1',\n    'portuguese_brazil':                    'pt_BR.ISO8859-1',\n    'posix':                                'C',\n    'posix-utf2':                           'C',\n    'pp':                                   'pp_AN.ISO8859-1',\n    'pp_an':                                'pp_AN.ISO8859-1',\n    'ps_af':                                'ps_AF.UTF-8',\n    'pt':                                   'pt_PT.ISO8859-1',\n    'pt_br':                                'pt_BR.ISO8859-1',\n    'pt_pt':                                'pt_PT.ISO8859-1',\n    'quz_pe':                               'quz_PE.UTF-8',\n    'raj_in':                               'raj_IN.UTF-8',\n    'ro':                                   'ro_RO.ISO8859-2',\n    'ro_ro':                                'ro_RO.ISO8859-2',\n    'romanian':                             'ro_RO.ISO8859-2',\n    'ru':                                   'ru_RU.UTF-8',\n    'ru_ru':                                'ru_RU.UTF-8',\n    'ru_ua':                                'ru_UA.KOI8-U',\n    'rumanian':                             'ro_RO.ISO8859-2',\n    'russian':                              'ru_RU.KOI8-R',\n    'rw':                                   'rw_RW.ISO8859-1',\n    'rw_rw':                                'rw_RW.ISO8859-1',\n    'sa_in':                                'sa_IN.UTF-8',\n    'sat_in':                               'sat_IN.UTF-8',\n    'sc_it':                                'sc_IT.UTF-8',\n    'sd':                                   'sd_IN.UTF-8',\n    'sd_in':                                'sd_IN.UTF-8',\n    'sd_in@devanagari.utf8':                'sd_IN.UTF-8@devanagari',\n    'sd_pk':                                'sd_PK.UTF-8',\n    'se_no':                                'se_NO.UTF-8',\n    'serbocroatian':                        'sr_RS.UTF-8@latin',\n    'sgs_lt':                               'sgs_LT.UTF-8',\n    'sh':                                   'sr_RS.UTF-8@latin',\n    'sh_ba.iso88592@bosnia':                'sr_CS.ISO8859-2',\n    'sh_hr':                                'sh_HR.ISO8859-2',\n    'sh_hr.iso88592':                       'hr_HR.ISO8859-2',\n    'sh_sp':                                'sr_CS.ISO8859-2',\n    'sh_yu':                                'sr_RS.UTF-8@latin',\n    'shn_mm':                               'shn_MM.UTF-8',\n    'shs_ca':                               'shs_CA.UTF-8',\n    'si':                                   'si_LK.UTF-8',\n    'si_lk':                                'si_LK.UTF-8',\n    'sid_et':                               'sid_ET.UTF-8',\n    'sinhala':                              'si_LK.UTF-8',\n    'sk':                                   'sk_SK.ISO8859-2',\n    'sk_sk':                                'sk_SK.ISO8859-2',\n    'sl':                                   'sl_SI.ISO8859-2',\n    'sl_cs':                                'sl_CS.ISO8859-2',\n    'sl_si':                                'sl_SI.ISO8859-2',\n    'slovak':                               'sk_SK.ISO8859-2',\n    'slovene':                              'sl_SI.ISO8859-2',\n    'slovenian':                            'sl_SI.ISO8859-2',\n    'sm_ws':                                'sm_WS.UTF-8',\n    'so_dj':                                'so_DJ.ISO8859-1',\n    'so_et':                                'so_ET.UTF-8',\n    'so_ke':                                'so_KE.ISO8859-1',\n    'so_so':                                'so_SO.ISO8859-1',\n    'sp':                                   'sr_CS.ISO8859-5',\n    'sp_yu':                                'sr_CS.ISO8859-5',\n    'spanish':                              'es_ES.ISO8859-1',\n    'spanish_spain':                        'es_ES.ISO8859-1',\n    'sq':                                   'sq_AL.ISO8859-2',\n    'sq_al':                                'sq_AL.ISO8859-2',\n    'sq_mk':                                'sq_MK.UTF-8',\n    'sr':                                   'sr_RS.UTF-8',\n    'sr@cyrillic':                          'sr_RS.UTF-8',\n    'sr@latn':                              'sr_CS.UTF-8@latin',\n    'sr_cs':                                'sr_CS.UTF-8',\n    'sr_cs.iso88592@latn':                  'sr_CS.ISO8859-2',\n    'sr_cs@latn':                           'sr_CS.UTF-8@latin',\n    'sr_me':                                'sr_ME.UTF-8',\n    'sr_rs':                                'sr_RS.UTF-8',\n    'sr_rs@latn':                           'sr_RS.UTF-8@latin',\n    'sr_sp':                                'sr_CS.ISO8859-2',\n    'sr_yu':                                'sr_RS.UTF-8@latin',\n    'sr_yu.cp1251@cyrillic':                'sr_CS.CP1251',\n    'sr_yu.iso88592':                       'sr_CS.ISO8859-2',\n    'sr_yu.iso88595':                       'sr_CS.ISO8859-5',\n    'sr_yu.iso88595@cyrillic':              'sr_CS.ISO8859-5',\n    'sr_yu.microsoftcp1251@cyrillic':       'sr_CS.CP1251',\n    'sr_yu.utf8':                           'sr_RS.UTF-8',\n    'sr_yu.utf8@cyrillic':                  'sr_RS.UTF-8',\n    'sr_yu@cyrillic':                       'sr_RS.UTF-8',\n    'ss':                                   'ss_ZA.ISO8859-1',\n    'ss_za':                                'ss_ZA.ISO8859-1',\n    'st':                                   'st_ZA.ISO8859-1',\n    'st_za':                                'st_ZA.ISO8859-1',\n    'sv':                                   'sv_SE.ISO8859-1',\n    'sv_fi':                                'sv_FI.ISO8859-1',\n    'sv_se':                                'sv_SE.ISO8859-1',\n    'sw_ke':                                'sw_KE.UTF-8',\n    'sw_tz':                                'sw_TZ.UTF-8',\n    'swedish':                              'sv_SE.ISO8859-1',\n    'szl_pl':                               'szl_PL.UTF-8',\n    'ta':                                   'ta_IN.TSCII-0',\n    'ta_in':                                'ta_IN.TSCII-0',\n    'ta_in.tscii':                          'ta_IN.TSCII-0',\n    'ta_in.tscii0':                         'ta_IN.TSCII-0',\n    'ta_lk':                                'ta_LK.UTF-8',\n    'tcy_in.utf8':                          'tcy_IN.UTF-8',\n    'te':                                   'te_IN.UTF-8',\n    'te_in':                                'te_IN.UTF-8',\n    'tg':                                   'tg_TJ.KOI8-C',\n    'tg_tj':                                'tg_TJ.KOI8-C',\n    'th':                                   'th_TH.ISO8859-11',\n    'th_th':                                'th_TH.ISO8859-11',\n    'th_th.tactis':                         'th_TH.TIS620',\n    'th_th.tis620':                         'th_TH.TIS620',\n    'thai':                                 'th_TH.ISO8859-11',\n    'the_np':                               'the_NP.UTF-8',\n    'ti_er':                                'ti_ER.UTF-8',\n    'ti_et':                                'ti_ET.UTF-8',\n    'tig_er':                               'tig_ER.UTF-8',\n    'tk_tm':                                'tk_TM.UTF-8',\n    'tl':                                   'tl_PH.ISO8859-1',\n    'tl_ph':                                'tl_PH.ISO8859-1',\n    'tn':                                   'tn_ZA.ISO8859-15',\n    'tn_za':                                'tn_ZA.ISO8859-15',\n    'to_to':                                'to_TO.UTF-8',\n    'tpi_pg':                               'tpi_PG.UTF-8',\n    'tr':                                   'tr_TR.ISO8859-9',\n    'tr_cy':                                'tr_CY.ISO8859-9',\n    'tr_tr':                                'tr_TR.ISO8859-9',\n    'ts':                                   'ts_ZA.ISO8859-1',\n    'ts_za':                                'ts_ZA.ISO8859-1',\n    'tt':                                   'tt_RU.TATAR-CYR',\n    'tt_ru':                                'tt_RU.TATAR-CYR',\n    'tt_ru.tatarcyr':                       'tt_RU.TATAR-CYR',\n    'tt_ru@iqtelif':                        'tt_RU.UTF-8@iqtelif',\n    'turkish':                              'tr_TR.ISO8859-9',\n    'ug_cn':                                'ug_CN.UTF-8',\n    'uk':                                   'uk_UA.KOI8-U',\n    'uk_ua':                                'uk_UA.KOI8-U',\n    'univ':                                 'en_US.utf',\n    'universal':                            'en_US.utf',\n    'universal.utf8@ucs4':                  'en_US.UTF-8',\n    'unm_us':                               'unm_US.UTF-8',\n    'ur':                                   'ur_PK.CP1256',\n    'ur_in':                                'ur_IN.UTF-8',\n    'ur_pk':                                'ur_PK.CP1256',\n    'uz':                                   'uz_UZ.UTF-8',\n    'uz_uz':                                'uz_UZ.UTF-8',\n    'uz_uz@cyrillic':                       'uz_UZ.UTF-8',\n    've':                                   've_ZA.UTF-8',\n    've_za':                                've_ZA.UTF-8',\n    'vi':                                   'vi_VN.TCVN',\n    'vi_vn':                                'vi_VN.TCVN',\n    'vi_vn.tcvn':                           'vi_VN.TCVN',\n    'vi_vn.tcvn5712':                       'vi_VN.TCVN',\n    'vi_vn.viscii':                         'vi_VN.VISCII',\n    'vi_vn.viscii111':                      'vi_VN.VISCII',\n    'wa':                                   'wa_BE.ISO8859-1',\n    'wa_be':                                'wa_BE.ISO8859-1',\n    'wae_ch':                               'wae_CH.UTF-8',\n    'wal_et':                               'wal_ET.UTF-8',\n    'wo_sn':                                'wo_SN.UTF-8',\n    'xh':                                   'xh_ZA.ISO8859-1',\n    'xh_za':                                'xh_ZA.ISO8859-1',\n    'yi':                                   'yi_US.CP1255',\n    'yi_us':                                'yi_US.CP1255',\n    'yo_ng':                                'yo_NG.UTF-8',\n    'yue_hk':                               'yue_HK.UTF-8',\n    'yuw_pg':                               'yuw_PG.UTF-8',\n    'zh':                                   'zh_CN.eucCN',\n    'zh_cn':                                'zh_CN.gb2312',\n    'zh_cn.big5':                           'zh_TW.big5',\n    'zh_cn.euc':                            'zh_CN.eucCN',\n    'zh_hk':                                'zh_HK.big5hkscs',\n    'zh_hk.big5hk':                         'zh_HK.big5hkscs',\n    'zh_sg':                                'zh_SG.GB2312',\n    'zh_sg.gbk':                            'zh_SG.GBK',\n    'zh_tw':                                'zh_TW.big5',\n    'zh_tw.euc':                            'zh_TW.eucTW',\n    'zh_tw.euctw':                          'zh_TW.eucTW',\n    'zu':                                   'zu_ZA.ISO8859-1',\n    'zu_za':                                'zu_ZA.ISO8859-1',\n}\n\n#\n# This maps Windows language identifiers to locale strings.\n#\n# This list has been updated from\n# http://msdn.microsoft.com/library/default.asp?url=/library/en-us/intl/nls_238z.asp\n# to include every locale up to Windows Vista.\n#\n# NOTE: this mapping is incomplete.  If your language is missing, please\n# submit a bug report to the Python bug tracker at http://bugs.python.org/\n# Make sure you include the missing language identifier and the suggested\n# locale code.\n#\n\nwindows_locale = {\n    0x0436: \"af_ZA\", # Afrikaans\n    0x041c: \"sq_AL\", # Albanian\n    0x0484: \"gsw_FR\",# Alsatian - France\n    0x045e: \"am_ET\", # Amharic - Ethiopia\n    0x0401: \"ar_SA\", # Arabic - Saudi Arabia\n    0x0801: \"ar_IQ\", # Arabic - Iraq\n    0x0c01: \"ar_EG\", # Arabic - Egypt\n    0x1001: \"ar_LY\", # Arabic - Libya\n    0x1401: \"ar_DZ\", # Arabic - Algeria\n    0x1801: \"ar_MA\", # Arabic - Morocco\n    0x1c01: \"ar_TN\", # Arabic - Tunisia\n    0x2001: \"ar_OM\", # Arabic - Oman\n    0x2401: \"ar_YE\", # Arabic - Yemen\n    0x2801: \"ar_SY\", # Arabic - Syria\n    0x2c01: \"ar_JO\", # Arabic - Jordan\n    0x3001: \"ar_LB\", # Arabic - Lebanon\n    0x3401: \"ar_KW\", # Arabic - Kuwait\n    0x3801: \"ar_AE\", # Arabic - United Arab Emirates\n    0x3c01: \"ar_BH\", # Arabic - Bahrain\n    0x4001: \"ar_QA\", # Arabic - Qatar\n    0x042b: \"hy_AM\", # Armenian\n    0x044d: \"as_IN\", # Assamese - India\n    0x042c: \"az_AZ\", # Azeri - Latin\n    0x082c: \"az_AZ\", # Azeri - Cyrillic\n    0x046d: \"ba_RU\", # Bashkir\n    0x042d: \"eu_ES\", # Basque - Russia\n    0x0423: \"be_BY\", # Belarusian\n    0x0445: \"bn_IN\", # Begali\n    0x201a: \"bs_BA\", # Bosnian - Cyrillic\n    0x141a: \"bs_BA\", # Bosnian - Latin\n    0x047e: \"br_FR\", # Breton - France\n    0x0402: \"bg_BG\", # Bulgarian\n#    0x0455: \"my_MM\", # Burmese - Not supported\n    0x0403: \"ca_ES\", # Catalan\n    0x0004: \"zh_CHS\",# Chinese - Simplified\n    0x0404: \"zh_TW\", # Chinese - Taiwan\n    0x0804: \"zh_CN\", # Chinese - PRC\n    0x0c04: \"zh_HK\", # Chinese - Hong Kong S.A.R.\n    0x1004: \"zh_SG\", # Chinese - Singapore\n    0x1404: \"zh_MO\", # Chinese - Macao S.A.R.\n    0x7c04: \"zh_CHT\",# Chinese - Traditional\n    0x0483: \"co_FR\", # Corsican - France\n    0x041a: \"hr_HR\", # Croatian\n    0x101a: \"hr_BA\", # Croatian - Bosnia\n    0x0405: \"cs_CZ\", # Czech\n    0x0406: \"da_DK\", # Danish\n    0x048c: \"gbz_AF\",# Dari - Afghanistan\n    0x0465: \"div_MV\",# Divehi - Maldives\n    0x0413: \"nl_NL\", # Dutch - The Netherlands\n    0x0813: \"nl_BE\", # Dutch - Belgium\n    0x0409: \"en_US\", # English - United States\n    0x0809: \"en_GB\", # English - United Kingdom\n    0x0c09: \"en_AU\", # English - Australia\n    0x1009: \"en_CA\", # English - Canada\n    0x1409: \"en_NZ\", # English - New Zealand\n    0x1809: \"en_IE\", # English - Ireland\n    0x1c09: \"en_ZA\", # English - South Africa\n    0x2009: \"en_JA\", # English - Jamaica\n    0x2409: \"en_CB\", # English - Caribbean\n    0x2809: \"en_BZ\", # English - Belize\n    0x2c09: \"en_TT\", # English - Trinidad\n    0x3009: \"en_ZW\", # English - Zimbabwe\n    0x3409: \"en_PH\", # English - Philippines\n    0x4009: \"en_IN\", # English - India\n    0x4409: \"en_MY\", # English - Malaysia\n    0x4809: \"en_IN\", # English - Singapore\n    0x0425: \"et_EE\", # Estonian\n    0x0438: \"fo_FO\", # Faroese\n    0x0464: \"fil_PH\",# Filipino\n    0x040b: \"fi_FI\", # Finnish\n    0x040c: \"fr_FR\", # French - France\n    0x080c: \"fr_BE\", # French - Belgium\n    0x0c0c: \"fr_CA\", # French - Canada\n    0x100c: \"fr_CH\", # French - Switzerland\n    0x140c: \"fr_LU\", # French - Luxembourg\n    0x180c: \"fr_MC\", # French - Monaco\n    0x0462: \"fy_NL\", # Frisian - Netherlands\n    0x0456: \"gl_ES\", # Galician\n    0x0437: \"ka_GE\", # Georgian\n    0x0407: \"de_DE\", # German - Germany\n    0x0807: \"de_CH\", # German - Switzerland\n    0x0c07: \"de_AT\", # German - Austria\n    0x1007: \"de_LU\", # German - Luxembourg\n    0x1407: \"de_LI\", # German - Liechtenstein\n    0x0408: \"el_GR\", # Greek\n    0x046f: \"kl_GL\", # Greenlandic - Greenland\n    0x0447: \"gu_IN\", # Gujarati\n    0x0468: \"ha_NG\", # Hausa - Latin\n    0x040d: \"he_IL\", # Hebrew\n    0x0439: \"hi_IN\", # Hindi\n    0x040e: \"hu_HU\", # Hungarian\n    0x040f: \"is_IS\", # Icelandic\n    0x0421: \"id_ID\", # Indonesian\n    0x045d: \"iu_CA\", # Inuktitut - Syllabics\n    0x085d: \"iu_CA\", # Inuktitut - Latin\n    0x083c: \"ga_IE\", # Irish - Ireland\n    0x0410: \"it_IT\", # Italian - Italy\n    0x0810: \"it_CH\", # Italian - Switzerland\n    0x0411: \"ja_JP\", # Japanese\n    0x044b: \"kn_IN\", # Kannada - India\n    0x043f: \"kk_KZ\", # Kazakh\n    0x0453: \"kh_KH\", # Khmer - Cambodia\n    0x0486: \"qut_GT\",# K'iche - Guatemala\n    0x0487: \"rw_RW\", # Kinyarwanda - Rwanda\n    0x0457: \"kok_IN\",# Konkani\n    0x0412: \"ko_KR\", # Korean\n    0x0440: \"ky_KG\", # Kyrgyz\n    0x0454: \"lo_LA\", # Lao - Lao PDR\n    0x0426: \"lv_LV\", # Latvian\n    0x0427: \"lt_LT\", # Lithuanian\n    0x082e: \"dsb_DE\",# Lower Sorbian - Germany\n    0x046e: \"lb_LU\", # Luxembourgish\n    0x042f: \"mk_MK\", # FYROM Macedonian\n    0x043e: \"ms_MY\", # Malay - Malaysia\n    0x083e: \"ms_BN\", # Malay - Brunei Darussalam\n    0x044c: \"ml_IN\", # Malayalam - India\n    0x043a: \"mt_MT\", # Maltese\n    0x0481: \"mi_NZ\", # Maori\n    0x047a: \"arn_CL\",# Mapudungun\n    0x044e: \"mr_IN\", # Marathi\n    0x047c: \"moh_CA\",# Mohawk - Canada\n    0x0450: \"mn_MN\", # Mongolian - Cyrillic\n    0x0850: \"mn_CN\", # Mongolian - PRC\n    0x0461: \"ne_NP\", # Nepali\n    0x0414: \"nb_NO\", # Norwegian - Bokmal\n    0x0814: \"nn_NO\", # Norwegian - Nynorsk\n    0x0482: \"oc_FR\", # Occitan - France\n    0x0448: \"or_IN\", # Oriya - India\n    0x0463: \"ps_AF\", # Pashto - Afghanistan\n    0x0429: \"fa_IR\", # Persian\n    0x0415: \"pl_PL\", # Polish\n    0x0416: \"pt_BR\", # Portuguese - Brazil\n    0x0816: \"pt_PT\", # Portuguese - Portugal\n    0x0446: \"pa_IN\", # Punjabi\n    0x046b: \"quz_BO\",# Quechua (Bolivia)\n    0x086b: \"quz_EC\",# Quechua (Ecuador)\n    0x0c6b: \"quz_PE\",# Quechua (Peru)\n    0x0418: \"ro_RO\", # Romanian - Romania\n    0x0417: \"rm_CH\", # Romansh\n    0x0419: \"ru_RU\", # Russian\n    0x243b: \"smn_FI\",# Sami Finland\n    0x103b: \"smj_NO\",# Sami Norway\n    0x143b: \"smj_SE\",# Sami Sweden\n    0x043b: \"se_NO\", # Sami Northern Norway\n    0x083b: \"se_SE\", # Sami Northern Sweden\n    0x0c3b: \"se_FI\", # Sami Northern Finland\n    0x203b: \"sms_FI\",# Sami Skolt\n    0x183b: \"sma_NO\",# Sami Southern Norway\n    0x1c3b: \"sma_SE\",# Sami Southern Sweden\n    0x044f: \"sa_IN\", # Sanskrit\n    0x0c1a: \"sr_SP\", # Serbian - Cyrillic\n    0x1c1a: \"sr_BA\", # Serbian - Bosnia Cyrillic\n    0x081a: \"sr_SP\", # Serbian - Latin\n    0x181a: \"sr_BA\", # Serbian - Bosnia Latin\n    0x045b: \"si_LK\", # Sinhala - Sri Lanka\n    0x046c: \"ns_ZA\", # Northern Sotho\n    0x0432: \"tn_ZA\", # Setswana - Southern Africa\n    0x041b: \"sk_SK\", # Slovak\n    0x0424: \"sl_SI\", # Slovenian\n    0x040a: \"es_ES\", # Spanish - Spain\n    0x080a: \"es_MX\", # Spanish - Mexico\n    0x0c0a: \"es_ES\", # Spanish - Spain (Modern)\n    0x100a: \"es_GT\", # Spanish - Guatemala\n    0x140a: \"es_CR\", # Spanish - Costa Rica\n    0x180a: \"es_PA\", # Spanish - Panama\n    0x1c0a: \"es_DO\", # Spanish - Dominican Republic\n    0x200a: \"es_VE\", # Spanish - Venezuela\n    0x240a: \"es_CO\", # Spanish - Colombia\n    0x280a: \"es_PE\", # Spanish - Peru\n    0x2c0a: \"es_AR\", # Spanish - Argentina\n    0x300a: \"es_EC\", # Spanish - Ecuador\n    0x340a: \"es_CL\", # Spanish - Chile\n    0x380a: \"es_UR\", # Spanish - Uruguay\n    0x3c0a: \"es_PY\", # Spanish - Paraguay\n    0x400a: \"es_BO\", # Spanish - Bolivia\n    0x440a: \"es_SV\", # Spanish - El Salvador\n    0x480a: \"es_HN\", # Spanish - Honduras\n    0x4c0a: \"es_NI\", # Spanish - Nicaragua\n    0x500a: \"es_PR\", # Spanish - Puerto Rico\n    0x540a: \"es_US\", # Spanish - United States\n#    0x0430: \"\", # Sutu - Not supported\n    0x0441: \"sw_KE\", # Swahili\n    0x041d: \"sv_SE\", # Swedish - Sweden\n    0x081d: \"sv_FI\", # Swedish - Finland\n    0x045a: \"syr_SY\",# Syriac\n    0x0428: \"tg_TJ\", # Tajik - Cyrillic\n    0x085f: \"tmz_DZ\",# Tamazight - Latin\n    0x0449: \"ta_IN\", # Tamil\n    0x0444: \"tt_RU\", # Tatar\n    0x044a: \"te_IN\", # Telugu\n    0x041e: \"th_TH\", # Thai\n    0x0851: \"bo_BT\", # Tibetan - Bhutan\n    0x0451: \"bo_CN\", # Tibetan - PRC\n    0x041f: \"tr_TR\", # Turkish\n    0x0442: \"tk_TM\", # Turkmen - Cyrillic\n    0x0480: \"ug_CN\", # Uighur - Arabic\n    0x0422: \"uk_UA\", # Ukrainian\n    0x042e: \"wen_DE\",# Upper Sorbian - Germany\n    0x0420: \"ur_PK\", # Urdu\n    0x0820: \"ur_IN\", # Urdu - India\n    0x0443: \"uz_UZ\", # Uzbek - Latin\n    0x0843: \"uz_UZ\", # Uzbek - Cyrillic\n    0x042a: \"vi_VN\", # Vietnamese\n    0x0452: \"cy_GB\", # Welsh\n    0x0488: \"wo_SN\", # Wolof - Senegal\n    0x0434: \"xh_ZA\", # Xhosa - South Africa\n    0x0485: \"sah_RU\",# Yakut - Cyrillic\n    0x0478: \"ii_CN\", # Yi - PRC\n    0x046a: \"yo_NG\", # Yoruba - Nigeria\n    0x0435: \"zu_ZA\", # Zulu\n}\n\ndef _print_locale():\n\n    \"\"\" Test function.\n    \"\"\"\n    categories = {}\n    def _init_categories(categories=categories):\n        for k,v in globals().items():\n            if k[:3] == 'LC_':\n                categories[k] = v\n    _init_categories()\n    del categories['LC_ALL']\n\n    print('Locale defaults as determined by getdefaultlocale():')\n    print('-'*72)\n    lang, enc = getdefaultlocale()\n    print('Language: ', lang or '(undefined)')\n    print('Encoding: ', enc or '(undefined)')\n    print()\n\n    print('Locale settings on startup:')\n    print('-'*72)\n    for name,category in categories.items():\n        print(name, '...')\n        lang, enc = getlocale(category)\n        print('   Language: ', lang or '(undefined)')\n        print('   Encoding: ', enc or '(undefined)')\n        print()\n\n    print()\n    print('Locale settings after calling resetlocale():')\n    print('-'*72)\n    resetlocale()\n    for name,category in categories.items():\n        print(name, '...')\n        lang, enc = getlocale(category)\n        print('   Language: ', lang or '(undefined)')\n        print('   Encoding: ', enc or '(undefined)')\n        print()\n\n    try:\n        setlocale(LC_ALL, \"\")\n    except:\n        print('NOTE:')\n        print('setlocale(LC_ALL, \"\") does not support the default locale')\n        print('given in the OS environment variables.')\n    else:\n        print()\n        print('Locale settings after calling setlocale(LC_ALL, \"\"):')\n        print('-'*72)\n        for name,category in categories.items():\n            print(name, '...')\n            lang, enc = getlocale(category)\n            print('   Language: ', lang or '(undefined)')\n            print('   Encoding: ', enc or '(undefined)')\n            print()\n\n###\n\ntry:\n    LC_MESSAGES\nexcept NameError:\n    pass\nelse:\n    __all__.append(\"LC_MESSAGES\")\n\nif __name__=='__main__':\n    print('Locale aliasing:')\n    print()\n    _print_locale()\n    print()\n    print('Number formatting:')\n    print()\n    _test()\n", 1790], "/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py": ["\"\"\"Internationalization and localization support.\n\nThis module provides internationalization (I18N) and localization (L10N)\nsupport for your Python programs by providing an interface to the GNU gettext\nmessage catalog library.\n\nI18N refers to the operation by which a program is made aware of multiple\nlanguages.  L10N refers to the adaptation of your program, once\ninternationalized, to the local language and cultural habits.\n\n\"\"\"\n\n# This module represents the integration of work, contributions, feedback, and\n# suggestions from the following people:\n#\n# Martin von Loewis, who wrote the initial implementation of the underlying\n# C-based libintlmodule (later renamed _gettext), along with a skeletal\n# gettext.py implementation.\n#\n# Peter Funk, who wrote fintl.py, a fairly complete wrapper around intlmodule,\n# which also included a pure-Python implementation to read .mo files if\n# intlmodule wasn't available.\n#\n# James Henstridge, who also wrote a gettext.py module, which has some\n# interesting, but currently unsupported experimental features: the notion of\n# a Catalog class and instances, and the ability to add to a catalog file via\n# a Python API.\n#\n# Barry Warsaw integrated these modules, wrote the .install() API and code,\n# and conformed all C and Python code to Python's coding standards.\n#\n# Francois Pinard and Marc-Andre Lemburg also contributed valuably to this\n# module.\n#\n# J. David Ibanez implemented plural forms. Bruno Haible fixed some bugs.\n#\n# TODO:\n# - Lazy loading of .mo files.  Currently the entire catalog is loaded into\n#   memory, but that's probably bad for large translated programs.  Instead,\n#   the lexical sort of original strings in GNU .mo files should be exploited\n#   to do binary searches and lazy initializations.  Or you might want to use\n#   the undocumented double-hash algorithm for .mo files with hash tables, but\n#   you'll need to study the GNU gettext code to do this.\n#\n# - Support Solaris .mo file formats.  Unfortunately, we've been unable to\n#   find this format documented anywhere.\n\n\nimport operator\nimport os\nimport re\nimport sys\n\n\n__all__ = ['NullTranslations', 'GNUTranslations', 'Catalog',\n           'bindtextdomain', 'find', 'translation', 'install',\n           'textdomain', 'dgettext', 'dngettext', 'gettext',\n           'ngettext', 'pgettext', 'dpgettext', 'npgettext',\n           'dnpgettext'\n           ]\n\n_default_localedir = os.path.join(sys.base_prefix, 'share', 'locale')\n\n# Expression parsing for plural form selection.\n#\n# The gettext library supports a small subset of C syntax.  The only\n# incompatible difference is that integer literals starting with zero are\n# decimal.\n#\n# https://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms\n# http://git.savannah.gnu.org/cgit/gettext.git/tree/gettext-runtime/intl/plural.y\n\n_token_pattern = re.compile(r\"\"\"\n        (?P<WHITESPACES>[ \\t]+)                    | # spaces and horizontal tabs\n        (?P<NUMBER>[0-9]+\\b)                       | # decimal integer\n        (?P<NAME>n\\b)                              | # only n is allowed\n        (?P<PARENTHESIS>[()])                      |\n        (?P<OPERATOR>[-*/%+?:]|[><!]=?|==|&&|\\|\\|) | # !, *, /, %, +, -, <, >,\n                                                     # <=, >=, ==, !=, &&, ||,\n                                                     # ? :\n                                                     # unary and bitwise ops\n                                                     # not allowed\n        (?P<INVALID>\\w+|.)                           # invalid token\n    \"\"\", re.VERBOSE|re.DOTALL)\n\n\ndef _tokenize(plural):\n    for mo in re.finditer(_token_pattern, plural):\n        kind = mo.lastgroup\n        if kind == 'WHITESPACES':\n            continue\n        value = mo.group(kind)\n        if kind == 'INVALID':\n            raise ValueError('invalid token in plural form: %s' % value)\n        yield value\n    yield ''\n\n\ndef _error(value):\n    if value:\n        return ValueError('unexpected token in plural form: %s' % value)\n    else:\n        return ValueError('unexpected end of plural form')\n\n\n_binary_ops = (\n    ('||',),\n    ('&&',),\n    ('==', '!='),\n    ('<', '>', '<=', '>='),\n    ('+', '-'),\n    ('*', '/', '%'),\n)\n_binary_ops = {op: i for i, ops in enumerate(_binary_ops, 1) for op in ops}\n_c2py_ops = {'||': 'or', '&&': 'and', '/': '//'}\n\n\ndef _parse(tokens, priority=-1):\n    result = ''\n    nexttok = next(tokens)\n    while nexttok == '!':\n        result += 'not '\n        nexttok = next(tokens)\n\n    if nexttok == '(':\n        sub, nexttok = _parse(tokens)\n        result = '%s(%s)' % (result, sub)\n        if nexttok != ')':\n            raise ValueError('unbalanced parenthesis in plural form')\n    elif nexttok == 'n':\n        result = '%s%s' % (result, nexttok)\n    else:\n        try:\n            value = int(nexttok, 10)\n        except ValueError:\n            raise _error(nexttok) from None\n        result = '%s%d' % (result, value)\n    nexttok = next(tokens)\n\n    j = 100\n    while nexttok in _binary_ops:\n        i = _binary_ops[nexttok]\n        if i < priority:\n            break\n        # Break chained comparisons\n        if i in (3, 4) and j in (3, 4):  # '==', '!=', '<', '>', '<=', '>='\n            result = '(%s)' % result\n        # Replace some C operators by their Python equivalents\n        op = _c2py_ops.get(nexttok, nexttok)\n        right, nexttok = _parse(tokens, i + 1)\n        result = '%s %s %s' % (result, op, right)\n        j = i\n    if j == priority == 4:  # '<', '>', '<=', '>='\n        result = '(%s)' % result\n\n    if nexttok == '?' and priority <= 0:\n        if_true, nexttok = _parse(tokens, 0)\n        if nexttok != ':':\n            raise _error(nexttok)\n        if_false, nexttok = _parse(tokens)\n        result = '%s if %s else %s' % (if_true, result, if_false)\n        if priority == 0:\n            result = '(%s)' % result\n\n    return result, nexttok\n\n\ndef _as_int(n):\n    try:\n        round(n)\n    except TypeError:\n        raise TypeError('Plural value must be an integer, got %s' %\n                        (n.__class__.__name__,)) from None\n\n    import warnings\n    frame = sys._getframe(1)\n    stacklevel = 2\n    while frame.f_back is not None and frame.f_globals.get('__name__') == __name__:\n        stacklevel += 1\n        frame = frame.f_back\n    warnings.warn('Plural value must be an integer, got %s' %\n                  (n.__class__.__name__,),\n                  DeprecationWarning,\n                  stacklevel)\n    return n\n\n\ndef c2py(plural):\n    \"\"\"Gets a C expression as used in PO files for plural forms and returns a\n    Python function that implements an equivalent expression.\n    \"\"\"\n\n    if len(plural) > 1000:\n        raise ValueError('plural form expression is too long')\n    try:\n        result, nexttok = _parse(_tokenize(plural))\n        if nexttok:\n            raise _error(nexttok)\n\n        depth = 0\n        for c in result:\n            if c == '(':\n                depth += 1\n                if depth > 20:\n                    # Python compiler limit is about 90.\n                    # The most complex example has 2.\n                    raise ValueError('plural form expression is too complex')\n            elif c == ')':\n                depth -= 1\n\n        ns = {'_as_int': _as_int, '__name__': __name__}\n        exec('''if True:\n            def func(n):\n                if not isinstance(n, int):\n                    n = _as_int(n)\n                return int(%s)\n            ''' % result, ns)\n        return ns['func']\n    except RecursionError:\n        # Recursion error can be raised in _parse() or exec().\n        raise ValueError('plural form expression is too complex')\n\n\ndef _expand_lang(loc):\n    import locale\n    loc = locale.normalize(loc)\n    COMPONENT_CODESET   = 1 << 0\n    COMPONENT_TERRITORY = 1 << 1\n    COMPONENT_MODIFIER  = 1 << 2\n    # split up the locale into its base components\n    mask = 0\n    pos = loc.find('@')\n    if pos >= 0:\n        modifier = loc[pos:]\n        loc = loc[:pos]\n        mask |= COMPONENT_MODIFIER\n    else:\n        modifier = ''\n    pos = loc.find('.')\n    if pos >= 0:\n        codeset = loc[pos:]\n        loc = loc[:pos]\n        mask |= COMPONENT_CODESET\n    else:\n        codeset = ''\n    pos = loc.find('_')\n    if pos >= 0:\n        territory = loc[pos:]\n        loc = loc[:pos]\n        mask |= COMPONENT_TERRITORY\n    else:\n        territory = ''\n    language = loc\n    ret = []\n    for i in range(mask+1):\n        if not (i & ~mask):  # if all components for this combo exist ...\n            val = language\n            if i & COMPONENT_TERRITORY: val += territory\n            if i & COMPONENT_CODESET:   val += codeset\n            if i & COMPONENT_MODIFIER:  val += modifier\n            ret.append(val)\n    ret.reverse()\n    return ret\n\n\nclass NullTranslations:\n    def __init__(self, fp=None):\n        self._info = {}\n        self._charset = None\n        self._fallback = None\n        if fp is not None:\n            self._parse(fp)\n\n    def _parse(self, fp):\n        pass\n\n    def add_fallback(self, fallback):\n        if self._fallback:\n            self._fallback.add_fallback(fallback)\n        else:\n            self._fallback = fallback\n\n    def gettext(self, message):\n        if self._fallback:\n            return self._fallback.gettext(message)\n        return message\n\n    def ngettext(self, msgid1, msgid2, n):\n        if self._fallback:\n            return self._fallback.ngettext(msgid1, msgid2, n)\n        if n == 1:\n            return msgid1\n        else:\n            return msgid2\n\n    def pgettext(self, context, message):\n        if self._fallback:\n            return self._fallback.pgettext(context, message)\n        return message\n\n    def npgettext(self, context, msgid1, msgid2, n):\n        if self._fallback:\n            return self._fallback.npgettext(context, msgid1, msgid2, n)\n        if n == 1:\n            return msgid1\n        else:\n            return msgid2\n\n    def info(self):\n        return self._info\n\n    def charset(self):\n        return self._charset\n\n    def install(self, names=None):\n        import builtins\n        builtins.__dict__['_'] = self.gettext\n        if names is not None:\n            allowed = {'gettext', 'ngettext', 'npgettext', 'pgettext'}\n            for name in allowed & set(names):\n                builtins.__dict__[name] = getattr(self, name)\n\n\nclass GNUTranslations(NullTranslations):\n    # Magic number of .mo files\n    LE_MAGIC = 0x950412de\n    BE_MAGIC = 0xde120495\n\n    # The encoding of a msgctxt and a msgid in a .mo file is\n    # msgctxt + \"\\x04\" + msgid (gettext version >= 0.15)\n    CONTEXT = \"%s\\x04%s\"\n\n    # Acceptable .mo versions\n    VERSIONS = (0, 1)\n\n    def _get_versions(self, version):\n        \"\"\"Returns a tuple of major version, minor version\"\"\"\n        return (version >> 16, version & 0xffff)\n\n    def _parse(self, fp):\n        \"\"\"Override this method to support alternative .mo formats.\"\"\"\n        # Delay struct import for speeding up gettext import when .mo files\n        # are not used.\n        from struct import unpack\n        filename = getattr(fp, 'name', '')\n        # Parse the .mo file header, which consists of 5 little endian 32\n        # bit words.\n        self._catalog = catalog = {}\n        self.plural = lambda n: int(n != 1) # germanic plural by default\n        buf = fp.read()\n        buflen = len(buf)\n        # Are we big endian or little endian?\n        magic = unpack('<I', buf[:4])[0]\n        if magic == self.LE_MAGIC:\n            version, msgcount, masteridx, transidx = unpack('<4I', buf[4:20])\n            ii = '<II'\n        elif magic == self.BE_MAGIC:\n            version, msgcount, masteridx, transidx = unpack('>4I', buf[4:20])\n            ii = '>II'\n        else:\n            raise OSError(0, 'Bad magic number', filename)\n\n        major_version, minor_version = self._get_versions(version)\n\n        if major_version not in self.VERSIONS:\n            raise OSError(0, 'Bad version number ' + str(major_version), filename)\n\n        # Now put all messages from the .mo file buffer into the catalog\n        # dictionary.\n        for i in range(0, msgcount):\n            mlen, moff = unpack(ii, buf[masteridx:masteridx+8])\n            mend = moff + mlen\n            tlen, toff = unpack(ii, buf[transidx:transidx+8])\n            tend = toff + tlen\n            if mend < buflen and tend < buflen:\n                msg = buf[moff:mend]\n                tmsg = buf[toff:tend]\n            else:\n                raise OSError(0, 'File is corrupt', filename)\n            # See if we're looking at GNU .mo conventions for metadata\n            if mlen == 0:\n                # Catalog description\n                lastk = None\n                for b_item in tmsg.split(b'\\n'):\n                    item = b_item.decode().strip()\n                    if not item:\n                        continue\n                    # Skip over comment lines:\n                    if item.startswith('#-#-#-#-#') and item.endswith('#-#-#-#-#'):\n                        continue\n                    k = v = None\n                    if ':' in item:\n                        k, v = item.split(':', 1)\n                        k = k.strip().lower()\n                        v = v.strip()\n                        self._info[k] = v\n                        lastk = k\n                    elif lastk:\n                        self._info[lastk] += '\\n' + item\n                    if k == 'content-type':\n                        self._charset = v.split('charset=')[1]\n                    elif k == 'plural-forms':\n                        v = v.split(';')\n                        plural = v[1].split('plural=')[1]\n                        self.plural = c2py(plural)\n            # Note: we unconditionally convert both msgids and msgstrs to\n            # Unicode using the character encoding specified in the charset\n            # parameter of the Content-Type header.  The gettext documentation\n            # strongly encourages msgids to be us-ascii, but some applications\n            # require alternative encodings (e.g. Zope's ZCML and ZPT).  For\n            # traditional gettext applications, the msgid conversion will\n            # cause no problems since us-ascii should always be a subset of\n            # the charset encoding.  We may want to fall back to 8-bit msgids\n            # if the Unicode conversion fails.\n            charset = self._charset or 'ascii'\n            if b'\\x00' in msg:\n                # Plural forms\n                msgid1, msgid2 = msg.split(b'\\x00')\n                tmsg = tmsg.split(b'\\x00')\n                msgid1 = str(msgid1, charset)\n                for i, x in enumerate(tmsg):\n                    catalog[(msgid1, i)] = str(x, charset)\n            else:\n                catalog[str(msg, charset)] = str(tmsg, charset)\n            # advance to next entry in the seek tables\n            masteridx += 8\n            transidx += 8\n\n    def gettext(self, message):\n        missing = object()\n        tmsg = self._catalog.get(message, missing)\n        if tmsg is missing:\n            tmsg = self._catalog.get((message, self.plural(1)), missing)\n        if tmsg is not missing:\n            return tmsg\n        if self._fallback:\n            return self._fallback.gettext(message)\n        return message\n\n    def ngettext(self, msgid1, msgid2, n):\n        try:\n            tmsg = self._catalog[(msgid1, self.plural(n))]\n        except KeyError:\n            if self._fallback:\n                return self._fallback.ngettext(msgid1, msgid2, n)\n            if n == 1:\n                tmsg = msgid1\n            else:\n                tmsg = msgid2\n        return tmsg\n\n    def pgettext(self, context, message):\n        ctxt_msg_id = self.CONTEXT % (context, message)\n        missing = object()\n        tmsg = self._catalog.get(ctxt_msg_id, missing)\n        if tmsg is missing:\n            tmsg = self._catalog.get((ctxt_msg_id, self.plural(1)), missing)\n        if tmsg is not missing:\n            return tmsg\n        if self._fallback:\n            return self._fallback.pgettext(context, message)\n        return message\n\n    def npgettext(self, context, msgid1, msgid2, n):\n        ctxt_msg_id = self.CONTEXT % (context, msgid1)\n        try:\n            tmsg = self._catalog[ctxt_msg_id, self.plural(n)]\n        except KeyError:\n            if self._fallback:\n                return self._fallback.npgettext(context, msgid1, msgid2, n)\n            if n == 1:\n                tmsg = msgid1\n            else:\n                tmsg = msgid2\n        return tmsg\n\n\n# Locate a .mo file using the gettext strategy\ndef find(domain, localedir=None, languages=None, all=False):\n    # Get some reasonable defaults for arguments that were not supplied\n    if localedir is None:\n        localedir = _default_localedir\n    if languages is None:\n        languages = []\n        for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):\n            val = os.environ.get(envar)\n            if val:\n                languages = val.split(':')\n                break\n        if 'C' not in languages:\n            languages.append('C')\n    # now normalize and expand the languages\n    nelangs = []\n    for lang in languages:\n        for nelang in _expand_lang(lang):\n            if nelang not in nelangs:\n                nelangs.append(nelang)\n    # select a language\n    if all:\n        result = []\n    else:\n        result = None\n    for lang in nelangs:\n        if lang == 'C':\n            break\n        mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)\n        if os.path.exists(mofile):\n            if all:\n                result.append(mofile)\n            else:\n                return mofile\n    return result\n\n\n# a mapping between absolute .mo file path and Translation object\n_translations = {}\n\n\ndef translation(domain, localedir=None, languages=None,\n                class_=None, fallback=False):\n    if class_ is None:\n        class_ = GNUTranslations\n    mofiles = find(domain, localedir, languages, all=True)\n    if not mofiles:\n        if fallback:\n            return NullTranslations()\n        from errno import ENOENT\n        raise FileNotFoundError(ENOENT,\n                                'No translation file found for domain', domain)\n    # Avoid opening, reading, and parsing the .mo file after it's been done\n    # once.\n    result = None\n    for mofile in mofiles:\n        key = (class_, os.path.abspath(mofile))\n        t = _translations.get(key)\n        if t is None:\n            with open(mofile, 'rb') as fp:\n                t = _translations.setdefault(key, class_(fp))\n        # Copy the translation object to allow setting fallbacks and\n        # output charset. All other instance data is shared with the\n        # cached object.\n        # Delay copy import for speeding up gettext import when .mo files\n        # are not used.\n        import copy\n        t = copy.copy(t)\n        if result is None:\n            result = t\n        else:\n            result.add_fallback(t)\n    return result\n\n\ndef install(domain, localedir=None, *, names=None):\n    t = translation(domain, localedir, fallback=True)\n    t.install(names)\n\n\n# a mapping b/w domains and locale directories\n_localedirs = {}\n# current global domain, `messages' used for compatibility w/ GNU gettext\n_current_domain = 'messages'\n\n\ndef textdomain(domain=None):\n    global _current_domain\n    if domain is not None:\n        _current_domain = domain\n    return _current_domain\n\n\ndef bindtextdomain(domain, localedir=None):\n    global _localedirs\n    if localedir is not None:\n        _localedirs[domain] = localedir\n    return _localedirs.get(domain, _default_localedir)\n\n\ndef dgettext(domain, message):\n    try:\n        t = translation(domain, _localedirs.get(domain, None))\n    except OSError:\n        return message\n    return t.gettext(message)\n\n\ndef dngettext(domain, msgid1, msgid2, n):\n    try:\n        t = translation(domain, _localedirs.get(domain, None))\n    except OSError:\n        if n == 1:\n            return msgid1\n        else:\n            return msgid2\n    return t.ngettext(msgid1, msgid2, n)\n\n\ndef dpgettext(domain, context, message):\n    try:\n        t = translation(domain, _localedirs.get(domain, None))\n    except OSError:\n        return message\n    return t.pgettext(context, message)\n\n\ndef dnpgettext(domain, context, msgid1, msgid2, n):\n    try:\n        t = translation(domain, _localedirs.get(domain, None))\n    except OSError:\n        if n == 1:\n            return msgid1\n        else:\n            return msgid2\n    return t.npgettext(context, msgid1, msgid2, n)\n\n\ndef gettext(message):\n    return dgettext(_current_domain, message)\n\n\ndef ngettext(msgid1, msgid2, n):\n    return dngettext(_current_domain, msgid1, msgid2, n)\n\n\ndef pgettext(context, message):\n    return dpgettext(_current_domain, context, message)\n\n\ndef npgettext(context, msgid1, msgid2, n):\n    return dnpgettext(_current_domain, context, msgid1, msgid2, n)\n\n\n# dcgettext() has been deemed unnecessary and is not implemented.\n\n# James Henstridge's Catalog constructor from GNOME gettext.  Documented usage\n# was:\n#\n#    import gettext\n#    cat = gettext.Catalog(PACKAGE, localedir=LOCALEDIR)\n#    _ = cat.gettext\n#    print _('Hello World')\n\n# The resulting catalog object currently don't support access through a\n# dictionary API, which was supported (but apparently unused) in GNOME\n# gettext.\n\nCatalog = translation\n", 646], "/home/tim/mambaforge/envs/llm/lib/python3.11/shutil.py": ["\"\"\"Utility functions for copying and archiving files and directory trees.\n\nXXX The functions here don't copy the resource fork or other metadata on Mac.\n\n\"\"\"\n\nimport os\nimport sys\nimport stat\nimport fnmatch\nimport collections\nimport errno\n\ntry:\n    import zlib\n    del zlib\n    _ZLIB_SUPPORTED = True\nexcept ImportError:\n    _ZLIB_SUPPORTED = False\n\ntry:\n    import bz2\n    del bz2\n    _BZ2_SUPPORTED = True\nexcept ImportError:\n    _BZ2_SUPPORTED = False\n\ntry:\n    import lzma\n    del lzma\n    _LZMA_SUPPORTED = True\nexcept ImportError:\n    _LZMA_SUPPORTED = False\n\n_WINDOWS = os.name == 'nt'\nposix = nt = None\nif os.name == 'posix':\n    import posix\nelif _WINDOWS:\n    import nt\n\nCOPY_BUFSIZE = 1024 * 1024 if _WINDOWS else 64 * 1024\n# This should never be removed, see rationale in:\n# https://bugs.python.org/issue43743#msg393429\n_USE_CP_SENDFILE = hasattr(os, \"sendfile\") and sys.platform.startswith(\"linux\")\n_HAS_FCOPYFILE = posix and hasattr(posix, \"_fcopyfile\")  # macOS\n\n# CMD defaults in Windows 10\n_WIN_DEFAULT_PATHEXT = \".COM;.EXE;.BAT;.CMD;.VBS;.JS;.WS;.MSC\"\n\n__all__ = [\"copyfileobj\", \"copyfile\", \"copymode\", \"copystat\", \"copy\", \"copy2\",\n           \"copytree\", \"move\", \"rmtree\", \"Error\", \"SpecialFileError\",\n           \"ExecError\", \"make_archive\", \"get_archive_formats\",\n           \"register_archive_format\", \"unregister_archive_format\",\n           \"get_unpack_formats\", \"register_unpack_format\",\n           \"unregister_unpack_format\", \"unpack_archive\",\n           \"ignore_patterns\", \"chown\", \"which\", \"get_terminal_size\",\n           \"SameFileError\"]\n           # disk_usage is added later, if available on the platform\n\nclass Error(OSError):\n    pass\n\nclass SameFileError(Error):\n    \"\"\"Raised when source and destination are the same file.\"\"\"\n\nclass SpecialFileError(OSError):\n    \"\"\"Raised when trying to do a kind of operation (e.g. copying) which is\n    not supported on a special file (e.g. a named pipe)\"\"\"\n\nclass ExecError(OSError):\n    \"\"\"Raised when a command could not be executed\"\"\"\n\nclass ReadError(OSError):\n    \"\"\"Raised when an archive cannot be read\"\"\"\n\nclass RegistryError(Exception):\n    \"\"\"Raised when a registry operation with the archiving\n    and unpacking registries fails\"\"\"\n\nclass _GiveupOnFastCopy(Exception):\n    \"\"\"Raised as a signal to fallback on using raw read()/write()\n    file copy when fast-copy functions fail to do so.\n    \"\"\"\n\ndef _fastcopy_fcopyfile(fsrc, fdst, flags):\n    \"\"\"Copy a regular file content or metadata by using high-performance\n    fcopyfile(3) syscall (macOS).\n    \"\"\"\n    try:\n        infd = fsrc.fileno()\n        outfd = fdst.fileno()\n    except Exception as err:\n        raise _GiveupOnFastCopy(err)  # not a regular file\n\n    try:\n        posix._fcopyfile(infd, outfd, flags)\n    except OSError as err:\n        err.filename = fsrc.name\n        err.filename2 = fdst.name\n        if err.errno in {errno.EINVAL, errno.ENOTSUP}:\n            raise _GiveupOnFastCopy(err)\n        else:\n            raise err from None\n\ndef _fastcopy_sendfile(fsrc, fdst):\n    \"\"\"Copy data from one regular mmap-like fd to another by using\n    high-performance sendfile(2) syscall.\n    This should work on Linux >= 2.6.33 only.\n    \"\"\"\n    # Note: copyfileobj() is left alone in order to not introduce any\n    # unexpected breakage. Possible risks by using zero-copy calls\n    # in copyfileobj() are:\n    # - fdst cannot be open in \"a\"(ppend) mode\n    # - fsrc and fdst may be open in \"t\"(ext) mode\n    # - fsrc may be a BufferedReader (which hides unread data in a buffer),\n    #   GzipFile (which decompresses data), HTTPResponse (which decodes\n    #   chunks).\n    # - possibly others (e.g. encrypted fs/partition?)\n    global _USE_CP_SENDFILE\n    try:\n        infd = fsrc.fileno()\n        outfd = fdst.fileno()\n    except Exception as err:\n        raise _GiveupOnFastCopy(err)  # not a regular file\n\n    # Hopefully the whole file will be copied in a single call.\n    # sendfile() is called in a loop 'till EOF is reached (0 return)\n    # so a bufsize smaller or bigger than the actual file size\n    # should not make any difference, also in case the file content\n    # changes while being copied.\n    try:\n        blocksize = max(os.fstat(infd).st_size, 2 ** 23)  # min 8MiB\n    except OSError:\n        blocksize = 2 ** 27  # 128MiB\n    # On 32-bit architectures truncate to 1GiB to avoid OverflowError,\n    # see bpo-38319.\n    if sys.maxsize < 2 ** 32:\n        blocksize = min(blocksize, 2 ** 30)\n\n    offset = 0\n    while True:\n        try:\n            sent = os.sendfile(outfd, infd, offset, blocksize)\n        except OSError as err:\n            # ...in oder to have a more informative exception.\n            err.filename = fsrc.name\n            err.filename2 = fdst.name\n\n            if err.errno == errno.ENOTSOCK:\n                # sendfile() on this platform (probably Linux < 2.6.33)\n                # does not support copies between regular files (only\n                # sockets).\n                _USE_CP_SENDFILE = False\n                raise _GiveupOnFastCopy(err)\n\n            if err.errno == errno.ENOSPC:  # filesystem is full\n                raise err from None\n\n            # Give up on first call and if no data was copied.\n            if offset == 0 and os.lseek(outfd, 0, os.SEEK_CUR) == 0:\n                raise _GiveupOnFastCopy(err)\n\n            raise err\n        else:\n            if sent == 0:\n                break  # EOF\n            offset += sent\n\ndef _copyfileobj_readinto(fsrc, fdst, length=COPY_BUFSIZE):\n    \"\"\"readinto()/memoryview() based variant of copyfileobj().\n    *fsrc* must support readinto() method and both files must be\n    open in binary mode.\n    \"\"\"\n    # Localize variable access to minimize overhead.\n    fsrc_readinto = fsrc.readinto\n    fdst_write = fdst.write\n    with memoryview(bytearray(length)) as mv:\n        while True:\n            n = fsrc_readinto(mv)\n            if not n:\n                break\n            elif n < length:\n                with mv[:n] as smv:\n                    fdst.write(smv)\n            else:\n                fdst_write(mv)\n\ndef copyfileobj(fsrc, fdst, length=0):\n    \"\"\"copy data from file-like object fsrc to file-like object fdst\"\"\"\n    if not length:\n        length = COPY_BUFSIZE\n    # Localize variable access to minimize overhead.\n    fsrc_read = fsrc.read\n    fdst_write = fdst.write\n    while True:\n        buf = fsrc_read(length)\n        if not buf:\n            break\n        fdst_write(buf)\n\ndef _samefile(src, dst):\n    # Macintosh, Unix.\n    if isinstance(src, os.DirEntry) and hasattr(os.path, 'samestat'):\n        try:\n            return os.path.samestat(src.stat(), os.stat(dst))\n        except OSError:\n            return False\n\n    if hasattr(os.path, 'samefile'):\n        try:\n            return os.path.samefile(src, dst)\n        except OSError:\n            return False\n\n    # All other platforms: check for same pathname.\n    return (os.path.normcase(os.path.abspath(src)) ==\n            os.path.normcase(os.path.abspath(dst)))\n\ndef _stat(fn):\n    return fn.stat() if isinstance(fn, os.DirEntry) else os.stat(fn)\n\ndef _islink(fn):\n    return fn.is_symlink() if isinstance(fn, os.DirEntry) else os.path.islink(fn)\n\ndef copyfile(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy data from src to dst in the most efficient way possible.\n\n    If follow_symlinks is not set and src is a symbolic link, a new\n    symlink will be created instead of copying the file it points to.\n\n    \"\"\"\n    sys.audit(\"shutil.copyfile\", src, dst)\n\n    if _samefile(src, dst):\n        raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n\n    file_size = 0\n    for i, fn in enumerate([src, dst]):\n        try:\n            st = _stat(fn)\n        except OSError:\n            # File most likely does not exist\n            pass\n        else:\n            # XXX What about other special files? (sockets, devices...)\n            if stat.S_ISFIFO(st.st_mode):\n                fn = fn.path if isinstance(fn, os.DirEntry) else fn\n                raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n            if _WINDOWS and i == 0:\n                file_size = st.st_size\n\n    if not follow_symlinks and _islink(src):\n        os.symlink(os.readlink(src), dst)\n    else:\n        with open(src, 'rb') as fsrc:\n            try:\n                with open(dst, 'wb') as fdst:\n                    # macOS\n                    if _HAS_FCOPYFILE:\n                        try:\n                            _fastcopy_fcopyfile(fsrc, fdst, posix._COPYFILE_DATA)\n                            return dst\n                        except _GiveupOnFastCopy:\n                            pass\n                    # Linux\n                    elif _USE_CP_SENDFILE:\n                        try:\n                            _fastcopy_sendfile(fsrc, fdst)\n                            return dst\n                        except _GiveupOnFastCopy:\n                            pass\n                    # Windows, see:\n                    # https://github.com/python/cpython/pull/7160#discussion_r195405230\n                    elif _WINDOWS and file_size > 0:\n                        _copyfileobj_readinto(fsrc, fdst, min(file_size, COPY_BUFSIZE))\n                        return dst\n\n                    copyfileobj(fsrc, fdst)\n\n            # Issue 43219, raise a less confusing exception\n            except IsADirectoryError as e:\n                if not os.path.exists(dst):\n                    raise FileNotFoundError(f'Directory does not exist: {dst}') from e\n                else:\n                    raise\n\n    return dst\n\ndef copymode(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy mode bits from src to dst.\n\n    If follow_symlinks is not set, symlinks aren't followed if and only\n    if both `src` and `dst` are symlinks.  If `lchmod` isn't available\n    (e.g. Linux) this method does nothing.\n\n    \"\"\"\n    sys.audit(\"shutil.copymode\", src, dst)\n\n    if not follow_symlinks and _islink(src) and os.path.islink(dst):\n        if hasattr(os, 'lchmod'):\n            stat_func, chmod_func = os.lstat, os.lchmod\n        else:\n            return\n    else:\n        stat_func, chmod_func = _stat, os.chmod\n\n    st = stat_func(src)\n    chmod_func(dst, stat.S_IMODE(st.st_mode))\n\nif hasattr(os, 'listxattr'):\n    def _copyxattr(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy extended filesystem attributes from `src` to `dst`.\n\n        Overwrite existing attributes.\n\n        If `follow_symlinks` is false, symlinks won't be followed.\n\n        \"\"\"\n\n        try:\n            names = os.listxattr(src, follow_symlinks=follow_symlinks)\n        except OSError as e:\n            if e.errno not in (errno.ENOTSUP, errno.ENODATA, errno.EINVAL):\n                raise\n            return\n        for name in names:\n            try:\n                value = os.getxattr(src, name, follow_symlinks=follow_symlinks)\n                os.setxattr(dst, name, value, follow_symlinks=follow_symlinks)\n            except OSError as e:\n                if e.errno not in (errno.EPERM, errno.ENOTSUP, errno.ENODATA,\n                                   errno.EINVAL):\n                    raise\nelse:\n    def _copyxattr(*args, **kwargs):\n        pass\n\ndef copystat(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy file metadata\n\n    Copy the permission bits, last access time, last modification time, and\n    flags from `src` to `dst`. On Linux, copystat() also copies the \"extended\n    attributes\" where possible. The file contents, owner, and group are\n    unaffected. `src` and `dst` are path-like objects or path names given as\n    strings.\n\n    If the optional flag `follow_symlinks` is not set, symlinks aren't\n    followed if and only if both `src` and `dst` are symlinks.\n    \"\"\"\n    sys.audit(\"shutil.copystat\", src, dst)\n\n    def _nop(*args, ns=None, follow_symlinks=None):\n        pass\n\n    # follow symlinks (aka don't not follow symlinks)\n    follow = follow_symlinks or not (_islink(src) and os.path.islink(dst))\n    if follow:\n        # use the real function if it exists\n        def lookup(name):\n            return getattr(os, name, _nop)\n    else:\n        # use the real function only if it exists\n        # *and* it supports follow_symlinks\n        def lookup(name):\n            fn = getattr(os, name, _nop)\n            if fn in os.supports_follow_symlinks:\n                return fn\n            return _nop\n\n    if isinstance(src, os.DirEntry):\n        st = src.stat(follow_symlinks=follow)\n    else:\n        st = lookup(\"stat\")(src, follow_symlinks=follow)\n    mode = stat.S_IMODE(st.st_mode)\n    lookup(\"utime\")(dst, ns=(st.st_atime_ns, st.st_mtime_ns),\n        follow_symlinks=follow)\n    # We must copy extended attributes before the file is (potentially)\n    # chmod()'ed read-only, otherwise setxattr() will error with -EACCES.\n    _copyxattr(src, dst, follow_symlinks=follow)\n    try:\n        lookup(\"chmod\")(dst, mode, follow_symlinks=follow)\n    except NotImplementedError:\n        # if we got a NotImplementedError, it's because\n        #   * follow_symlinks=False,\n        #   * lchown() is unavailable, and\n        #   * either\n        #       * fchownat() is unavailable or\n        #       * fchownat() doesn't implement AT_SYMLINK_NOFOLLOW.\n        #         (it returned ENOSUP.)\n        # therefore we're out of options--we simply cannot chown the\n        # symlink.  give up, suppress the error.\n        # (which is what shutil always did in this circumstance.)\n        pass\n    if hasattr(st, 'st_flags'):\n        try:\n            lookup(\"chflags\")(dst, st.st_flags, follow_symlinks=follow)\n        except OSError as why:\n            for err in 'EOPNOTSUPP', 'ENOTSUP':\n                if hasattr(errno, err) and why.errno == getattr(errno, err):\n                    break\n            else:\n                raise\n\ndef copy(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy data and mode bits (\"cp src dst\"). Return the file's destination.\n\n    The destination may be a directory.\n\n    If follow_symlinks is false, symlinks won't be followed. This\n    resembles GNU's \"cp -P src dst\".\n\n    If source and destination are the same file, a SameFileError will be\n    raised.\n\n    \"\"\"\n    if os.path.isdir(dst):\n        dst = os.path.join(dst, os.path.basename(src))\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n    copymode(src, dst, follow_symlinks=follow_symlinks)\n    return dst\n\ndef copy2(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy data and metadata. Return the file's destination.\n\n    Metadata is copied with copystat(). Please see the copystat function\n    for more information.\n\n    The destination may be a directory.\n\n    If follow_symlinks is false, symlinks won't be followed. This\n    resembles GNU's \"cp -P src dst\".\n    \"\"\"\n    if os.path.isdir(dst):\n        dst = os.path.join(dst, os.path.basename(src))\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n    copystat(src, dst, follow_symlinks=follow_symlinks)\n    return dst\n\ndef ignore_patterns(*patterns):\n    \"\"\"Function that can be used as copytree() ignore parameter.\n\n    Patterns is a sequence of glob-style patterns\n    that are used to exclude files\"\"\"\n    def _ignore_patterns(path, names):\n        ignored_names = []\n        for pattern in patterns:\n            ignored_names.extend(fnmatch.filter(names, pattern))\n        return set(ignored_names)\n    return _ignore_patterns\n\ndef _copytree(entries, src, dst, symlinks, ignore, copy_function,\n              ignore_dangling_symlinks, dirs_exist_ok=False):\n    if ignore is not None:\n        ignored_names = ignore(os.fspath(src), [x.name for x in entries])\n    else:\n        ignored_names = ()\n\n    os.makedirs(dst, exist_ok=dirs_exist_ok)\n    errors = []\n    use_srcentry = copy_function is copy2 or copy_function is copy\n\n    for srcentry in entries:\n        if srcentry.name in ignored_names:\n            continue\n        srcname = os.path.join(src, srcentry.name)\n        dstname = os.path.join(dst, srcentry.name)\n        srcobj = srcentry if use_srcentry else srcname\n        try:\n            is_symlink = srcentry.is_symlink()\n            if is_symlink and os.name == 'nt':\n                # Special check for directory junctions, which appear as\n                # symlinks but we want to recurse.\n                lstat = srcentry.stat(follow_symlinks=False)\n                if lstat.st_reparse_tag == stat.IO_REPARSE_TAG_MOUNT_POINT:\n                    is_symlink = False\n            if is_symlink:\n                linkto = os.readlink(srcname)\n                if symlinks:\n                    # We can't just leave it to `copy_function` because legacy\n                    # code with a custom `copy_function` may rely on copytree\n                    # doing the right thing.\n                    os.symlink(linkto, dstname)\n                    copystat(srcobj, dstname, follow_symlinks=not symlinks)\n                else:\n                    # ignore dangling symlink if the flag is on\n                    if not os.path.exists(linkto) and ignore_dangling_symlinks:\n                        continue\n                    # otherwise let the copy occur. copy2 will raise an error\n                    if srcentry.is_dir():\n                        copytree(srcobj, dstname, symlinks, ignore,\n                                 copy_function, ignore_dangling_symlinks,\n                                 dirs_exist_ok)\n                    else:\n                        copy_function(srcobj, dstname)\n            elif srcentry.is_dir():\n                copytree(srcobj, dstname, symlinks, ignore, copy_function,\n                         ignore_dangling_symlinks, dirs_exist_ok)\n            else:\n                # Will raise a SpecialFileError for unsupported file types\n                copy_function(srcobj, dstname)\n        # catch the Error from the recursive copytree so that we can\n        # continue with other files\n        except Error as err:\n            errors.extend(err.args[0])\n        except OSError as why:\n            errors.append((srcname, dstname, str(why)))\n    try:\n        copystat(src, dst)\n    except OSError as why:\n        # Copying file access times may fail on Windows\n        if getattr(why, 'winerror', None) is None:\n            errors.append((src, dst, str(why)))\n    if errors:\n        raise Error(errors)\n    return dst\n\ndef copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n             ignore_dangling_symlinks=False, dirs_exist_ok=False):\n    \"\"\"Recursively copy a directory tree and return the destination directory.\n\n    If exception(s) occur, an Error is raised with a list of reasons.\n\n    If the optional symlinks flag is true, symbolic links in the\n    source tree result in symbolic links in the destination tree; if\n    it is false, the contents of the files pointed to by symbolic\n    links are copied. If the file pointed by the symlink doesn't\n    exist, an exception will be added in the list of errors raised in\n    an Error exception at the end of the copy process.\n\n    You can set the optional ignore_dangling_symlinks flag to true if you\n    want to silence this exception. Notice that this has no effect on\n    platforms that don't support os.symlink.\n\n    The optional ignore argument is a callable. If given, it\n    is called with the `src` parameter, which is the directory\n    being visited by copytree(), and `names` which is the list of\n    `src` contents, as returned by os.listdir():\n\n        callable(src, names) -> ignored_names\n\n    Since copytree() is called recursively, the callable will be\n    called once for each directory that is copied. It returns a\n    list of names relative to the `src` directory that should\n    not be copied.\n\n    The optional copy_function argument is a callable that will be used\n    to copy each file. It will be called with the source path and the\n    destination path as arguments. By default, copy2() is used, but any\n    function that supports the same signature (like copy()) can be used.\n\n    If dirs_exist_ok is false (the default) and `dst` already exists, a\n    `FileExistsError` is raised. If `dirs_exist_ok` is true, the copying\n    operation will continue if it encounters existing directories, and files\n    within the `dst` tree will be overwritten by corresponding files from the\n    `src` tree.\n    \"\"\"\n    sys.audit(\"shutil.copytree\", src, dst)\n    with os.scandir(src) as itr:\n        entries = list(itr)\n    return _copytree(entries=entries, src=src, dst=dst, symlinks=symlinks,\n                     ignore=ignore, copy_function=copy_function,\n                     ignore_dangling_symlinks=ignore_dangling_symlinks,\n                     dirs_exist_ok=dirs_exist_ok)\n\nif hasattr(os.stat_result, 'st_file_attributes'):\n    # Special handling for directory junctions to make them behave like\n    # symlinks for shutil.rmtree, since in general they do not appear as\n    # regular links.\n    def _rmtree_isdir(entry):\n        try:\n            st = entry.stat(follow_symlinks=False)\n            return (stat.S_ISDIR(st.st_mode) and not\n                (st.st_file_attributes & stat.FILE_ATTRIBUTE_REPARSE_POINT\n                 and st.st_reparse_tag == stat.IO_REPARSE_TAG_MOUNT_POINT))\n        except OSError:\n            return False\n\n    def _rmtree_islink(path):\n        try:\n            st = os.lstat(path)\n            return (stat.S_ISLNK(st.st_mode) or\n                (st.st_file_attributes & stat.FILE_ATTRIBUTE_REPARSE_POINT\n                 and st.st_reparse_tag == stat.IO_REPARSE_TAG_MOUNT_POINT))\n        except OSError:\n            return False\nelse:\n    def _rmtree_isdir(entry):\n        try:\n            return entry.is_dir(follow_symlinks=False)\n        except OSError:\n            return False\n\n    def _rmtree_islink(path):\n        return os.path.islink(path)\n\n# version vulnerable to race conditions\ndef _rmtree_unsafe(path, onerror):\n    try:\n        with os.scandir(path) as scandir_it:\n            entries = list(scandir_it)\n    except OSError:\n        onerror(os.scandir, path, sys.exc_info())\n        entries = []\n    for entry in entries:\n        fullname = entry.path\n        if _rmtree_isdir(entry):\n            try:\n                if entry.is_symlink():\n                    # This can only happen if someone replaces\n                    # a directory with a symlink after the call to\n                    # os.scandir or entry.is_dir above.\n                    raise OSError(\"Cannot call rmtree on a symbolic link\")\n            except OSError:\n                onerror(os.path.islink, fullname, sys.exc_info())\n                continue\n            _rmtree_unsafe(fullname, onerror)\n        else:\n            try:\n                os.unlink(fullname)\n            except OSError:\n                onerror(os.unlink, fullname, sys.exc_info())\n    try:\n        os.rmdir(path)\n    except OSError:\n        onerror(os.rmdir, path, sys.exc_info())\n\n# Version using fd-based APIs to protect against races\ndef _rmtree_safe_fd(topfd, path, onerror):\n    try:\n        with os.scandir(topfd) as scandir_it:\n            entries = list(scandir_it)\n    except OSError as err:\n        err.filename = path\n        onerror(os.scandir, path, sys.exc_info())\n        return\n    for entry in entries:\n        fullname = os.path.join(path, entry.name)\n        try:\n            is_dir = entry.is_dir(follow_symlinks=False)\n        except OSError:\n            is_dir = False\n        else:\n            if is_dir:\n                try:\n                    orig_st = entry.stat(follow_symlinks=False)\n                    is_dir = stat.S_ISDIR(orig_st.st_mode)\n                except OSError:\n                    onerror(os.lstat, fullname, sys.exc_info())\n                    continue\n        if is_dir:\n            try:\n                dirfd = os.open(entry.name, os.O_RDONLY, dir_fd=topfd)\n                dirfd_closed = False\n            except OSError:\n                onerror(os.open, fullname, sys.exc_info())\n            else:\n                try:\n                    if os.path.samestat(orig_st, os.fstat(dirfd)):\n                        _rmtree_safe_fd(dirfd, fullname, onerror)\n                        try:\n                            os.close(dirfd)\n                            dirfd_closed = True\n                            os.rmdir(entry.name, dir_fd=topfd)\n                        except OSError:\n                            onerror(os.rmdir, fullname, sys.exc_info())\n                    else:\n                        try:\n                            # This can only happen if someone replaces\n                            # a directory with a symlink after the call to\n                            # os.scandir or stat.S_ISDIR above.\n                            raise OSError(\"Cannot call rmtree on a symbolic \"\n                                          \"link\")\n                        except OSError:\n                            onerror(os.path.islink, fullname, sys.exc_info())\n                finally:\n                    if not dirfd_closed:\n                        os.close(dirfd)\n        else:\n            try:\n                os.unlink(entry.name, dir_fd=topfd)\n            except OSError:\n                onerror(os.unlink, fullname, sys.exc_info())\n\n_use_fd_functions = ({os.open, os.stat, os.unlink, os.rmdir} <=\n                     os.supports_dir_fd and\n                     os.scandir in os.supports_fd and\n                     os.stat in os.supports_follow_symlinks)\n\ndef rmtree(path, ignore_errors=False, onerror=None, *, dir_fd=None):\n    \"\"\"Recursively delete a directory tree.\n\n    If dir_fd is not None, it should be a file descriptor open to a directory;\n    path will then be relative to that directory.\n    dir_fd may not be implemented on your platform.\n    If it is unavailable, using it will raise a NotImplementedError.\n\n    If ignore_errors is set, errors are ignored; otherwise, if onerror\n    is set, it is called to handle the error with arguments (func,\n    path, exc_info) where func is platform and implementation dependent;\n    path is the argument to that function that caused it to fail; and\n    exc_info is a tuple returned by sys.exc_info().  If ignore_errors\n    is false and onerror is None, an exception is raised.\n\n    \"\"\"\n    sys.audit(\"shutil.rmtree\", path, dir_fd)\n    if ignore_errors:\n        def onerror(*args):\n            pass\n    elif onerror is None:\n        def onerror(*args):\n            raise\n    if _use_fd_functions:\n        # While the unsafe rmtree works fine on bytes, the fd based does not.\n        if isinstance(path, bytes):\n            path = os.fsdecode(path)\n        # Note: To guard against symlink races, we use the standard\n        # lstat()/open()/fstat() trick.\n        try:\n            orig_st = os.lstat(path, dir_fd=dir_fd)\n        except Exception:\n            onerror(os.lstat, path, sys.exc_info())\n            return\n        try:\n            fd = os.open(path, os.O_RDONLY, dir_fd=dir_fd)\n            fd_closed = False\n        except Exception:\n            onerror(os.open, path, sys.exc_info())\n            return\n        try:\n            if os.path.samestat(orig_st, os.fstat(fd)):\n                _rmtree_safe_fd(fd, path, onerror)\n                try:\n                    os.close(fd)\n                    fd_closed = True\n                    os.rmdir(path, dir_fd=dir_fd)\n                except OSError:\n                    onerror(os.rmdir, path, sys.exc_info())\n            else:\n                try:\n                    # symlinks to directories are forbidden, see bug #1669\n                    raise OSError(\"Cannot call rmtree on a symbolic link\")\n                except OSError:\n                    onerror(os.path.islink, path, sys.exc_info())\n        finally:\n            if not fd_closed:\n                os.close(fd)\n    else:\n        if dir_fd is not None:\n            raise NotImplementedError(\"dir_fd unavailable on this platform\")\n        try:\n            if _rmtree_islink(path):\n                # symlinks to directories are forbidden, see bug #1669\n                raise OSError(\"Cannot call rmtree on a symbolic link\")\n        except OSError:\n            onerror(os.path.islink, path, sys.exc_info())\n            # can't continue even if onerror hook returns\n            return\n        return _rmtree_unsafe(path, onerror)\n\n# Allow introspection of whether or not the hardening against symlink\n# attacks is supported on the current platform\nrmtree.avoids_symlink_attacks = _use_fd_functions\n\ndef _basename(path):\n    \"\"\"A basename() variant which first strips the trailing slash, if present.\n    Thus we always get the last component of the path, even for directories.\n\n    path: Union[PathLike, str]\n\n    e.g.\n    >>> os.path.basename('/bar/foo')\n    'foo'\n    >>> os.path.basename('/bar/foo/')\n    ''\n    >>> _basename('/bar/foo/')\n    'foo'\n    \"\"\"\n    path = os.fspath(path)\n    sep = os.path.sep + (os.path.altsep or '')\n    return os.path.basename(path.rstrip(sep))\n\ndef move(src, dst, copy_function=copy2):\n    \"\"\"Recursively move a file or directory to another location. This is\n    similar to the Unix \"mv\" command. Return the file or directory's\n    destination.\n\n    If the destination is a directory or a symlink to a directory, the source\n    is moved inside the directory. The destination path must not already\n    exist.\n\n    If the destination already exists but is not a directory, it may be\n    overwritten depending on os.rename() semantics.\n\n    If the destination is on our current filesystem, then rename() is used.\n    Otherwise, src is copied to the destination and then removed. Symlinks are\n    recreated under the new name if os.rename() fails because of cross\n    filesystem renames.\n\n    The optional `copy_function` argument is a callable that will be used\n    to copy the source or it will be delegated to `copytree`.\n    By default, copy2() is used, but any function that supports the same\n    signature (like copy()) can be used.\n\n    A lot more could be done here...  A look at a mv.c shows a lot of\n    the issues this implementation glosses over.\n\n    \"\"\"\n    sys.audit(\"shutil.move\", src, dst)\n    real_dst = dst\n    if os.path.isdir(dst):\n        if _samefile(src, dst):\n            # We might be on a case insensitive filesystem,\n            # perform the rename anyway.\n            os.rename(src, dst)\n            return\n\n        # Using _basename instead of os.path.basename is important, as we must\n        # ignore any trailing slash to avoid the basename returning ''\n        real_dst = os.path.join(dst, _basename(src))\n\n        if os.path.exists(real_dst):\n            raise Error(\"Destination path '%s' already exists\" % real_dst)\n    try:\n        os.rename(src, real_dst)\n    except OSError:\n        if os.path.islink(src):\n            linkto = os.readlink(src)\n            os.symlink(linkto, real_dst)\n            os.unlink(src)\n        elif os.path.isdir(src):\n            if _destinsrc(src, dst):\n                raise Error(\"Cannot move a directory '%s' into itself\"\n                            \" '%s'.\" % (src, dst))\n            if (_is_immutable(src)\n                    or (not os.access(src, os.W_OK) and os.listdir(src)\n                        and sys.platform == 'darwin')):\n                raise PermissionError(\"Cannot move the non-empty directory \"\n                                      \"'%s': Lacking write permission to '%s'.\"\n                                      % (src, src))\n            copytree(src, real_dst, copy_function=copy_function,\n                     symlinks=True)\n            rmtree(src)\n        else:\n            copy_function(src, real_dst)\n            os.unlink(src)\n    return real_dst\n\ndef _destinsrc(src, dst):\n    src = os.path.abspath(src)\n    dst = os.path.abspath(dst)\n    if not src.endswith(os.path.sep):\n        src += os.path.sep\n    if not dst.endswith(os.path.sep):\n        dst += os.path.sep\n    return dst.startswith(src)\n\ndef _is_immutable(src):\n    st = _stat(src)\n    immutable_states = [stat.UF_IMMUTABLE, stat.SF_IMMUTABLE]\n    return hasattr(st, 'st_flags') and st.st_flags in immutable_states\n\ndef _get_gid(name):\n    \"\"\"Returns a gid, given a group name.\"\"\"\n    if name is None:\n        return None\n\n    try:\n        from grp import getgrnam\n    except ImportError:\n        return None\n\n    try:\n        result = getgrnam(name)\n    except KeyError:\n        result = None\n    if result is not None:\n        return result[2]\n    return None\n\ndef _get_uid(name):\n    \"\"\"Returns an uid, given a user name.\"\"\"\n    if name is None:\n        return None\n\n    try:\n        from pwd import getpwnam\n    except ImportError:\n        return None\n\n    try:\n        result = getpwnam(name)\n    except KeyError:\n        result = None\n    if result is not None:\n        return result[2]\n    return None\n\ndef _make_tarball(base_name, base_dir, compress=\"gzip\", verbose=0, dry_run=0,\n                  owner=None, group=None, logger=None, root_dir=None):\n    \"\"\"Create a (possibly compressed) tar file from all the files under\n    'base_dir'.\n\n    'compress' must be \"gzip\" (the default), \"bzip2\", \"xz\", or None.\n\n    'owner' and 'group' can be used to define an owner and a group for the\n    archive that is being built. If not provided, the current owner and group\n    will be used.\n\n    The output tar file will be named 'base_name' +  \".tar\", possibly plus\n    the appropriate compression extension (\".gz\", \".bz2\", or \".xz\").\n\n    Returns the output filename.\n    \"\"\"\n    if compress is None:\n        tar_compression = ''\n    elif _ZLIB_SUPPORTED and compress == 'gzip':\n        tar_compression = 'gz'\n    elif _BZ2_SUPPORTED and compress == 'bzip2':\n        tar_compression = 'bz2'\n    elif _LZMA_SUPPORTED and compress == 'xz':\n        tar_compression = 'xz'\n    else:\n        raise ValueError(\"bad value for 'compress', or compression format not \"\n                         \"supported : {0}\".format(compress))\n\n    import tarfile  # late import for breaking circular dependency\n\n    compress_ext = '.' + tar_compression if compress else ''\n    archive_name = base_name + '.tar' + compress_ext\n    archive_dir = os.path.dirname(archive_name)\n\n    if archive_dir and not os.path.exists(archive_dir):\n        if logger is not None:\n            logger.info(\"creating %s\", archive_dir)\n        if not dry_run:\n            os.makedirs(archive_dir)\n\n    # creating the tarball\n    if logger is not None:\n        logger.info('Creating tar archive')\n\n    uid = _get_uid(owner)\n    gid = _get_gid(group)\n\n    def _set_uid_gid(tarinfo):\n        if gid is not None:\n            tarinfo.gid = gid\n            tarinfo.gname = group\n        if uid is not None:\n            tarinfo.uid = uid\n            tarinfo.uname = owner\n        return tarinfo\n\n    if not dry_run:\n        tar = tarfile.open(archive_name, 'w|%s' % tar_compression)\n        arcname = base_dir\n        if root_dir is not None:\n            base_dir = os.path.join(root_dir, base_dir)\n        try:\n            tar.add(base_dir, arcname, filter=_set_uid_gid)\n        finally:\n            tar.close()\n\n    if root_dir is not None:\n        archive_name = os.path.abspath(archive_name)\n    return archive_name\n\ndef _make_zipfile(base_name, base_dir, verbose=0, dry_run=0,\n                  logger=None, owner=None, group=None, root_dir=None):\n    \"\"\"Create a zip file from all the files under 'base_dir'.\n\n    The output zip file will be named 'base_name' + \".zip\".  Returns the\n    name of the output zip file.\n    \"\"\"\n    import zipfile  # late import for breaking circular dependency\n\n    zip_filename = base_name + \".zip\"\n    archive_dir = os.path.dirname(base_name)\n\n    if archive_dir and not os.path.exists(archive_dir):\n        if logger is not None:\n            logger.info(\"creating %s\", archive_dir)\n        if not dry_run:\n            os.makedirs(archive_dir)\n\n    if logger is not None:\n        logger.info(\"creating '%s' and adding '%s' to it\",\n                    zip_filename, base_dir)\n\n    if not dry_run:\n        with zipfile.ZipFile(zip_filename, \"w\",\n                             compression=zipfile.ZIP_DEFLATED) as zf:\n            arcname = os.path.normpath(base_dir)\n            if root_dir is not None:\n                base_dir = os.path.join(root_dir, base_dir)\n            base_dir = os.path.normpath(base_dir)\n            if arcname != os.curdir:\n                zf.write(base_dir, arcname)\n                if logger is not None:\n                    logger.info(\"adding '%s'\", base_dir)\n            for dirpath, dirnames, filenames in os.walk(base_dir):\n                arcdirpath = dirpath\n                if root_dir is not None:\n                    arcdirpath = os.path.relpath(arcdirpath, root_dir)\n                arcdirpath = os.path.normpath(arcdirpath)\n                for name in sorted(dirnames):\n                    path = os.path.join(dirpath, name)\n                    arcname = os.path.join(arcdirpath, name)\n                    zf.write(path, arcname)\n                    if logger is not None:\n                        logger.info(\"adding '%s'\", path)\n                for name in filenames:\n                    path = os.path.join(dirpath, name)\n                    path = os.path.normpath(path)\n                    if os.path.isfile(path):\n                        arcname = os.path.join(arcdirpath, name)\n                        zf.write(path, arcname)\n                        if logger is not None:\n                            logger.info(\"adding '%s'\", path)\n\n    if root_dir is not None:\n        zip_filename = os.path.abspath(zip_filename)\n    return zip_filename\n\n# Maps the name of the archive format to a tuple containing:\n# * the archiving function\n# * extra keyword arguments\n# * description\n# * does it support the root_dir argument?\n_ARCHIVE_FORMATS = {\n    'tar':   (_make_tarball, [('compress', None)],\n              \"uncompressed tar file\", True),\n}\n\nif _ZLIB_SUPPORTED:\n    _ARCHIVE_FORMATS['gztar'] = (_make_tarball, [('compress', 'gzip')],\n                                \"gzip'ed tar-file\", True)\n    _ARCHIVE_FORMATS['zip'] = (_make_zipfile, [], \"ZIP file\", True)\n\nif _BZ2_SUPPORTED:\n    _ARCHIVE_FORMATS['bztar'] = (_make_tarball, [('compress', 'bzip2')],\n                                \"bzip2'ed tar-file\", True)\n\nif _LZMA_SUPPORTED:\n    _ARCHIVE_FORMATS['xztar'] = (_make_tarball, [('compress', 'xz')],\n                                \"xz'ed tar-file\", True)\n\ndef get_archive_formats():\n    \"\"\"Returns a list of supported formats for archiving and unarchiving.\n\n    Each element of the returned sequence is a tuple (name, description)\n    \"\"\"\n    formats = [(name, registry[2]) for name, registry in\n               _ARCHIVE_FORMATS.items()]\n    formats.sort()\n    return formats\n\ndef register_archive_format(name, function, extra_args=None, description=''):\n    \"\"\"Registers an archive format.\n\n    name is the name of the format. function is the callable that will be\n    used to create archives. If provided, extra_args is a sequence of\n    (name, value) tuples that will be passed as arguments to the callable.\n    description can be provided to describe the format, and will be returned\n    by the get_archive_formats() function.\n    \"\"\"\n    if extra_args is None:\n        extra_args = []\n    if not callable(function):\n        raise TypeError('The %s object is not callable' % function)\n    if not isinstance(extra_args, (tuple, list)):\n        raise TypeError('extra_args needs to be a sequence')\n    for element in extra_args:\n        if not isinstance(element, (tuple, list)) or len(element) !=2:\n            raise TypeError('extra_args elements are : (arg_name, value)')\n\n    _ARCHIVE_FORMATS[name] = (function, extra_args, description, False)\n\ndef unregister_archive_format(name):\n    del _ARCHIVE_FORMATS[name]\n\ndef make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0,\n                 dry_run=0, owner=None, group=None, logger=None):\n    \"\"\"Create an archive file (eg. zip or tar).\n\n    'base_name' is the name of the file to create, minus any format-specific\n    extension; 'format' is the archive format: one of \"zip\", \"tar\", \"gztar\",\n    \"bztar\", or \"xztar\".  Or any other registered format.\n\n    'root_dir' is a directory that will be the root directory of the\n    archive; ie. we typically chdir into 'root_dir' before creating the\n    archive.  'base_dir' is the directory where we start archiving from;\n    ie. 'base_dir' will be the common prefix of all files and\n    directories in the archive.  'root_dir' and 'base_dir' both default\n    to the current directory.  Returns the name of the archive file.\n\n    'owner' and 'group' are used when creating a tar archive. By default,\n    uses the current owner and group.\n    \"\"\"\n    sys.audit(\"shutil.make_archive\", base_name, format, root_dir, base_dir)\n    try:\n        format_info = _ARCHIVE_FORMATS[format]\n    except KeyError:\n        raise ValueError(\"unknown archive format '%s'\" % format) from None\n\n    kwargs = {'dry_run': dry_run, 'logger': logger,\n              'owner': owner, 'group': group}\n\n    func = format_info[0]\n    for arg, val in format_info[1]:\n        kwargs[arg] = val\n\n    if base_dir is None:\n        base_dir = os.curdir\n\n    supports_root_dir = format_info[3]\n    save_cwd = None\n    if root_dir is not None:\n        stmd = os.stat(root_dir).st_mode\n        if not stat.S_ISDIR(stmd):\n            raise NotADirectoryError(errno.ENOTDIR, 'Not a directory', root_dir)\n\n        if supports_root_dir:\n            # Support path-like base_name here for backwards-compatibility.\n            base_name = os.fspath(base_name)\n            kwargs['root_dir'] = root_dir\n        else:\n            save_cwd = os.getcwd()\n            if logger is not None:\n                logger.debug(\"changing into '%s'\", root_dir)\n            base_name = os.path.abspath(base_name)\n            if not dry_run:\n                os.chdir(root_dir)\n\n    try:\n        filename = func(base_name, base_dir, **kwargs)\n    finally:\n        if save_cwd is not None:\n            if logger is not None:\n                logger.debug(\"changing back to '%s'\", save_cwd)\n            os.chdir(save_cwd)\n\n    return filename\n\n\ndef get_unpack_formats():\n    \"\"\"Returns a list of supported formats for unpacking.\n\n    Each element of the returned sequence is a tuple\n    (name, extensions, description)\n    \"\"\"\n    formats = [(name, info[0], info[3]) for name, info in\n               _UNPACK_FORMATS.items()]\n    formats.sort()\n    return formats\n\ndef _check_unpack_options(extensions, function, extra_args):\n    \"\"\"Checks what gets registered as an unpacker.\"\"\"\n    # first make sure no other unpacker is registered for this extension\n    existing_extensions = {}\n    for name, info in _UNPACK_FORMATS.items():\n        for ext in info[0]:\n            existing_extensions[ext] = name\n\n    for extension in extensions:\n        if extension in existing_extensions:\n            msg = '%s is already registered for \"%s\"'\n            raise RegistryError(msg % (extension,\n                                       existing_extensions[extension]))\n\n    if not callable(function):\n        raise TypeError('The registered function must be a callable')\n\n\ndef register_unpack_format(name, extensions, function, extra_args=None,\n                           description=''):\n    \"\"\"Registers an unpack format.\n\n    `name` is the name of the format. `extensions` is a list of extensions\n    corresponding to the format.\n\n    `function` is the callable that will be\n    used to unpack archives. The callable will receive archives to unpack.\n    If it's unable to handle an archive, it needs to raise a ReadError\n    exception.\n\n    If provided, `extra_args` is a sequence of\n    (name, value) tuples that will be passed as arguments to the callable.\n    description can be provided to describe the format, and will be returned\n    by the get_unpack_formats() function.\n    \"\"\"\n    if extra_args is None:\n        extra_args = []\n    _check_unpack_options(extensions, function, extra_args)\n    _UNPACK_FORMATS[name] = extensions, function, extra_args, description\n\ndef unregister_unpack_format(name):\n    \"\"\"Removes the pack format from the registry.\"\"\"\n    del _UNPACK_FORMATS[name]\n\ndef _ensure_directory(path):\n    \"\"\"Ensure that the parent directory of `path` exists\"\"\"\n    dirname = os.path.dirname(path)\n    if not os.path.isdir(dirname):\n        os.makedirs(dirname)\n\ndef _unpack_zipfile(filename, extract_dir):\n    \"\"\"Unpack zip `filename` to `extract_dir`\n    \"\"\"\n    import zipfile  # late import for breaking circular dependency\n\n    if not zipfile.is_zipfile(filename):\n        raise ReadError(\"%s is not a zip file\" % filename)\n\n    zip = zipfile.ZipFile(filename)\n    try:\n        for info in zip.infolist():\n            name = info.filename\n\n            # don't extract absolute paths or ones with .. in them\n            if name.startswith('/') or '..' in name:\n                continue\n\n            targetpath = os.path.join(extract_dir, *name.split('/'))\n            if not targetpath:\n                continue\n\n            _ensure_directory(targetpath)\n            if not name.endswith('/'):\n                # file\n                with zip.open(name, 'r') as source, \\\n                        open(targetpath, 'wb') as target:\n                    copyfileobj(source, target)\n    finally:\n        zip.close()\n\ndef _unpack_tarfile(filename, extract_dir, *, filter=None):\n    \"\"\"Unpack tar/tar.gz/tar.bz2/tar.xz `filename` to `extract_dir`\n    \"\"\"\n    import tarfile  # late import for breaking circular dependency\n    try:\n        tarobj = tarfile.open(filename)\n    except tarfile.TarError:\n        raise ReadError(\n            \"%s is not a compressed or uncompressed tar file\" % filename)\n    try:\n        tarobj.extractall(extract_dir, filter=filter)\n    finally:\n        tarobj.close()\n\n# Maps the name of the unpack format to a tuple containing:\n# * extensions\n# * the unpacking function\n# * extra keyword arguments\n# * description\n_UNPACK_FORMATS = {\n    'tar':   (['.tar'], _unpack_tarfile, [], \"uncompressed tar file\"),\n    'zip':   (['.zip'], _unpack_zipfile, [], \"ZIP file\"),\n}\n\nif _ZLIB_SUPPORTED:\n    _UNPACK_FORMATS['gztar'] = (['.tar.gz', '.tgz'], _unpack_tarfile, [],\n                                \"gzip'ed tar-file\")\n\nif _BZ2_SUPPORTED:\n    _UNPACK_FORMATS['bztar'] = (['.tar.bz2', '.tbz2'], _unpack_tarfile, [],\n                                \"bzip2'ed tar-file\")\n\nif _LZMA_SUPPORTED:\n    _UNPACK_FORMATS['xztar'] = (['.tar.xz', '.txz'], _unpack_tarfile, [],\n                                \"xz'ed tar-file\")\n\ndef _find_unpack_format(filename):\n    for name, info in _UNPACK_FORMATS.items():\n        for extension in info[0]:\n            if filename.endswith(extension):\n                return name\n    return None\n\ndef unpack_archive(filename, extract_dir=None, format=None, *, filter=None):\n    \"\"\"Unpack an archive.\n\n    `filename` is the name of the archive.\n\n    `extract_dir` is the name of the target directory, where the archive\n    is unpacked. If not provided, the current working directory is used.\n\n    `format` is the archive format: one of \"zip\", \"tar\", \"gztar\", \"bztar\",\n    or \"xztar\".  Or any other registered format.  If not provided,\n    unpack_archive will use the filename extension and see if an unpacker\n    was registered for that extension.\n\n    In case none is found, a ValueError is raised.\n\n    If `filter` is given, it is passed to the underlying\n    extraction function.\n    \"\"\"\n    sys.audit(\"shutil.unpack_archive\", filename, extract_dir, format)\n\n    if extract_dir is None:\n        extract_dir = os.getcwd()\n\n    extract_dir = os.fspath(extract_dir)\n    filename = os.fspath(filename)\n\n    if filter is None:\n        filter_kwargs = {}\n    else:\n        filter_kwargs = {'filter': filter}\n    if format is not None:\n        try:\n            format_info = _UNPACK_FORMATS[format]\n        except KeyError:\n            raise ValueError(\"Unknown unpack format '{0}'\".format(format)) from None\n\n        func = format_info[1]\n        func(filename, extract_dir, **dict(format_info[2]), **filter_kwargs)\n    else:\n        # we need to look at the registered unpackers supported extensions\n        format = _find_unpack_format(filename)\n        if format is None:\n            raise ReadError(\"Unknown archive format '{0}'\".format(filename))\n\n        func = _UNPACK_FORMATS[format][1]\n        kwargs = dict(_UNPACK_FORMATS[format][2]) | filter_kwargs\n        func(filename, extract_dir, **kwargs)\n\n\nif hasattr(os, 'statvfs'):\n\n    __all__.append('disk_usage')\n    _ntuple_diskusage = collections.namedtuple('usage', 'total used free')\n    _ntuple_diskusage.total.__doc__ = 'Total space in bytes'\n    _ntuple_diskusage.used.__doc__ = 'Used space in bytes'\n    _ntuple_diskusage.free.__doc__ = 'Free space in bytes'\n\n    def disk_usage(path):\n        \"\"\"Return disk usage statistics about the given path.\n\n        Returned value is a named tuple with attributes 'total', 'used' and\n        'free', which are the amount of total, used and free space, in bytes.\n        \"\"\"\n        st = os.statvfs(path)\n        free = st.f_bavail * st.f_frsize\n        total = st.f_blocks * st.f_frsize\n        used = (st.f_blocks - st.f_bfree) * st.f_frsize\n        return _ntuple_diskusage(total, used, free)\n\nelif _WINDOWS:\n\n    __all__.append('disk_usage')\n    _ntuple_diskusage = collections.namedtuple('usage', 'total used free')\n\n    def disk_usage(path):\n        \"\"\"Return disk usage statistics about the given path.\n\n        Returned values is a named tuple with attributes 'total', 'used' and\n        'free', which are the amount of total, used and free space, in bytes.\n        \"\"\"\n        total, free = nt._getdiskusage(path)\n        used = total - free\n        return _ntuple_diskusage(total, used, free)\n\n\ndef chown(path, user=None, group=None):\n    \"\"\"Change owner user and group of the given path.\n\n    user and group can be the uid/gid or the user/group names, and in that case,\n    they are converted to their respective uid/gid.\n    \"\"\"\n    sys.audit('shutil.chown', path, user, group)\n\n    if user is None and group is None:\n        raise ValueError(\"user and/or group must be set\")\n\n    _user = user\n    _group = group\n\n    # -1 means don't change it\n    if user is None:\n        _user = -1\n    # user can either be an int (the uid) or a string (the system username)\n    elif isinstance(user, str):\n        _user = _get_uid(user)\n        if _user is None:\n            raise LookupError(\"no such user: {!r}\".format(user))\n\n    if group is None:\n        _group = -1\n    elif not isinstance(group, int):\n        _group = _get_gid(group)\n        if _group is None:\n            raise LookupError(\"no such group: {!r}\".format(group))\n\n    os.chown(path, _user, _group)\n\ndef get_terminal_size(fallback=(80, 24)):\n    \"\"\"Get the size of the terminal window.\n\n    For each of the two dimensions, the environment variable, COLUMNS\n    and LINES respectively, is checked. If the variable is defined and\n    the value is a positive integer, it is used.\n\n    When COLUMNS or LINES is not defined, which is the common case,\n    the terminal connected to sys.__stdout__ is queried\n    by invoking os.get_terminal_size.\n\n    If the terminal size cannot be successfully queried, either because\n    the system doesn't support querying, or because we are not\n    connected to a terminal, the value given in fallback parameter\n    is used. Fallback defaults to (80, 24) which is the default\n    size used by many terminal emulators.\n\n    The value returned is a named tuple of type os.terminal_size.\n    \"\"\"\n    # columns, lines are the working values\n    try:\n        columns = int(os.environ['COLUMNS'])\n    except (KeyError, ValueError):\n        columns = 0\n\n    try:\n        lines = int(os.environ['LINES'])\n    except (KeyError, ValueError):\n        lines = 0\n\n    # only query if necessary\n    if columns <= 0 or lines <= 0:\n        try:\n            size = os.get_terminal_size(sys.__stdout__.fileno())\n        except (AttributeError, ValueError, OSError):\n            # stdout is None, closed, detached, or not a terminal, or\n            # os.get_terminal_size() is unsupported\n            size = os.terminal_size(fallback)\n        if columns <= 0:\n            columns = size.columns or fallback[0]\n        if lines <= 0:\n            lines = size.lines or fallback[1]\n\n    return os.terminal_size((columns, lines))\n\n\n# Check that a given file can be accessed with the correct mode.\n# Additionally check that `file` is not a directory, as on Windows\n# directories pass the os.access check.\ndef _access_check(fn, mode):\n    return (os.path.exists(fn) and os.access(fn, mode)\n            and not os.path.isdir(fn))\n\n\ndef which(cmd, mode=os.F_OK | os.X_OK, path=None):\n    \"\"\"Given a command, mode, and a PATH string, return the path which\n    conforms to the given mode on the PATH, or None if there is no such\n    file.\n\n    `mode` defaults to os.F_OK | os.X_OK. `path` defaults to the result\n    of os.environ.get(\"PATH\"), or can be overridden with a custom search\n    path.\n\n    \"\"\"\n    # If we're given a path with a directory part, look it up directly rather\n    # than referring to PATH directories. This includes checking relative to the\n    # current directory, e.g. ./script\n    if os.path.dirname(cmd):\n        if _access_check(cmd, mode):\n            return cmd\n        return None\n\n    use_bytes = isinstance(cmd, bytes)\n\n    if path is None:\n        path = os.environ.get(\"PATH\", None)\n        if path is None:\n            try:\n                path = os.confstr(\"CS_PATH\")\n            except (AttributeError, ValueError):\n                # os.confstr() or CS_PATH is not available\n                path = os.defpath\n        # bpo-35755: Don't use os.defpath if the PATH environment variable is\n        # set to an empty string\n\n    # PATH='' doesn't match, whereas PATH=':' looks in the current directory\n    if not path:\n        return None\n\n    if use_bytes:\n        path = os.fsencode(path)\n        path = path.split(os.fsencode(os.pathsep))\n    else:\n        path = os.fsdecode(path)\n        path = path.split(os.pathsep)\n\n    if sys.platform == \"win32\":\n        # The current directory takes precedence on Windows.\n        curdir = os.curdir\n        if use_bytes:\n            curdir = os.fsencode(curdir)\n        if curdir not in path:\n            path.insert(0, curdir)\n\n        # PATHEXT is necessary to check on Windows.\n        pathext_source = os.getenv(\"PATHEXT\") or _WIN_DEFAULT_PATHEXT\n        pathext = [ext for ext in pathext_source.split(os.pathsep) if ext]\n\n        if use_bytes:\n            pathext = [os.fsencode(ext) for ext in pathext]\n        # See if the given file matches any of the expected path extensions.\n        # This will allow us to short circuit when given \"python.exe\".\n        # If it does match, only test that one, otherwise we have to try\n        # others.\n        if any(cmd.lower().endswith(ext.lower()) for ext in pathext):\n            files = [cmd]\n        else:\n            files = [cmd + ext for ext in pathext]\n    else:\n        # On other platforms you don't have things like PATHEXT to tell you\n        # what file suffixes are executable, so just pass on cmd as-is.\n        files = [cmd]\n\n    seen = set()\n    for dir in path:\n        normdir = os.path.normcase(dir)\n        if not normdir in seen:\n            seen.add(normdir)\n            for thefile in files:\n                name = os.path.join(dir, thefile)\n                if _access_check(name, mode):\n                    return name\n    return None\n", 1530], "/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py": ["import sys\nimport builtins as bltns\nfrom types import MappingProxyType, DynamicClassAttribute\nfrom operator import or_ as _or_\nfrom functools import reduce\n\n\n__all__ = [\n        'EnumType', 'EnumMeta',\n        'Enum', 'IntEnum', 'StrEnum', 'Flag', 'IntFlag', 'ReprEnum',\n        'auto', 'unique', 'property', 'verify', 'member', 'nonmember',\n        'FlagBoundary', 'STRICT', 'CONFORM', 'EJECT', 'KEEP',\n        'global_flag_repr', 'global_enum_repr', 'global_str', 'global_enum',\n        'EnumCheck', 'CONTINUOUS', 'NAMED_FLAGS', 'UNIQUE',\n        'pickle_by_global_name', 'pickle_by_enum_name',\n        ]\n\n\n# Dummy value for Enum and Flag as there are explicit checks for them\n# before they have been created.\n# This is also why there are checks in EnumType like `if Enum is not None`\nEnum = Flag = EJECT = _stdlib_enums = ReprEnum = None\n\nclass nonmember(object):\n    \"\"\"\n    Protects item from becoming an Enum member during class creation.\n    \"\"\"\n    def __init__(self, value):\n        self.value = value\n\nclass member(object):\n    \"\"\"\n    Forces item to become an Enum member during class creation.\n    \"\"\"\n    def __init__(self, value):\n        self.value = value\n\ndef _is_descriptor(obj):\n    \"\"\"\n    Returns True if obj is a descriptor, False otherwise.\n    \"\"\"\n    return (\n            hasattr(obj, '__get__') or\n            hasattr(obj, '__set__') or\n            hasattr(obj, '__delete__')\n            )\n\ndef _is_dunder(name):\n    \"\"\"\n    Returns True if a __dunder__ name, False otherwise.\n    \"\"\"\n    return (\n            len(name) > 4 and\n            name[:2] == name[-2:] == '__' and\n            name[2] != '_' and\n            name[-3] != '_'\n            )\n\ndef _is_sunder(name):\n    \"\"\"\n    Returns True if a _sunder_ name, False otherwise.\n    \"\"\"\n    return (\n            len(name) > 2 and\n            name[0] == name[-1] == '_' and\n            name[1:2] != '_' and\n            name[-2:-1] != '_'\n            )\n\ndef _is_internal_class(cls_name, obj):\n    # do not use `re` as `re` imports `enum`\n    if not isinstance(obj, type):\n        return False\n    qualname = getattr(obj, '__qualname__', '')\n    s_pattern = cls_name + '.' + getattr(obj, '__name__', '')\n    e_pattern = '.' + s_pattern\n    return qualname == s_pattern or qualname.endswith(e_pattern)\n\ndef _is_private(cls_name, name):\n    # do not use `re` as `re` imports `enum`\n    pattern = '_%s__' % (cls_name, )\n    pat_len = len(pattern)\n    if (\n            len(name) > pat_len\n            and name.startswith(pattern)\n            and name[pat_len:pat_len+1] != ['_']\n            and (name[-1] != '_' or name[-2] != '_')\n        ):\n        return True\n    else:\n        return False\n\ndef _is_single_bit(num):\n    \"\"\"\n    True if only one bit set in num (should be an int)\n    \"\"\"\n    if num == 0:\n        return False\n    num &= num - 1\n    return num == 0\n\ndef _make_class_unpicklable(obj):\n    \"\"\"\n    Make the given obj un-picklable.\n\n    obj should be either a dictionary, or an Enum\n    \"\"\"\n    def _break_on_call_reduce(self, proto):\n        raise TypeError('%r cannot be pickled' % self)\n    if isinstance(obj, dict):\n        obj['__reduce_ex__'] = _break_on_call_reduce\n        obj['__module__'] = '<unknown>'\n    else:\n        setattr(obj, '__reduce_ex__', _break_on_call_reduce)\n        setattr(obj, '__module__', '<unknown>')\n\ndef _iter_bits_lsb(num):\n    # num must be a positive integer\n    original = num\n    if isinstance(num, Enum):\n        num = num.value\n    if num < 0:\n        raise ValueError('%r is not a positive integer' % original)\n    while num:\n        b = num & (~num + 1)\n        yield b\n        num ^= b\n\ndef show_flag_values(value):\n    return list(_iter_bits_lsb(value))\n\ndef bin(num, max_bits=None):\n    \"\"\"\n    Like built-in bin(), except negative values are represented in\n    twos-compliment, and the leading bit always indicates sign\n    (0=positive, 1=negative).\n\n    >>> bin(10)\n    '0b0 1010'\n    >>> bin(~10)   # ~10 is -11\n    '0b1 0101'\n    \"\"\"\n\n    ceiling = 2 ** (num).bit_length()\n    if num >= 0:\n        s = bltns.bin(num + ceiling).replace('1', '0', 1)\n    else:\n        s = bltns.bin(~num ^ (ceiling - 1) + ceiling)\n    sign = s[:3]\n    digits = s[3:]\n    if max_bits is not None:\n        if len(digits) < max_bits:\n            digits = (sign[-1] * max_bits + digits)[-max_bits:]\n    return \"%s %s\" % (sign, digits)\n\ndef _dedent(text):\n    \"\"\"\n    Like textwrap.dedent.  Rewritten because we cannot import textwrap.\n    \"\"\"\n    lines = text.split('\\n')\n    blanks = 0\n    for i, ch in enumerate(lines[0]):\n        if ch != ' ':\n            break\n    for j, l in enumerate(lines):\n        lines[j] = l[i:]\n    return '\\n'.join(lines)\n\nclass _auto_null:\n    def __repr__(self):\n        return '_auto_null'\n_auto_null = _auto_null()\n\nclass auto:\n    \"\"\"\n    Instances are replaced with an appropriate value in Enum class suites.\n    \"\"\"\n    def __init__(self, value=_auto_null):\n        self.value = value\n\n    def __repr__(self):\n        return \"auto(%r)\" % self.value\n\nclass property(DynamicClassAttribute):\n    \"\"\"\n    This is a descriptor, used to define attributes that act differently\n    when accessed through an enum member and through an enum class.\n    Instance access is the same as property(), but access to an attribute\n    through the enum class will instead look in the class' _member_map_ for\n    a corresponding enum member.\n    \"\"\"\n\n    def __get__(self, instance, ownerclass=None):\n        if instance is None:\n            try:\n                return ownerclass._member_map_[self.name]\n            except KeyError:\n                raise AttributeError(\n                        '%r has no attribute %r' % (ownerclass, self.name)\n                        )\n        else:\n            if self.fget is None:\n                # look for a member by this name.\n                try:\n                    return ownerclass._member_map_[self.name]\n                except KeyError:\n                    raise AttributeError(\n                            '%r has no attribute %r' % (ownerclass, self.name)\n                            ) from None\n            else:\n                return self.fget(instance)\n\n    def __set__(self, instance, value):\n        if self.fset is None:\n            raise AttributeError(\n                    \"<enum %r> cannot set attribute %r\" % (self.clsname, self.name)\n                    )\n        else:\n            return self.fset(instance, value)\n\n    def __delete__(self, instance):\n        if self.fdel is None:\n            raise AttributeError(\n                    \"<enum %r> cannot delete attribute %r\" % (self.clsname, self.name)\n                    )\n        else:\n            return self.fdel(instance)\n\n    def __set_name__(self, ownerclass, name):\n        self.name = name\n        self.clsname = ownerclass.__name__\n\n\nclass _proto_member:\n    \"\"\"\n    intermediate step for enum members between class execution and final creation\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n    def __set_name__(self, enum_class, member_name):\n        \"\"\"\n        convert each quasi-member into an instance of the new enum class\n        \"\"\"\n        # first step: remove ourself from enum_class\n        delattr(enum_class, member_name)\n        # second step: create member based on enum_class\n        value = self.value\n        if not isinstance(value, tuple):\n            args = (value, )\n        else:\n            args = value\n        if enum_class._member_type_ is tuple:   # special case for tuple enums\n            args = (args, )     # wrap it one more time\n        if not enum_class._use_args_:\n            enum_member = enum_class._new_member_(enum_class)\n        else:\n            enum_member = enum_class._new_member_(enum_class, *args)\n        if not hasattr(enum_member, '_value_'):\n            if enum_class._member_type_ is object:\n                enum_member._value_ = value\n            else:\n                try:\n                    enum_member._value_ = enum_class._member_type_(*args)\n                except Exception as exc:\n                    new_exc = TypeError(\n                            '_value_ not set in __new__, unable to create it'\n                            )\n                    new_exc.__cause__ = exc\n                    raise new_exc\n        value = enum_member._value_\n        enum_member._name_ = member_name\n        enum_member.__objclass__ = enum_class\n        enum_member.__init__(*args)\n        enum_member._sort_order_ = len(enum_class._member_names_)\n\n        if Flag is not None and issubclass(enum_class, Flag):\n            enum_class._flag_mask_ |= value\n            if _is_single_bit(value):\n                enum_class._singles_mask_ |= value\n            enum_class._all_bits_ = 2 ** ((enum_class._flag_mask_).bit_length()) - 1\n\n        # If another member with the same value was already defined, the\n        # new member becomes an alias to the existing one.\n        try:\n            try:\n                # try to do a fast lookup to avoid the quadratic loop\n                enum_member = enum_class._value2member_map_[value]\n            except TypeError:\n                for name, canonical_member in enum_class._member_map_.items():\n                    if canonical_member._value_ == value:\n                        enum_member = canonical_member\n                        break\n                else:\n                    raise KeyError\n        except KeyError:\n            # this could still be an alias if the value is multi-bit and the\n            # class is a flag class\n            if (\n                    Flag is None\n                    or not issubclass(enum_class, Flag)\n                ):\n                # no other instances found, record this member in _member_names_\n                enum_class._member_names_.append(member_name)\n            elif (\n                    Flag is not None\n                    and issubclass(enum_class, Flag)\n                    and _is_single_bit(value)\n                ):\n                # no other instances found, record this member in _member_names_\n                enum_class._member_names_.append(member_name)\n        # if necessary, get redirect in place and then add it to _member_map_\n        found_descriptor = None\n        for base in enum_class.__mro__[1:]:\n            descriptor = base.__dict__.get(member_name)\n            if descriptor is not None:\n                if isinstance(descriptor, (property, DynamicClassAttribute)):\n                    found_descriptor = descriptor\n                    break\n                elif (\n                        hasattr(descriptor, 'fget') and\n                        hasattr(descriptor, 'fset') and\n                        hasattr(descriptor, 'fdel')\n                    ):\n                    found_descriptor = descriptor\n                    continue\n        if found_descriptor:\n            redirect = property()\n            redirect.member = enum_member\n            redirect.__set_name__(enum_class, member_name)\n            # earlier descriptor found; copy fget, fset, fdel to this one.\n            redirect.fget = found_descriptor.fget\n            redirect.fset = found_descriptor.fset\n            redirect.fdel = found_descriptor.fdel\n            setattr(enum_class, member_name, redirect)\n        else:\n            setattr(enum_class, member_name, enum_member)\n        # now add to _member_map_ (even aliases)\n        enum_class._member_map_[member_name] = enum_member\n        try:\n            # This may fail if value is not hashable. We can't add the value\n            # to the map, and by-value lookups for this value will be\n            # linear.\n            enum_class._value2member_map_.setdefault(value, enum_member)\n        except TypeError:\n            # keep track of the value in a list so containment checks are quick\n            enum_class._unhashable_values_.append(value)\n\n\nclass _EnumDict(dict):\n    \"\"\"\n    Track enum member order and ensure member names are not reused.\n\n    EnumType will use the names found in self._member_names as the\n    enumeration member names.\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n        self._member_names = {} # use a dict to keep insertion order\n        self._last_values = []\n        self._ignore = []\n        self._auto_called = False\n\n    def __setitem__(self, key, value):\n        \"\"\"\n        Changes anything not dundered or not a descriptor.\n\n        If an enum member name is used twice, an error is raised; duplicate\n        values are not checked for.\n\n        Single underscore (sunder) names are reserved.\n        \"\"\"\n        if _is_internal_class(self._cls_name, value):\n            import warnings\n            warnings.warn(\n                    \"In 3.13 classes created inside an enum will not become a member.  \"\n                    \"Use the `member` decorator to keep the current behavior.\",\n                    DeprecationWarning,\n                    stacklevel=2,\n                    )\n        if _is_private(self._cls_name, key):\n            # also do nothing, name will be a normal attribute\n            pass\n        elif _is_sunder(key):\n            if key not in (\n                    '_order_',\n                    '_generate_next_value_', '_numeric_repr_', '_missing_', '_ignore_',\n                    '_iter_member_', '_iter_member_by_value_', '_iter_member_by_def_',\n                    ):\n                raise ValueError(\n                        '_sunder_ names, such as %r, are reserved for future Enum use'\n                        % (key, )\n                        )\n            if key == '_generate_next_value_':\n                # check if members already defined as auto()\n                if self._auto_called:\n                    raise TypeError(\"_generate_next_value_ must be defined before members\")\n                _gnv = value.__func__ if isinstance(value, staticmethod) else value\n                setattr(self, '_generate_next_value', _gnv)\n            elif key == '_ignore_':\n                if isinstance(value, str):\n                    value = value.replace(',',' ').split()\n                else:\n                    value = list(value)\n                self._ignore = value\n                already = set(value) & set(self._member_names)\n                if already:\n                    raise ValueError(\n                            '_ignore_ cannot specify already set names: %r'\n                            % (already, )\n                            )\n        elif _is_dunder(key):\n            if key == '__order__':\n                key = '_order_'\n        elif key in self._member_names:\n            # descriptor overwriting an enum?\n            raise TypeError('%r already defined as %r' % (key, self[key]))\n        elif key in self._ignore:\n            pass\n        elif isinstance(value, nonmember):\n            # unwrap value here; it won't be processed by the below `else`\n            value = value.value\n        elif _is_descriptor(value):\n            pass\n        # TODO: uncomment next three lines in 3.13\n        # elif _is_internal_class(self._cls_name, value):\n        #     # do nothing, name will be a normal attribute\n        #     pass\n        else:\n            if key in self:\n                # enum overwriting a descriptor?\n                raise TypeError('%r already defined as %r' % (key, self[key]))\n            elif isinstance(value, member):\n                # unwrap value here -- it will become a member\n                value = value.value\n            non_auto_store = True\n            single = False\n            if isinstance(value, auto):\n                single = True\n                value = (value, )\n            if type(value) is tuple and any(isinstance(v, auto) for v in value):\n                # insist on an actual tuple, no subclasses, in keeping with only supporting\n                # top-level auto() usage (not contained in any other data structure)\n                auto_valued = []\n                for v in value:\n                    if isinstance(v, auto):\n                        non_auto_store = False\n                        if v.value == _auto_null:\n                            v.value = self._generate_next_value(\n                                    key, 1, len(self._member_names), self._last_values[:],\n                                    )\n                            self._auto_called = True\n                        v = v.value\n                        self._last_values.append(v)\n                    auto_valued.append(v)\n                if single:\n                    value = auto_valued[0]\n                else:\n                    value = tuple(auto_valued)\n            self._member_names[key] = None\n            if non_auto_store:\n                self._last_values.append(value)\n        super().__setitem__(key, value)\n\n    def update(self, members, **more_members):\n        try:\n            for name in members.keys():\n                self[name] = members[name]\n        except AttributeError:\n            for name, value in members:\n                self[name] = value\n        for name, value in more_members.items():\n            self[name] = value\n\n\nclass EnumType(type):\n    \"\"\"\n    Metaclass for Enum\n    \"\"\"\n\n    @classmethod\n    def __prepare__(metacls, cls, bases, **kwds):\n        # check that previous enum members do not exist\n        metacls._check_for_existing_members_(cls, bases)\n        # create the namespace dict\n        enum_dict = _EnumDict()\n        enum_dict._cls_name = cls\n        # inherit previous flags and _generate_next_value_ function\n        member_type, first_enum = metacls._get_mixins_(cls, bases)\n        if first_enum is not None:\n            enum_dict['_generate_next_value_'] = getattr(\n                    first_enum, '_generate_next_value_', None,\n                    )\n        return enum_dict\n\n    def __new__(metacls, cls, bases, classdict, *, boundary=None, _simple=False, **kwds):\n        # an Enum class is final once enumeration items have been defined; it\n        # cannot be mixed with other types (int, float, etc.) if it has an\n        # inherited __new__ unless a new __new__ is defined (or the resulting\n        # class will fail).\n        #\n        if _simple:\n            return super().__new__(metacls, cls, bases, classdict, **kwds)\n        #\n        # remove any keys listed in _ignore_\n        classdict.setdefault('_ignore_', []).append('_ignore_')\n        ignore = classdict['_ignore_']\n        for key in ignore:\n            classdict.pop(key, None)\n        #\n        # grab member names\n        member_names = classdict._member_names\n        #\n        # check for illegal enum names (any others?)\n        invalid_names = set(member_names) & {'mro', ''}\n        if invalid_names:\n            raise ValueError('invalid enum member name(s) %s'  % (\n                    ','.join(repr(n) for n in invalid_names)\n                    ))\n        #\n        # adjust the sunders\n        _order_ = classdict.pop('_order_', None)\n        # convert to normal dict\n        classdict = dict(classdict.items())\n        #\n        # data type of member and the controlling Enum class\n        member_type, first_enum = metacls._get_mixins_(cls, bases)\n        __new__, save_new, use_args = metacls._find_new_(\n                classdict, member_type, first_enum,\n                )\n        classdict['_new_member_'] = __new__\n        classdict['_use_args_'] = use_args\n        #\n        # convert future enum members into temporary _proto_members\n        for name in member_names:\n            value = classdict[name]\n            classdict[name] = _proto_member(value)\n        #\n        # house-keeping structures\n        classdict['_member_names_'] = []\n        classdict['_member_map_'] = {}\n        classdict['_value2member_map_'] = {}\n        classdict['_unhashable_values_'] = []\n        classdict['_member_type_'] = member_type\n        # now set the __repr__ for the value\n        classdict['_value_repr_'] = metacls._find_data_repr_(cls, bases)\n        #\n        # Flag structures (will be removed if final class is not a Flag\n        classdict['_boundary_'] = (\n                boundary\n                or getattr(first_enum, '_boundary_', None)\n                )\n        classdict['_flag_mask_'] = 0\n        classdict['_singles_mask_'] = 0\n        classdict['_all_bits_'] = 0\n        classdict['_inverted_'] = None\n        try:\n            exc = None\n            enum_class = super().__new__(metacls, cls, bases, classdict, **kwds)\n        except RuntimeError as e:\n            # any exceptions raised by member.__new__ will get converted to a\n            # RuntimeError, so get that original exception back and raise it instead\n            exc = e.__cause__ or e\n        if exc is not None:\n            raise exc\n        #\n        # update classdict with any changes made by __init_subclass__\n        classdict.update(enum_class.__dict__)\n        #\n        # double check that repr and friends are not the mixin's or various\n        # things break (such as pickle)\n        # however, if the method is defined in the Enum itself, don't replace\n        # it\n        #\n        # Also, special handling for ReprEnum\n        if ReprEnum is not None and ReprEnum in bases:\n            if member_type is object:\n                raise TypeError(\n                        'ReprEnum subclasses must be mixed with a data type (i.e.'\n                        ' int, str, float, etc.)'\n                        )\n            if '__format__' not in classdict:\n                enum_class.__format__ = member_type.__format__\n                classdict['__format__'] = enum_class.__format__\n            if '__str__' not in classdict:\n                method = member_type.__str__\n                if method is object.__str__:\n                    # if member_type does not define __str__, object.__str__ will use\n                    # its __repr__ instead, so we'll also use its __repr__\n                    method = member_type.__repr__\n                enum_class.__str__ = method\n                classdict['__str__'] = enum_class.__str__\n        for name in ('__repr__', '__str__', '__format__', '__reduce_ex__'):\n            if name not in classdict:\n                # check for mixin overrides before replacing\n                enum_method = getattr(first_enum, name)\n                found_method = getattr(enum_class, name)\n                object_method = getattr(object, name)\n                data_type_method = getattr(member_type, name)\n                if found_method in (data_type_method, object_method):\n                    setattr(enum_class, name, enum_method)\n        #\n        # for Flag, add __or__, __and__, __xor__, and __invert__\n        if Flag is not None and issubclass(enum_class, Flag):\n            for name in (\n                    '__or__', '__and__', '__xor__',\n                    '__ror__', '__rand__', '__rxor__',\n                    '__invert__'\n                ):\n                if name not in classdict:\n                    enum_method = getattr(Flag, name)\n                    setattr(enum_class, name, enum_method)\n                    classdict[name] = enum_method\n        #\n        # replace any other __new__ with our own (as long as Enum is not None,\n        # anyway) -- again, this is to support pickle\n        if Enum is not None:\n            # if the user defined their own __new__, save it before it gets\n            # clobbered in case they subclass later\n            if save_new:\n                enum_class.__new_member__ = __new__\n            enum_class.__new__ = Enum.__new__\n        #\n        # py3 support for definition order (helps keep py2/py3 code in sync)\n        #\n        # _order_ checking is spread out into three/four steps\n        # - if enum_class is a Flag:\n        #   - remove any non-single-bit flags from _order_\n        # - remove any aliases from _order_\n        # - check that _order_ and _member_names_ match\n        #\n        # step 1: ensure we have a list\n        if _order_ is not None:\n            if isinstance(_order_, str):\n                _order_ = _order_.replace(',', ' ').split()\n        #\n        # remove Flag structures if final class is not a Flag\n        if (\n                Flag is None and cls != 'Flag'\n                or Flag is not None and not issubclass(enum_class, Flag)\n            ):\n            delattr(enum_class, '_boundary_')\n            delattr(enum_class, '_flag_mask_')\n            delattr(enum_class, '_singles_mask_')\n            delattr(enum_class, '_all_bits_')\n            delattr(enum_class, '_inverted_')\n        elif Flag is not None and issubclass(enum_class, Flag):\n            # set correct __iter__\n            member_list = [m._value_ for m in enum_class]\n            if member_list != sorted(member_list):\n                enum_class._iter_member_ = enum_class._iter_member_by_def_\n            if _order_:\n                # _order_ step 2: remove any items from _order_ that are not single-bit\n                _order_ = [\n                        o\n                        for o in _order_\n                        if o not in enum_class._member_map_ or _is_single_bit(enum_class[o]._value_)\n                        ]\n        #\n        if _order_:\n            # _order_ step 3: remove aliases from _order_\n            _order_ = [\n                    o\n                    for o in _order_\n                    if (\n                        o not in enum_class._member_map_\n                        or\n                        (o in enum_class._member_map_ and o in enum_class._member_names_)\n                        )]\n            # _order_ step 4: verify that _order_ and _member_names_ match\n            if _order_ != enum_class._member_names_:\n                raise TypeError(\n                        'member order does not match _order_:\\n  %r\\n  %r'\n                        % (enum_class._member_names_, _order_)\n                        )\n\n        return enum_class\n\n    def __bool__(cls):\n        \"\"\"\n        classes/types should always be True.\n        \"\"\"\n        return True\n\n    def __call__(cls, value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n        \"\"\"\n        Either returns an existing member, or creates a new enum class.\n\n        This method is used both when an enum class is given a value to match\n        to an enumeration member (i.e. Color(3)) and for the functional API\n        (i.e. Color = Enum('Color', names='RED GREEN BLUE')).\n\n        When used for the functional API:\n\n        `value` will be the name of the new class.\n\n        `names` should be either a string of white-space/comma delimited names\n        (values will start at `start`), or an iterator/mapping of name, value pairs.\n\n        `module` should be set to the module this class is being created in;\n        if it is not set, an attempt to find that module will be made, but if\n        it fails the class will not be picklable.\n\n        `qualname` should be set to the actual location this class can be found\n        at in its module; by default it is set to the global scope.  If this is\n        not correct, unpickling will fail in some circumstances.\n\n        `type`, if set, will be mixed in as the first base class.\n        \"\"\"\n        if names is None:  # simple value lookup\n            return cls.__new__(cls, value)\n        # otherwise, functional API: we're creating a new Enum type\n        return cls._create_(\n                value,\n                names,\n                module=module,\n                qualname=qualname,\n                type=type,\n                start=start,\n                boundary=boundary,\n                )\n\n    def __contains__(cls, member):\n        \"\"\"\n        Return True if member is a member of this enum\n        raises TypeError if member is not an enum member\n\n        note: in 3.12 TypeError will no longer be raised, and True will also be\n        returned if member is the value of a member in this enum\n        \"\"\"\n        if not isinstance(member, Enum):\n            import warnings\n            warnings.warn(\n                    \"in 3.12 __contains__ will no longer raise TypeError, but will return True or\\n\"\n                    \"False depending on whether the value is a member or the value of a member\",\n                    DeprecationWarning,\n                    stacklevel=2,\n                    )\n            raise TypeError(\n                \"unsupported operand type(s) for 'in': '%s' and '%s'\" % (\n                    type(member).__qualname__, cls.__class__.__qualname__))\n        return isinstance(member, cls) and member._name_ in cls._member_map_\n\n    def __delattr__(cls, attr):\n        # nicer error message when someone tries to delete an attribute\n        # (see issue19025).\n        if attr in cls._member_map_:\n            raise AttributeError(\"%r cannot delete member %r.\" % (cls.__name__, attr))\n        super().__delattr__(attr)\n\n    def __dir__(cls):\n        interesting = set([\n                '__class__', '__contains__', '__doc__', '__getitem__',\n                '__iter__', '__len__', '__members__', '__module__',\n                '__name__', '__qualname__',\n                ]\n                + cls._member_names_\n                )\n        if cls._new_member_ is not object.__new__:\n            interesting.add('__new__')\n        if cls.__init_subclass__ is not object.__init_subclass__:\n            interesting.add('__init_subclass__')\n        if cls._member_type_ is object:\n            return sorted(interesting)\n        else:\n            # return whatever mixed-in data type has\n            return sorted(set(dir(cls._member_type_)) | interesting)\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n\n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n            raise AttributeError(name) from None\n\n    def __getitem__(cls, name):\n        \"\"\"\n        Return the member matching `name`.\n        \"\"\"\n        return cls._member_map_[name]\n\n    def __iter__(cls):\n        \"\"\"\n        Return members in definition order.\n        \"\"\"\n        return (cls._member_map_[name] for name in cls._member_names_)\n\n    def __len__(cls):\n        \"\"\"\n        Return the number of members (no aliases)\n        \"\"\"\n        return len(cls._member_names_)\n\n    @bltns.property\n    def __members__(cls):\n        \"\"\"\n        Returns a mapping of member name->value.\n\n        This mapping lists all enum members, including aliases. Note that this\n        is a read-only view of the internal mapping.\n        \"\"\"\n        return MappingProxyType(cls._member_map_)\n\n    def __repr__(cls):\n        if Flag is not None and issubclass(cls, Flag):\n            return \"<flag %r>\" % cls.__name__\n        else:\n            return \"<enum %r>\" % cls.__name__\n\n    def __reversed__(cls):\n        \"\"\"\n        Return members in reverse definition order.\n        \"\"\"\n        return (cls._member_map_[name] for name in reversed(cls._member_names_))\n\n    def __setattr__(cls, name, value):\n        \"\"\"\n        Block attempts to reassign Enum members.\n\n        A simple assignment to the class namespace only changes one of the\n        several possible ways to get an Enum member from the Enum class,\n        resulting in an inconsistent Enumeration.\n        \"\"\"\n        member_map = cls.__dict__.get('_member_map_', {})\n        if name in member_map:\n            raise AttributeError('cannot reassign member %r' % (name, ))\n        super().__setattr__(name, value)\n\n    def _create_(cls, class_name, names, *, module=None, qualname=None, type=None, start=1, boundary=None):\n        \"\"\"\n        Convenience method to create a new Enum class.\n\n        `names` can be:\n\n        * A string containing member names, separated either with spaces or\n          commas.  Values are incremented by 1 from `start`.\n        * An iterable of member names.  Values are incremented by 1 from `start`.\n        * An iterable of (member name, value) pairs.\n        * A mapping of member name -> value pairs.\n        \"\"\"\n        metacls = cls.__class__\n        bases = (cls, ) if type is None else (type, cls)\n        _, first_enum = cls._get_mixins_(class_name, bases)\n        classdict = metacls.__prepare__(class_name, bases)\n\n        # special processing needed for names?\n        if isinstance(names, str):\n            names = names.replace(',', ' ').split()\n        if isinstance(names, (tuple, list)) and names and isinstance(names[0], str):\n            original_names, names = names, []\n            last_values = []\n            for count, name in enumerate(original_names):\n                value = first_enum._generate_next_value_(name, start, count, last_values[:])\n                last_values.append(value)\n                names.append((name, value))\n        if names is None:\n            names = ()\n\n        # Here, names is either an iterable of (name, value) or a mapping.\n        for item in names:\n            if isinstance(item, str):\n                member_name, member_value = item, names[item]\n            else:\n                member_name, member_value = item\n            classdict[member_name] = member_value\n\n        # TODO: replace the frame hack if a blessed way to know the calling\n        # module is ever developed\n        if module is None:\n            try:\n                module = sys._getframe(2).f_globals['__name__']\n            except (AttributeError, ValueError, KeyError):\n                pass\n        if module is None:\n            _make_class_unpicklable(classdict)\n        else:\n            classdict['__module__'] = module\n        if qualname is not None:\n            classdict['__qualname__'] = qualname\n\n        return metacls.__new__(metacls, class_name, bases, classdict, boundary=boundary)\n\n    def _convert_(cls, name, module, filter, source=None, *, boundary=None, as_global=False):\n        \"\"\"\n        Create a new Enum subclass that replaces a collection of global constants\n        \"\"\"\n        # convert all constants from source (or module) that pass filter() to\n        # a new Enum called name, and export the enum and its members back to\n        # module;\n        # also, replace the __reduce_ex__ method so unpickling works in\n        # previous Python versions\n        module_globals = sys.modules[module].__dict__\n        if source:\n            source = source.__dict__\n        else:\n            source = module_globals\n        # _value2member_map_ is populated in the same order every time\n        # for a consistent reverse mapping of number to name when there\n        # are multiple names for the same number.\n        members = [\n                (name, value)\n                for name, value in source.items()\n                if filter(name)]\n        try:\n            # sort by value\n            members.sort(key=lambda t: (t[1], t[0]))\n        except TypeError:\n            # unless some values aren't comparable, in which case sort by name\n            members.sort(key=lambda t: t[0])\n        body = {t[0]: t[1] for t in members}\n        body['__module__'] = module\n        tmp_cls = type(name, (object, ), body)\n        cls = _simple_enum(etype=cls, boundary=boundary or KEEP)(tmp_cls)\n        if as_global:\n            global_enum(cls)\n        else:\n            sys.modules[cls.__module__].__dict__.update(cls.__members__)\n        module_globals[name] = cls\n        return cls\n\n    @classmethod\n    def _check_for_existing_members_(mcls, class_name, bases):\n        for chain in bases:\n            for base in chain.__mro__:\n                if isinstance(base, EnumType) and base._member_names_:\n                    raise TypeError(\n                            \"<enum %r> cannot extend %r\"\n                            % (class_name, base)\n                            )\n\n    @classmethod\n    def _get_mixins_(mcls, class_name, bases):\n        \"\"\"\n        Returns the type for creating enum members, and the first inherited\n        enum class.\n\n        bases: the tuple of bases that was given to __new__\n        \"\"\"\n        if not bases:\n            return object, Enum\n\n        mcls._check_for_existing_members_(class_name, bases)\n\n        # ensure final parent class is an Enum derivative, find any concrete\n        # data type, and check that Enum has no members\n        first_enum = bases[-1]\n        if not isinstance(first_enum, EnumType):\n            raise TypeError(\"new enumerations should be created as \"\n                    \"`EnumName([mixin_type, ...] [data_type,] enum_type)`\")\n        member_type = mcls._find_data_type_(class_name, bases) or object\n        return member_type, first_enum\n\n    @classmethod\n    def _find_data_repr_(mcls, class_name, bases):\n        for chain in bases:\n            for base in chain.__mro__:\n                if base is object:\n                    continue\n                elif isinstance(base, EnumType):\n                    # if we hit an Enum, use it's _value_repr_\n                    return base._value_repr_\n                elif '__repr__' in base.__dict__:\n                    # this is our data repr\n                    return base.__dict__['__repr__']\n        return None\n\n    @classmethod\n    def _find_data_type_(mcls, class_name, bases):\n        # a datatype has a __new__ method\n        data_types = set()\n        base_chain = set()\n        for chain in bases:\n            candidate = None\n            for base in chain.__mro__:\n                base_chain.add(base)\n                if base is object:\n                    continue\n                elif isinstance(base, EnumType):\n                    if base._member_type_ is not object:\n                        data_types.add(base._member_type_)\n                        break\n                elif '__new__' in base.__dict__ or '__dataclass_fields__' in base.__dict__:\n                    if isinstance(base, EnumType):\n                        continue\n                    data_types.add(candidate or base)\n                    break\n                else:\n                    candidate = candidate or base\n        if len(data_types) > 1:\n            raise TypeError('too many data types for %r: %r' % (class_name, data_types))\n        elif data_types:\n            return data_types.pop()\n        else:\n            return None\n\n    @classmethod\n    def _find_new_(mcls, classdict, member_type, first_enum):\n        \"\"\"\n        Returns the __new__ to be used for creating the enum members.\n\n        classdict: the class dictionary given to __new__\n        member_type: the data type whose __new__ will be used by default\n        first_enum: enumeration to check for an overriding __new__\n        \"\"\"\n        # now find the correct __new__, checking to see of one was defined\n        # by the user; also check earlier enum classes in case a __new__ was\n        # saved as __new_member__\n        __new__ = classdict.get('__new__', None)\n\n        # should __new__ be saved as __new_member__ later?\n        save_new = first_enum is not None and __new__ is not None\n\n        if __new__ is None:\n            # check all possibles for __new_member__ before falling back to\n            # __new__\n            for method in ('__new_member__', '__new__'):\n                for possible in (member_type, first_enum):\n                    target = getattr(possible, method, None)\n                    if target not in {\n                            None,\n                            None.__new__,\n                            object.__new__,\n                            Enum.__new__,\n                            }:\n                        __new__ = target\n                        break\n                if __new__ is not None:\n                    break\n            else:\n                __new__ = object.__new__\n\n        # if a non-object.__new__ is used then whatever value/tuple was\n        # assigned to the enum member name will be passed to __new__ and to the\n        # new enum member's __init__\n        if first_enum is None or __new__ in (Enum.__new__, object.__new__):\n            use_args = False\n        else:\n            use_args = True\n        return __new__, save_new, use_args\nEnumMeta = EnumType\n\n\nclass Enum(metaclass=EnumType):\n    \"\"\"\n    Create a collection of name/value pairs.\n\n    Example enumeration:\n\n    >>> class Color(Enum):\n    ...     RED = 1\n    ...     BLUE = 2\n    ...     GREEN = 3\n\n    Access them by:\n\n    - attribute access::\n\n    >>> Color.RED\n    <Color.RED: 1>\n\n    - value lookup:\n\n    >>> Color(1)\n    <Color.RED: 1>\n\n    - name lookup:\n\n    >>> Color['RED']\n    <Color.RED: 1>\n\n    Enumerations can be iterated over, and know how many members they have:\n\n    >>> len(Color)\n    3\n\n    >>> list(Color)\n    [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]\n\n    Methods can be added to enumerations, and members can have their own\n    attributes -- see the documentation for details.\n    \"\"\"\n\n    def __new__(cls, value):\n        # all enum instances are actually created during class construction\n        # without calling this method; this method is called by the metaclass'\n        # __call__ (i.e. Color(3) ), and by pickle\n        if type(value) is cls:\n            # For lookups like Color(Color.RED)\n            return value\n        # by-value search for a matching enum member\n        # see if it's in the reverse mapping (for hashable values)\n        try:\n            return cls._value2member_map_[value]\n        except KeyError:\n            # Not found, no need to do long O(n) search\n            pass\n        except TypeError:\n            # not there, now do long search -- O(n) behavior\n            for member in cls._member_map_.values():\n                if member._value_ == value:\n                    return member\n        # still not found -- verify that members exist, in-case somebody got here mistakenly\n        # (such as via super when trying to override __new__)\n        if not cls._member_map_:\n            raise TypeError(\"%r has no members defined\" % cls)\n        #\n        # still not found -- try _missing_ hook\n        try:\n            exc = None\n            result = cls._missing_(value)\n        except Exception as e:\n            exc = e\n            result = None\n        try:\n            if isinstance(result, cls):\n                return result\n            elif (\n                    Flag is not None and issubclass(cls, Flag)\n                    and cls._boundary_ is EJECT and isinstance(result, int)\n                ):\n                return result\n            else:\n                ve_exc = ValueError(\"%r is not a valid %s\" % (value, cls.__qualname__))\n                if result is None and exc is None:\n                    raise ve_exc\n                elif exc is None:\n                    exc = TypeError(\n                            'error in %s._missing_: returned %r instead of None or a valid member'\n                            % (cls.__name__, result)\n                            )\n                if not isinstance(exc, ValueError):\n                    exc.__context__ = ve_exc\n                raise exc\n        finally:\n            # ensure all variables that could hold an exception are destroyed\n            exc = None\n            ve_exc = None\n\n    def __init__(self, *args, **kwds):\n        pass\n\n    def _generate_next_value_(name, start, count, last_values):\n        \"\"\"\n        Generate the next value when not given.\n\n        name: the name of the member\n        start: the initial start value or None\n        count: the number of existing members\n        last_values: the list of values assigned\n        \"\"\"\n        if not last_values:\n            return start\n        try:\n            last = last_values[-1]\n            last_values.sort()\n            if last == last_values[-1]:\n                # no difference between old and new methods\n                return last + 1\n            else:\n                # trigger old method (with warning)\n                raise TypeError\n        except TypeError:\n            import warnings\n            warnings.warn(\n                    \"In 3.13 the default `auto()`/`_generate_next_value_` will require all values to be sortable and support adding +1\\n\"\n                    \"and the value returned will be the largest value in the enum incremented by 1\",\n                    DeprecationWarning,\n                    stacklevel=3,\n                    )\n            for v in reversed(last_values):\n                try:\n                    return v + 1\n                except TypeError:\n                    pass\n            return start\n\n    @classmethod\n    def _missing_(cls, value):\n        return None\n\n    def __repr__(self):\n        v_repr = self.__class__._value_repr_ or repr\n        return \"<%s.%s: %s>\" % (self.__class__.__name__, self._name_, v_repr(self._value_))\n\n    def __str__(self):\n        return \"%s.%s\" % (self.__class__.__name__, self._name_, )\n\n    def __dir__(self):\n        \"\"\"\n        Returns public methods and other interesting attributes.\n        \"\"\"\n        interesting = set()\n        if self.__class__._member_type_ is not object:\n            interesting = set(object.__dir__(self))\n        for name in getattr(self, '__dict__', []):\n            if name[0] != '_' and name not in self._member_map_:\n                interesting.add(name)\n        for cls in self.__class__.mro():\n            for name, obj in cls.__dict__.items():\n                if name[0] == '_':\n                    continue\n                if isinstance(obj, property):\n                    # that's an enum.property\n                    if obj.fget is not None or name not in self._member_map_:\n                        interesting.add(name)\n                    else:\n                        # in case it was added by `dir(self)`\n                        interesting.discard(name)\n                elif name not in self._member_map_:\n                    interesting.add(name)\n        names = sorted(\n                set(['__class__', '__doc__', '__eq__', '__hash__', '__module__'])\n                | interesting\n                )\n        return names\n\n    def __format__(self, format_spec):\n        return str.__format__(str(self), format_spec)\n\n    def __hash__(self):\n        return hash(self._name_)\n\n    def __reduce_ex__(self, proto):\n        return self.__class__, (self._value_, )\n\n    def __deepcopy__(self,memo):\n        return self\n\n    def __copy__(self):\n        return self\n\n    # enum.property is used to provide access to the `name` and\n    # `value` attributes of enum members while keeping some measure of\n    # protection from modification, while still allowing for an enumeration\n    # to have members named `name` and `value`.  This works because enumeration\n    # members are not set directly on the enum class; they are kept in a\n    # separate structure, _member_map_, which is where enum.property looks for\n    # them\n\n    @property\n    def name(self):\n        \"\"\"The name of the Enum member.\"\"\"\n        return self._name_\n\n    @property\n    def value(self):\n        \"\"\"The value of the Enum member.\"\"\"\n        return self._value_\n\n\nclass ReprEnum(Enum):\n    \"\"\"\n    Only changes the repr(), leaving str() and format() to the mixed-in type.\n    \"\"\"\n\n\nclass IntEnum(int, ReprEnum):\n    \"\"\"\n    Enum where members are also (and must be) ints\n    \"\"\"\n\n\nclass StrEnum(str, ReprEnum):\n    \"\"\"\n    Enum where members are also (and must be) strings\n    \"\"\"\n\n    def __new__(cls, *values):\n        \"values must already be of type `str`\"\n        if len(values) > 3:\n            raise TypeError('too many arguments for str(): %r' % (values, ))\n        if len(values) == 1:\n            # it must be a string\n            if not isinstance(values[0], str):\n                raise TypeError('%r is not a string' % (values[0], ))\n        if len(values) >= 2:\n            # check that encoding argument is a string\n            if not isinstance(values[1], str):\n                raise TypeError('encoding must be a string, not %r' % (values[1], ))\n        if len(values) == 3:\n            # check that errors argument is a string\n            if not isinstance(values[2], str):\n                raise TypeError('errors must be a string, not %r' % (values[2]))\n        value = str(*values)\n        member = str.__new__(cls, value)\n        member._value_ = value\n        return member\n\n    def _generate_next_value_(name, start, count, last_values):\n        \"\"\"\n        Return the lower-cased version of the member name.\n        \"\"\"\n        return name.lower()\n\n\ndef pickle_by_global_name(self, proto):\n    # should not be used with Flag-type enums\n    return self.name\n_reduce_ex_by_global_name = pickle_by_global_name\n\ndef pickle_by_enum_name(self, proto):\n    # should not be used with Flag-type enums\n    return getattr, (self.__class__, self._name_)\n\nclass FlagBoundary(StrEnum):\n    \"\"\"\n    control how out of range values are handled\n    \"strict\" -> error is raised             [default for Flag]\n    \"conform\" -> extra bits are discarded\n    \"eject\" -> lose flag status\n    \"keep\" -> keep flag status and all bits [default for IntFlag]\n    \"\"\"\n    STRICT = auto()\n    CONFORM = auto()\n    EJECT = auto()\n    KEEP = auto()\nSTRICT, CONFORM, EJECT, KEEP = FlagBoundary\n\n\nclass Flag(Enum, boundary=STRICT):\n    \"\"\"\n    Support for flags\n    \"\"\"\n\n    _numeric_repr_ = repr\n\n    def _generate_next_value_(name, start, count, last_values):\n        \"\"\"\n        Generate the next value when not given.\n\n        name: the name of the member\n        start: the initial start value or None\n        count: the number of existing members\n        last_values: the last value assigned or None\n        \"\"\"\n        if not count:\n            return start if start is not None else 1\n        last_value = max(last_values)\n        try:\n            high_bit = _high_bit(last_value)\n        except Exception:\n            raise TypeError('invalid flag value %r' % last_value) from None\n        return 2 ** (high_bit+1)\n\n    @classmethod\n    def _iter_member_by_value_(cls, value):\n        \"\"\"\n        Extract all members from the value in definition (i.e. increasing value) order.\n        \"\"\"\n        for val in _iter_bits_lsb(value & cls._flag_mask_):\n            yield cls._value2member_map_.get(val)\n\n    _iter_member_ = _iter_member_by_value_\n\n    @classmethod\n    def _iter_member_by_def_(cls, value):\n        \"\"\"\n        Extract all members from the value in definition order.\n        \"\"\"\n        yield from sorted(\n                cls._iter_member_by_value_(value),\n                key=lambda m: m._sort_order_,\n                )\n\n    @classmethod\n    def _missing_(cls, value):\n        \"\"\"\n        Create a composite member containing all canonical members present in `value`.\n\n        If non-member values are present, result depends on `_boundary_` setting.\n        \"\"\"\n        if not isinstance(value, int):\n            raise ValueError(\n                    \"%r is not a valid %s\" % (value, cls.__qualname__)\n                    )\n        # check boundaries\n        # - value must be in range (e.g. -16 <-> +15, i.e. ~15 <-> 15)\n        # - value must not include any skipped flags (e.g. if bit 2 is not\n        #   defined, then 0d10 is invalid)\n        flag_mask = cls._flag_mask_\n        singles_mask = cls._singles_mask_\n        all_bits = cls._all_bits_\n        neg_value = None\n        if (\n                not ~all_bits <= value <= all_bits\n                or value & (all_bits ^ flag_mask)\n            ):\n            if cls._boundary_ is STRICT:\n                max_bits = max(value.bit_length(), flag_mask.bit_length())\n                raise ValueError(\n                        \"%r invalid value %r\\n    given %s\\n  allowed %s\" % (\n                            cls, value, bin(value, max_bits), bin(flag_mask, max_bits),\n                            ))\n            elif cls._boundary_ is CONFORM:\n                value = value & flag_mask\n            elif cls._boundary_ is EJECT:\n                return value\n            elif cls._boundary_ is KEEP:\n                if value < 0:\n                    value = (\n                            max(all_bits+1, 2**(value.bit_length()))\n                            + value\n                            )\n            else:\n                raise ValueError(\n                        '%r unknown flag boundary %r' % (cls, cls._boundary_, )\n                        )\n        if value < 0:\n            neg_value = value\n            value = all_bits + 1 + value\n        # get members and unknown\n        unknown = value & ~flag_mask\n        aliases = value & ~singles_mask\n        member_value = value & singles_mask\n        if unknown and cls._boundary_ is not KEEP:\n            raise ValueError(\n                    '%s(%r) -->  unknown values %r [%s]'\n                    % (cls.__name__, value, unknown, bin(unknown))\n                    )\n        # normal Flag?\n        if cls._member_type_ is object:\n            # construct a singleton enum pseudo-member\n            pseudo_member = object.__new__(cls)\n        else:\n            pseudo_member = cls._member_type_.__new__(cls, value)\n        if not hasattr(pseudo_member, '_value_'):\n            pseudo_member._value_ = value\n        if member_value or aliases:\n            members = []\n            combined_value = 0\n            for m in cls._iter_member_(member_value):\n                members.append(m)\n                combined_value |= m._value_\n            if aliases:\n                value = member_value | aliases\n                for n, pm in cls._member_map_.items():\n                    if pm not in members and pm._value_ and pm._value_ & value == pm._value_:\n                        members.append(pm)\n                        combined_value |= pm._value_\n            unknown = value ^ combined_value\n            pseudo_member._name_ = '|'.join([m._name_ for m in members])\n            if not combined_value:\n                pseudo_member._name_ = None\n            elif unknown and cls._boundary_ is STRICT:\n                raise ValueError('%r: no members with value %r' % (cls, unknown))\n            elif unknown:\n                pseudo_member._name_ += '|%s' % cls._numeric_repr_(unknown)\n        else:\n            pseudo_member._name_ = None\n        # use setdefault in case another thread already created a composite\n        # with this value\n        # note: zero is a special case -- always add it\n        pseudo_member = cls._value2member_map_.setdefault(value, pseudo_member)\n        if neg_value is not None:\n            cls._value2member_map_[neg_value] = pseudo_member\n        return pseudo_member\n\n    def __contains__(self, other):\n        \"\"\"\n        Returns True if self has at least the same flags set as other.\n        \"\"\"\n        if not isinstance(other, self.__class__):\n            raise TypeError(\n                \"unsupported operand type(s) for 'in': %r and %r\" % (\n                    type(other).__qualname__, self.__class__.__qualname__))\n        return other._value_ & self._value_ == other._value_\n\n    def __iter__(self):\n        \"\"\"\n        Returns flags in definition order.\n        \"\"\"\n        yield from self._iter_member_(self._value_)\n\n    def __len__(self):\n        return self._value_.bit_count()\n\n    def __repr__(self):\n        cls_name = self.__class__.__name__\n        v_repr = self.__class__._value_repr_ or repr\n        if self._name_ is None:\n            return \"<%s: %s>\" % (cls_name, v_repr(self._value_))\n        else:\n            return \"<%s.%s: %s>\" % (cls_name, self._name_, v_repr(self._value_))\n\n    def __str__(self):\n        cls_name = self.__class__.__name__\n        if self._name_ is None:\n            return '%s(%r)' % (cls_name, self._value_)\n        else:\n            return \"%s.%s\" % (cls_name, self._name_)\n\n    def __bool__(self):\n        return bool(self._value_)\n\n    def __or__(self, other):\n        if isinstance(other, self.__class__):\n            other = other._value_\n        elif self._member_type_ is not object and isinstance(other, self._member_type_):\n            other = other\n        else:\n            return NotImplemented\n        value = self._value_\n        return self.__class__(value | other)\n\n    def __and__(self, other):\n        if isinstance(other, self.__class__):\n            other = other._value_\n        elif self._member_type_ is not object and isinstance(other, self._member_type_):\n            other = other\n        else:\n            return NotImplemented\n        value = self._value_\n        return self.__class__(value & other)\n\n    def __xor__(self, other):\n        if isinstance(other, self.__class__):\n            other = other._value_\n        elif self._member_type_ is not object and isinstance(other, self._member_type_):\n            other = other\n        else:\n            return NotImplemented\n        value = self._value_\n        return self.__class__(value ^ other)\n\n    def __invert__(self):\n        if self._inverted_ is None:\n            if self._boundary_ in (EJECT, KEEP):\n                self._inverted_ = self.__class__(~self._value_)\n            else:\n                self._inverted_ = self.__class__(self._singles_mask_ & ~self._value_)\n        return self._inverted_\n\n    __rand__ = __and__\n    __ror__ = __or__\n    __rxor__ = __xor__\n\n\nclass IntFlag(int, ReprEnum, Flag, boundary=KEEP):\n    \"\"\"\n    Support for integer-based Flags\n    \"\"\"\n\n\ndef _high_bit(value):\n    \"\"\"\n    returns index of highest bit, or -1 if value is zero or negative\n    \"\"\"\n    return value.bit_length() - 1\n\ndef unique(enumeration):\n    \"\"\"\n    Class decorator for enumerations ensuring unique member values.\n    \"\"\"\n    duplicates = []\n    for name, member in enumeration.__members__.items():\n        if name != member.name:\n            duplicates.append((name, member.name))\n    if duplicates:\n        alias_details = ', '.join(\n                [\"%s -> %s\" % (alias, name) for (alias, name) in duplicates])\n        raise ValueError('duplicate values found in %r: %s' %\n                (enumeration, alias_details))\n    return enumeration\n\ndef _power_of_two(value):\n    if value < 1:\n        return False\n    return value == 2 ** _high_bit(value)\n\ndef global_enum_repr(self):\n    \"\"\"\n    use module.enum_name instead of class.enum_name\n\n    the module is the last module in case of a multi-module name\n    \"\"\"\n    module = self.__class__.__module__.split('.')[-1]\n    return '%s.%s' % (module, self._name_)\n\ndef global_flag_repr(self):\n    \"\"\"\n    use module.flag_name instead of class.flag_name\n\n    the module is the last module in case of a multi-module name\n    \"\"\"\n    module = self.__class__.__module__.split('.')[-1]\n    cls_name = self.__class__.__name__\n    if self._name_ is None:\n        return \"%s.%s(%r)\" % (module, cls_name, self._value_)\n    if _is_single_bit(self):\n        return '%s.%s' % (module, self._name_)\n    if self._boundary_ is not FlagBoundary.KEEP:\n        return '|'.join(['%s.%s' % (module, name) for name in self.name.split('|')])\n    else:\n        name = []\n        for n in self._name_.split('|'):\n            if n[0].isdigit():\n                name.append(n)\n            else:\n                name.append('%s.%s' % (module, n))\n        return '|'.join(name)\n\ndef global_str(self):\n    \"\"\"\n    use enum_name instead of class.enum_name\n    \"\"\"\n    if self._name_ is None:\n        cls_name = self.__class__.__name__\n        return \"%s(%r)\" % (cls_name, self._value_)\n    else:\n        return self._name_\n\ndef global_enum(cls, update_str=False):\n    \"\"\"\n    decorator that makes the repr() of an enum member reference its module\n    instead of its class; also exports all members to the enum's module's\n    global namespace\n    \"\"\"\n    if issubclass(cls, Flag):\n        cls.__repr__ = global_flag_repr\n    else:\n        cls.__repr__ = global_enum_repr\n    if not issubclass(cls, ReprEnum) or update_str:\n        cls.__str__ = global_str\n    sys.modules[cls.__module__].__dict__.update(cls.__members__)\n    return cls\n\ndef _simple_enum(etype=Enum, *, boundary=None, use_args=None):\n    \"\"\"\n    Class decorator that converts a normal class into an :class:`Enum`.  No\n    safety checks are done, and some advanced behavior (such as\n    :func:`__init_subclass__`) is not available.  Enum creation can be faster\n    using :func:`simple_enum`.\n\n        >>> from enum import Enum, _simple_enum\n        >>> @_simple_enum(Enum)\n        ... class Color:\n        ...     RED = auto()\n        ...     GREEN = auto()\n        ...     BLUE = auto()\n        >>> Color\n        <enum 'Color'>\n    \"\"\"\n    def convert_class(cls):\n        nonlocal use_args\n        cls_name = cls.__name__\n        if use_args is None:\n            use_args = etype._use_args_\n        __new__ = cls.__dict__.get('__new__')\n        if __new__ is not None:\n            new_member = __new__.__func__\n        else:\n            new_member = etype._member_type_.__new__\n        attrs = {}\n        body = {}\n        if __new__ is not None:\n            body['__new_member__'] = new_member\n        body['_new_member_'] = new_member\n        body['_use_args_'] = use_args\n        body['_generate_next_value_'] = gnv = etype._generate_next_value_\n        body['_member_names_'] = member_names = []\n        body['_member_map_'] = member_map = {}\n        body['_value2member_map_'] = value2member_map = {}\n        body['_unhashable_values_'] = []\n        body['_member_type_'] = member_type = etype._member_type_\n        body['_value_repr_'] = etype._value_repr_\n        if issubclass(etype, Flag):\n            body['_boundary_'] = boundary or etype._boundary_\n            body['_flag_mask_'] = None\n            body['_all_bits_'] = None\n            body['_singles_mask_'] = None\n            body['_inverted_'] = None\n            body['__or__'] = Flag.__or__\n            body['__xor__'] = Flag.__xor__\n            body['__and__'] = Flag.__and__\n            body['__ror__'] = Flag.__ror__\n            body['__rxor__'] = Flag.__rxor__\n            body['__rand__'] = Flag.__rand__\n            body['__invert__'] = Flag.__invert__\n        for name, obj in cls.__dict__.items():\n            if name in ('__dict__', '__weakref__'):\n                continue\n            if _is_dunder(name) or _is_private(cls_name, name) or _is_sunder(name) or _is_descriptor(obj):\n                body[name] = obj\n            else:\n                attrs[name] = obj\n        if cls.__dict__.get('__doc__') is None:\n            body['__doc__'] = 'An enumeration.'\n        #\n        # double check that repr and friends are not the mixin's or various\n        # things break (such as pickle)\n        # however, if the method is defined in the Enum itself, don't replace\n        # it\n        enum_class = type(cls_name, (etype, ), body, boundary=boundary, _simple=True)\n        for name in ('__repr__', '__str__', '__format__', '__reduce_ex__'):\n            if name not in body:\n                # check for mixin overrides before replacing\n                enum_method = getattr(etype, name)\n                found_method = getattr(enum_class, name)\n                object_method = getattr(object, name)\n                data_type_method = getattr(member_type, name)\n                if found_method in (data_type_method, object_method):\n                    setattr(enum_class, name, enum_method)\n        gnv_last_values = []\n        if issubclass(enum_class, Flag):\n            # Flag / IntFlag\n            single_bits = multi_bits = 0\n            for name, value in attrs.items():\n                if isinstance(value, auto) and auto.value is _auto_null:\n                    value = gnv(name, 1, len(member_names), gnv_last_values)\n                if value in value2member_map:\n                    # an alias to an existing member\n                    redirect = property()\n                    redirect.__set_name__(enum_class, name)\n                    setattr(enum_class, name, redirect)\n                    member_map[name] = value2member_map[value]\n                else:\n                    # create the member\n                    if use_args:\n                        if not isinstance(value, tuple):\n                            value = (value, )\n                        member = new_member(enum_class, *value)\n                        value = value[0]\n                    else:\n                        member = new_member(enum_class)\n                    if __new__ is None:\n                        member._value_ = value\n                    member._name_ = name\n                    member.__objclass__ = enum_class\n                    member.__init__(value)\n                    redirect = property()\n                    redirect.__set_name__(enum_class, name)\n                    setattr(enum_class, name, redirect)\n                    member_map[name] = member\n                    member._sort_order_ = len(member_names)\n                    value2member_map[value] = member\n                    if _is_single_bit(value):\n                        # not a multi-bit alias, record in _member_names_ and _flag_mask_\n                        member_names.append(name)\n                        single_bits |= value\n                    else:\n                        multi_bits |= value\n                    gnv_last_values.append(value)\n            enum_class._flag_mask_ = single_bits | multi_bits\n            enum_class._singles_mask_ = single_bits\n            enum_class._all_bits_ = 2 ** ((single_bits|multi_bits).bit_length()) - 1\n            # set correct __iter__\n            member_list = [m._value_ for m in enum_class]\n            if member_list != sorted(member_list):\n                enum_class._iter_member_ = enum_class._iter_member_by_def_\n        else:\n            # Enum / IntEnum / StrEnum\n            for name, value in attrs.items():\n                if isinstance(value, auto):\n                    if value.value is _auto_null:\n                        value.value = gnv(name, 1, len(member_names), gnv_last_values)\n                    value = value.value\n                if value in value2member_map:\n                    # an alias to an existing member\n                    redirect = property()\n                    redirect.__set_name__(enum_class, name)\n                    setattr(enum_class, name, redirect)\n                    member_map[name] = value2member_map[value]\n                else:\n                    # create the member\n                    if use_args:\n                        if not isinstance(value, tuple):\n                            value = (value, )\n                        member = new_member(enum_class, *value)\n                        value = value[0]\n                    else:\n                        member = new_member(enum_class)\n                    if __new__ is None:\n                        member._value_ = value\n                    member._name_ = name\n                    member.__objclass__ = enum_class\n                    member.__init__(value)\n                    member._sort_order_ = len(member_names)\n                    redirect = property()\n                    redirect.__set_name__(enum_class, name)\n                    setattr(enum_class, name, redirect)\n                    member_map[name] = member\n                    value2member_map[value] = member\n                    member_names.append(name)\n                    gnv_last_values.append(value)\n        if '__new__' in body:\n            enum_class.__new_member__ = enum_class.__new__\n        enum_class.__new__ = Enum.__new__\n        return enum_class\n    return convert_class\n\n@_simple_enum(StrEnum)\nclass EnumCheck:\n    \"\"\"\n    various conditions to check an enumeration for\n    \"\"\"\n    CONTINUOUS = \"no skipped integer values\"\n    NAMED_FLAGS = \"multi-flag aliases may not contain unnamed flags\"\n    UNIQUE = \"one name per value\"\nCONTINUOUS, NAMED_FLAGS, UNIQUE = EnumCheck\n\n\nclass verify:\n    \"\"\"\n    Check an enumeration for various constraints. (see EnumCheck)\n    \"\"\"\n    def __init__(self, *checks):\n        self.checks = checks\n    def __call__(self, enumeration):\n        checks = self.checks\n        cls_name = enumeration.__name__\n        if Flag is not None and issubclass(enumeration, Flag):\n            enum_type = 'flag'\n        elif issubclass(enumeration, Enum):\n            enum_type = 'enum'\n        else:\n            raise TypeError(\"the 'verify' decorator only works with Enum and Flag\")\n        for check in checks:\n            if check is UNIQUE:\n                # check for duplicate names\n                duplicates = []\n                for name, member in enumeration.__members__.items():\n                    if name != member.name:\n                        duplicates.append((name, member.name))\n                if duplicates:\n                    alias_details = ', '.join(\n                            [\"%s -> %s\" % (alias, name) for (alias, name) in duplicates])\n                    raise ValueError('aliases found in %r: %s' %\n                            (enumeration, alias_details))\n            elif check is CONTINUOUS:\n                values = set(e.value for e in enumeration)\n                if len(values) < 2:\n                    continue\n                low, high = min(values), max(values)\n                missing = []\n                if enum_type == 'flag':\n                    # check for powers of two\n                    for i in range(_high_bit(low)+1, _high_bit(high)):\n                        if 2**i not in values:\n                            missing.append(2**i)\n                elif enum_type == 'enum':\n                    # check for powers of one\n                    for i in range(low+1, high):\n                        if i not in values:\n                            missing.append(i)\n                else:\n                    raise Exception('verify: unknown type %r' % enum_type)\n                if missing:\n                    raise ValueError(('invalid %s %r: missing values %s' % (\n                            enum_type, cls_name, ', '.join((str(m) for m in missing)))\n                            )[:256])\n                            # limit max length to protect against DOS attacks\n            elif check is NAMED_FLAGS:\n                # examine each alias and check for unnamed flags\n                member_names = enumeration._member_names_\n                member_values = [m.value for m in enumeration]\n                missing_names = []\n                missing_value = 0\n                for name, alias in enumeration._member_map_.items():\n                    if name in member_names:\n                        # not an alias\n                        continue\n                    if alias.value < 0:\n                        # negative numbers are not checked\n                        continue\n                    values = list(_iter_bits_lsb(alias.value))\n                    missed = [v for v in values if v not in member_values]\n                    if missed:\n                        missing_names.append(name)\n                        missing_value |= reduce(_or_, missed)\n                if missing_names:\n                    if len(missing_names) == 1:\n                        alias = 'alias %s is missing' % missing_names[0]\n                    else:\n                        alias = 'aliases %s and %s are missing' % (\n                                ', '.join(missing_names[:-1]), missing_names[-1]\n                                )\n                    if _is_single_bit(missing_value):\n                        value = 'value 0x%x' % missing_value\n                    else:\n                        value = 'combined values of 0x%x' % missing_value\n                    raise ValueError(\n                            'invalid Flag %r: %s %s [use enum.show_flag_values(value) for details]'\n                            % (cls_name, alias, value)\n                            )\n        return enumeration\n\ndef _test_simple_enum(checked_enum, simple_enum):\n    \"\"\"\n    A function that can be used to test an enum created with :func:`_simple_enum`\n    against the version created by subclassing :class:`Enum`::\n\n        >>> from enum import Enum, _simple_enum, _test_simple_enum\n        >>> @_simple_enum(Enum)\n        ... class Color:\n        ...     RED = auto()\n        ...     GREEN = auto()\n        ...     BLUE = auto()\n        >>> class CheckedColor(Enum):\n        ...     RED = auto()\n        ...     GREEN = auto()\n        ...     BLUE = auto()\n        >>> _test_simple_enum(CheckedColor, Color)\n\n    If differences are found, a :exc:`TypeError` is raised.\n    \"\"\"\n    failed = []\n    if checked_enum.__dict__ != simple_enum.__dict__:\n        checked_dict = checked_enum.__dict__\n        checked_keys = list(checked_dict.keys())\n        simple_dict = simple_enum.__dict__\n        simple_keys = list(simple_dict.keys())\n        member_names = set(\n                list(checked_enum._member_map_.keys())\n                + list(simple_enum._member_map_.keys())\n                )\n        for key in set(checked_keys + simple_keys):\n            if key in ('__module__', '_member_map_', '_value2member_map_', '__doc__'):\n                # keys known to be different, or very long\n                continue\n            elif key in member_names:\n                # members are checked below\n                continue\n            elif key not in simple_keys:\n                failed.append(\"missing key: %r\" % (key, ))\n            elif key not in checked_keys:\n                failed.append(\"extra key:   %r\" % (key, ))\n            else:\n                checked_value = checked_dict[key]\n                simple_value = simple_dict[key]\n                if callable(checked_value) or isinstance(checked_value, bltns.property):\n                    continue\n                if key == '__doc__':\n                    # remove all spaces/tabs\n                    compressed_checked_value = checked_value.replace(' ','').replace('\\t','')\n                    compressed_simple_value = simple_value.replace(' ','').replace('\\t','')\n                    if compressed_checked_value != compressed_simple_value:\n                        failed.append(\"%r:\\n         %s\\n         %s\" % (\n                                key,\n                                \"checked -> %r\" % (checked_value, ),\n                                \"simple  -> %r\" % (simple_value, ),\n                                ))\n                elif checked_value != simple_value:\n                    failed.append(\"%r:\\n         %s\\n         %s\" % (\n                            key,\n                            \"checked -> %r\" % (checked_value, ),\n                            \"simple  -> %r\" % (simple_value, ),\n                            ))\n        failed.sort()\n        for name in member_names:\n            failed_member = []\n            if name not in simple_keys:\n                failed.append('missing member from simple enum: %r' % name)\n            elif name not in checked_keys:\n                failed.append('extra member in simple enum: %r' % name)\n            else:\n                checked_member_dict = checked_enum[name].__dict__\n                checked_member_keys = list(checked_member_dict.keys())\n                simple_member_dict = simple_enum[name].__dict__\n                simple_member_keys = list(simple_member_dict.keys())\n                for key in set(checked_member_keys + simple_member_keys):\n                    if key in ('__module__', '__objclass__', '_inverted_'):\n                        # keys known to be different or absent\n                        continue\n                    elif key not in simple_member_keys:\n                        failed_member.append(\"missing key %r not in the simple enum member %r\" % (key, name))\n                    elif key not in checked_member_keys:\n                        failed_member.append(\"extra key %r in simple enum member %r\" % (key, name))\n                    else:\n                        checked_value = checked_member_dict[key]\n                        simple_value = simple_member_dict[key]\n                        if checked_value != simple_value:\n                            failed_member.append(\"%r:\\n         %s\\n         %s\" % (\n                                    key,\n                                    \"checked member -> %r\" % (checked_value, ),\n                                    \"simple member  -> %r\" % (simple_value, ),\n                                    ))\n            if failed_member:\n                failed.append('%r member mismatch:\\n      %s' % (\n                        name, '\\n      '.join(failed_member),\n                        ))\n        for method in (\n                '__str__', '__repr__', '__reduce_ex__', '__format__',\n                '__getnewargs_ex__', '__getnewargs__', '__reduce_ex__', '__reduce__'\n            ):\n            if method in simple_keys and method in checked_keys:\n                # cannot compare functions, and it exists in both, so we're good\n                continue\n            elif method not in simple_keys and method not in checked_keys:\n                # method is inherited -- check it out\n                checked_method = getattr(checked_enum, method, None)\n                simple_method = getattr(simple_enum, method, None)\n                if hasattr(checked_method, '__func__'):\n                    checked_method = checked_method.__func__\n                    simple_method = simple_method.__func__\n                if checked_method != simple_method:\n                    failed.append(\"%r:  %-30s %s\" % (\n                            method,\n                            \"checked -> %r\" % (checked_method, ),\n                            \"simple -> %r\" % (simple_method, ),\n                            ))\n            else:\n                # if the method existed in only one of the enums, it will have been caught\n                # in the first checks above\n                pass\n    if failed:\n        raise TypeError('enum mismatch:\\n   %s' % '\\n   '.join(failed))\n\ndef _old_convert_(etype, name, module, filter, source=None, *, boundary=None):\n    \"\"\"\n    Create a new Enum subclass that replaces a collection of global constants\n    \"\"\"\n    # convert all constants from source (or module) that pass filter() to\n    # a new Enum called name, and export the enum and its members back to\n    # module;\n    # also, replace the __reduce_ex__ method so unpickling works in\n    # previous Python versions\n    module_globals = sys.modules[module].__dict__\n    if source:\n        source = source.__dict__\n    else:\n        source = module_globals\n    # _value2member_map_ is populated in the same order every time\n    # for a consistent reverse mapping of number to name when there\n    # are multiple names for the same number.\n    members = [\n            (name, value)\n            for name, value in source.items()\n            if filter(name)]\n    try:\n        # sort by value\n        members.sort(key=lambda t: (t[1], t[0]))\n    except TypeError:\n        # unless some values aren't comparable, in which case sort by name\n        members.sort(key=lambda t: t[0])\n    cls = etype(name, members, module=module, boundary=boundary or KEEP)\n    return cls\n\n_stdlib_enums = IntEnum, StrEnum, IntFlag\n", 2048], "/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py": ["#\n# Secret Labs' Regular Expression Engine\n#\n# convert template to internal format\n#\n# Copyright (c) 1997-2001 by Secret Labs AB.  All rights reserved.\n#\n# See the __init__.py file for information on usage and redistribution.\n#\n\n\"\"\"Internal support module for sre\"\"\"\n\nimport _sre\nfrom . import _parser\nfrom ._constants import *\nfrom ._casefix import _EXTRA_CASES\n\nassert _sre.MAGIC == MAGIC, \"SRE module mismatch\"\n\n_LITERAL_CODES = {LITERAL, NOT_LITERAL}\n_SUCCESS_CODES = {SUCCESS, FAILURE}\n_ASSERT_CODES = {ASSERT, ASSERT_NOT}\n_UNIT_CODES = _LITERAL_CODES | {ANY, IN}\n\n_REPEATING_CODES = {\n    MIN_REPEAT: (REPEAT, MIN_UNTIL, MIN_REPEAT_ONE),\n    MAX_REPEAT: (REPEAT, MAX_UNTIL, REPEAT_ONE),\n    POSSESSIVE_REPEAT: (POSSESSIVE_REPEAT, SUCCESS, POSSESSIVE_REPEAT_ONE),\n}\n\ndef _combine_flags(flags, add_flags, del_flags,\n                   TYPE_FLAGS=_parser.TYPE_FLAGS):\n    if add_flags & TYPE_FLAGS:\n        flags &= ~TYPE_FLAGS\n    return (flags | add_flags) & ~del_flags\n\ndef _compile(code, pattern, flags):\n    # internal: compile a (sub)pattern\n    emit = code.append\n    _len = len\n    LITERAL_CODES = _LITERAL_CODES\n    REPEATING_CODES = _REPEATING_CODES\n    SUCCESS_CODES = _SUCCESS_CODES\n    ASSERT_CODES = _ASSERT_CODES\n    iscased = None\n    tolower = None\n    fixes = None\n    if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\n        if flags & SRE_FLAG_UNICODE:\n            iscased = _sre.unicode_iscased\n            tolower = _sre.unicode_tolower\n            fixes = _EXTRA_CASES\n        else:\n            iscased = _sre.ascii_iscased\n            tolower = _sre.ascii_tolower\n    for op, av in pattern:\n        if op in LITERAL_CODES:\n            if not flags & SRE_FLAG_IGNORECASE:\n                emit(op)\n                emit(av)\n            elif flags & SRE_FLAG_LOCALE:\n                emit(OP_LOCALE_IGNORE[op])\n                emit(av)\n            elif not iscased(av):\n                emit(op)\n                emit(av)\n            else:\n                lo = tolower(av)\n                if not fixes:  # ascii\n                    emit(OP_IGNORE[op])\n                    emit(lo)\n                elif lo not in fixes:\n                    emit(OP_UNICODE_IGNORE[op])\n                    emit(lo)\n                else:\n                    emit(IN_UNI_IGNORE)\n                    skip = _len(code); emit(0)\n                    if op is NOT_LITERAL:\n                        emit(NEGATE)\n                    for k in (lo,) + fixes[lo]:\n                        emit(LITERAL)\n                        emit(k)\n                    emit(FAILURE)\n                    code[skip] = _len(code) - skip\n        elif op is IN:\n            charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\n            if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\n                emit(IN_LOC_IGNORE)\n            elif not hascased:\n                emit(IN)\n            elif not fixes:  # ascii\n                emit(IN_IGNORE)\n            else:\n                emit(IN_UNI_IGNORE)\n            skip = _len(code); emit(0)\n            _compile_charset(charset, flags, code)\n            code[skip] = _len(code) - skip\n        elif op is ANY:\n            if flags & SRE_FLAG_DOTALL:\n                emit(ANY_ALL)\n            else:\n                emit(ANY)\n        elif op in REPEATING_CODES:\n            if flags & SRE_FLAG_TEMPLATE:\n                raise error(\"internal: unsupported template operator %r\" % (op,))\n            if _simple(av[2]):\n                emit(REPEATING_CODES[op][2])\n                skip = _len(code); emit(0)\n                emit(av[0])\n                emit(av[1])\n                _compile(code, av[2], flags)\n                emit(SUCCESS)\n                code[skip] = _len(code) - skip\n            else:\n                emit(REPEATING_CODES[op][0])\n                skip = _len(code); emit(0)\n                emit(av[0])\n                emit(av[1])\n                _compile(code, av[2], flags)\n                code[skip] = _len(code) - skip\n                emit(REPEATING_CODES[op][1])\n        elif op is SUBPATTERN:\n            group, add_flags, del_flags, p = av\n            if group:\n                emit(MARK)\n                emit((group-1)*2)\n            # _compile_info(code, p, _combine_flags(flags, add_flags, del_flags))\n            _compile(code, p, _combine_flags(flags, add_flags, del_flags))\n            if group:\n                emit(MARK)\n                emit((group-1)*2+1)\n        elif op is ATOMIC_GROUP:\n            # Atomic Groups are handled by starting with an Atomic\n            # Group op code, then putting in the atomic group pattern\n            # and finally a success op code to tell any repeat\n            # operations within the Atomic Group to stop eating and\n            # pop their stack if they reach it\n            emit(ATOMIC_GROUP)\n            skip = _len(code); emit(0)\n            _compile(code, av, flags)\n            emit(SUCCESS)\n            code[skip] = _len(code) - skip\n        elif op in SUCCESS_CODES:\n            emit(op)\n        elif op in ASSERT_CODES:\n            emit(op)\n            skip = _len(code); emit(0)\n            if av[0] >= 0:\n                emit(0) # look ahead\n            else:\n                lo, hi = av[1].getwidth()\n                if lo > MAXCODE:\n                    raise error(\"looks too much behind\")\n                if lo != hi:\n                    raise error(\"look-behind requires fixed-width pattern\")\n                emit(lo) # look behind\n            _compile(code, av[1], flags)\n            emit(SUCCESS)\n            code[skip] = _len(code) - skip\n        elif op is AT:\n            emit(op)\n            if flags & SRE_FLAG_MULTILINE:\n                av = AT_MULTILINE.get(av, av)\n            if flags & SRE_FLAG_LOCALE:\n                av = AT_LOCALE.get(av, av)\n            elif flags & SRE_FLAG_UNICODE:\n                av = AT_UNICODE.get(av, av)\n            emit(av)\n        elif op is BRANCH:\n            emit(op)\n            tail = []\n            tailappend = tail.append\n            for av in av[1]:\n                skip = _len(code); emit(0)\n                # _compile_info(code, av, flags)\n                _compile(code, av, flags)\n                emit(JUMP)\n                tailappend(_len(code)); emit(0)\n                code[skip] = _len(code) - skip\n            emit(FAILURE) # end of branch\n            for tail in tail:\n                code[tail] = _len(code) - tail\n        elif op is CATEGORY:\n            emit(op)\n            if flags & SRE_FLAG_LOCALE:\n                av = CH_LOCALE[av]\n            elif flags & SRE_FLAG_UNICODE:\n                av = CH_UNICODE[av]\n            emit(av)\n        elif op is GROUPREF:\n            if not flags & SRE_FLAG_IGNORECASE:\n                emit(op)\n            elif flags & SRE_FLAG_LOCALE:\n                emit(GROUPREF_LOC_IGNORE)\n            elif not fixes:  # ascii\n                emit(GROUPREF_IGNORE)\n            else:\n                emit(GROUPREF_UNI_IGNORE)\n            emit(av-1)\n        elif op is GROUPREF_EXISTS:\n            emit(op)\n            emit(av[0]-1)\n            skipyes = _len(code); emit(0)\n            _compile(code, av[1], flags)\n            if av[2]:\n                emit(JUMP)\n                skipno = _len(code); emit(0)\n                code[skipyes] = _len(code) - skipyes + 1\n                _compile(code, av[2], flags)\n                code[skipno] = _len(code) - skipno\n            else:\n                code[skipyes] = _len(code) - skipyes + 1\n        else:\n            raise error(\"internal: unsupported operand type %r\" % (op,))\n\ndef _compile_charset(charset, flags, code):\n    # compile charset subprogram\n    emit = code.append\n    for op, av in charset:\n        emit(op)\n        if op is NEGATE:\n            pass\n        elif op is LITERAL:\n            emit(av)\n        elif op is RANGE or op is RANGE_UNI_IGNORE:\n            emit(av[0])\n            emit(av[1])\n        elif op is CHARSET:\n            code.extend(av)\n        elif op is BIGCHARSET:\n            code.extend(av)\n        elif op is CATEGORY:\n            if flags & SRE_FLAG_LOCALE:\n                emit(CH_LOCALE[av])\n            elif flags & SRE_FLAG_UNICODE:\n                emit(CH_UNICODE[av])\n            else:\n                emit(av)\n        else:\n            raise error(\"internal: unsupported set operator %r\" % (op,))\n    emit(FAILURE)\n\ndef _optimize_charset(charset, iscased=None, fixup=None, fixes=None):\n    # internal: optimize character set\n    out = []\n    tail = []\n    charmap = bytearray(256)\n    hascased = False\n    for op, av in charset:\n        while True:\n            try:\n                if op is LITERAL:\n                    if fixup:\n                        lo = fixup(av)\n                        charmap[lo] = 1\n                        if fixes and lo in fixes:\n                            for k in fixes[lo]:\n                                charmap[k] = 1\n                        if not hascased and iscased(av):\n                            hascased = True\n                    else:\n                        charmap[av] = 1\n                elif op is RANGE:\n                    r = range(av[0], av[1]+1)\n                    if fixup:\n                        if fixes:\n                            for i in map(fixup, r):\n                                charmap[i] = 1\n                                if i in fixes:\n                                    for k in fixes[i]:\n                                        charmap[k] = 1\n                        else:\n                            for i in map(fixup, r):\n                                charmap[i] = 1\n                        if not hascased:\n                            hascased = any(map(iscased, r))\n                    else:\n                        for i in r:\n                            charmap[i] = 1\n                elif op is NEGATE:\n                    out.append((op, av))\n                else:\n                    tail.append((op, av))\n            except IndexError:\n                if len(charmap) == 256:\n                    # character set contains non-UCS1 character codes\n                    charmap += b'\\0' * 0xff00\n                    continue\n                # Character set contains non-BMP character codes.\n                # For range, all BMP characters in the range are already\n                # proceeded.\n                if fixup:\n                    hascased = True\n                    # For now, IN_UNI_IGNORE+LITERAL and\n                    # IN_UNI_IGNORE+RANGE_UNI_IGNORE work for all non-BMP\n                    # characters, because two characters (at least one of\n                    # which is not in the BMP) match case-insensitively\n                    # if and only if:\n                    # 1) c1.lower() == c2.lower()\n                    # 2) c1.lower() == c2 or c1.lower().upper() == c2\n                    # Also, both c.lower() and c.lower().upper() are single\n                    # characters for every non-BMP character.\n                    if op is RANGE:\n                        op = RANGE_UNI_IGNORE\n                tail.append((op, av))\n            break\n\n    # compress character map\n    runs = []\n    q = 0\n    while True:\n        p = charmap.find(1, q)\n        if p < 0:\n            break\n        if len(runs) >= 2:\n            runs = None\n            break\n        q = charmap.find(0, p)\n        if q < 0:\n            runs.append((p, len(charmap)))\n            break\n        runs.append((p, q))\n    if runs is not None:\n        # use literal/range\n        for p, q in runs:\n            if q - p == 1:\n                out.append((LITERAL, p))\n            else:\n                out.append((RANGE, (p, q - 1)))\n        out += tail\n        # if the case was changed or new representation is more compact\n        if hascased or len(out) < len(charset):\n            return out, hascased\n        # else original character set is good enough\n        return charset, hascased\n\n    # use bitmap\n    if len(charmap) == 256:\n        data = _mk_bitmap(charmap)\n        out.append((CHARSET, data))\n        out += tail\n        return out, hascased\n\n    # To represent a big charset, first a bitmap of all characters in the\n    # set is constructed. Then, this bitmap is sliced into chunks of 256\n    # characters, duplicate chunks are eliminated, and each chunk is\n    # given a number. In the compiled expression, the charset is\n    # represented by a 32-bit word sequence, consisting of one word for\n    # the number of different chunks, a sequence of 256 bytes (64 words)\n    # of chunk numbers indexed by their original chunk position, and a\n    # sequence of 256-bit chunks (8 words each).\n\n    # Compression is normally good: in a typical charset, large ranges of\n    # Unicode will be either completely excluded (e.g. if only cyrillic\n    # letters are to be matched), or completely included (e.g. if large\n    # subranges of Kanji match). These ranges will be represented by\n    # chunks of all one-bits or all zero-bits.\n\n    # Matching can be also done efficiently: the more significant byte of\n    # the Unicode character is an index into the chunk number, and the\n    # less significant byte is a bit index in the chunk (just like the\n    # CHARSET matching).\n\n    charmap = bytes(charmap) # should be hashable\n    comps = {}\n    mapping = bytearray(256)\n    block = 0\n    data = bytearray()\n    for i in range(0, 65536, 256):\n        chunk = charmap[i: i + 256]\n        if chunk in comps:\n            mapping[i // 256] = comps[chunk]\n        else:\n            mapping[i // 256] = comps[chunk] = block\n            block += 1\n            data += chunk\n    data = _mk_bitmap(data)\n    data[0:0] = [block] + _bytes_to_codes(mapping)\n    out.append((BIGCHARSET, data))\n    out += tail\n    return out, hascased\n\n_CODEBITS = _sre.CODESIZE * 8\nMAXCODE = (1 << _CODEBITS) - 1\n_BITS_TRANS = b'0' + b'1' * 255\ndef _mk_bitmap(bits, _CODEBITS=_CODEBITS, _int=int):\n    s = bits.translate(_BITS_TRANS)[::-1]\n    return [_int(s[i - _CODEBITS: i], 2)\n            for i in range(len(s), 0, -_CODEBITS)]\n\ndef _bytes_to_codes(b):\n    # Convert block indices to word array\n    a = memoryview(b).cast('I')\n    assert a.itemsize == _sre.CODESIZE\n    assert len(a) * a.itemsize == len(b)\n    return a.tolist()\n\ndef _simple(p):\n    # check if this subpattern is a \"simple\" operator\n    if len(p) != 1:\n        return False\n    op, av = p[0]\n    if op is SUBPATTERN:\n        return av[0] is None and _simple(av[-1])\n    return op in _UNIT_CODES\n\ndef _generate_overlap_table(prefix):\n    \"\"\"\n    Generate an overlap table for the following prefix.\n    An overlap table is a table of the same size as the prefix which\n    informs about the potential self-overlap for each index in the prefix:\n    - if overlap[i] == 0, prefix[i:] can't overlap prefix[0:...]\n    - if overlap[i] == k with 0 < k <= i, prefix[i-k+1:i+1] overlaps with\n      prefix[0:k]\n    \"\"\"\n    table = [0] * len(prefix)\n    for i in range(1, len(prefix)):\n        idx = table[i - 1]\n        while prefix[i] != prefix[idx]:\n            if idx == 0:\n                table[i] = 0\n                break\n            idx = table[idx - 1]\n        else:\n            table[i] = idx + 1\n    return table\n\ndef _get_iscased(flags):\n    if not flags & SRE_FLAG_IGNORECASE:\n        return None\n    elif flags & SRE_FLAG_UNICODE:\n        return _sre.unicode_iscased\n    else:\n        return _sre.ascii_iscased\n\ndef _get_literal_prefix(pattern, flags):\n    # look for literal prefix\n    prefix = []\n    prefixappend = prefix.append\n    prefix_skip = None\n    iscased = _get_iscased(flags)\n    for op, av in pattern.data:\n        if op is LITERAL:\n            if iscased and iscased(av):\n                break\n            prefixappend(av)\n        elif op is SUBPATTERN:\n            group, add_flags, del_flags, p = av\n            flags1 = _combine_flags(flags, add_flags, del_flags)\n            if flags1 & SRE_FLAG_IGNORECASE and flags1 & SRE_FLAG_LOCALE:\n                break\n            prefix1, prefix_skip1, got_all = _get_literal_prefix(p, flags1)\n            if prefix_skip is None:\n                if group is not None:\n                    prefix_skip = len(prefix)\n                elif prefix_skip1 is not None:\n                    prefix_skip = len(prefix) + prefix_skip1\n            prefix.extend(prefix1)\n            if not got_all:\n                break\n        else:\n            break\n    else:\n        return prefix, prefix_skip, True\n    return prefix, prefix_skip, False\n\ndef _get_charset_prefix(pattern, flags):\n    while True:\n        if not pattern.data:\n            return None\n        op, av = pattern.data[0]\n        if op is not SUBPATTERN:\n            break\n        group, add_flags, del_flags, pattern = av\n        flags = _combine_flags(flags, add_flags, del_flags)\n        if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\n            return None\n\n    iscased = _get_iscased(flags)\n    if op is LITERAL:\n        if iscased and iscased(av):\n            return None\n        return [(op, av)]\n    elif op is BRANCH:\n        charset = []\n        charsetappend = charset.append\n        for p in av[1]:\n            if not p:\n                return None\n            op, av = p[0]\n            if op is LITERAL and not (iscased and iscased(av)):\n                charsetappend((op, av))\n            else:\n                return None\n        return charset\n    elif op is IN:\n        charset = av\n        if iscased:\n            for op, av in charset:\n                if op is LITERAL:\n                    if iscased(av):\n                        return None\n                elif op is RANGE:\n                    if av[1] > 0xffff:\n                        return None\n                    if any(map(iscased, range(av[0], av[1]+1))):\n                        return None\n        return charset\n    return None\n\ndef _compile_info(code, pattern, flags):\n    # internal: compile an info block.  in the current version,\n    # this contains min/max pattern width, and an optional literal\n    # prefix or a character map\n    lo, hi = pattern.getwidth()\n    if hi > MAXCODE:\n        hi = MAXCODE\n    if lo == 0:\n        code.extend([INFO, 4, 0, lo, hi])\n        return\n    # look for a literal prefix\n    prefix = []\n    prefix_skip = 0\n    charset = [] # not used\n    if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):\n        # look for literal prefix\n        prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)\n        # if no prefix, look for charset prefix\n        if not prefix:\n            charset = _get_charset_prefix(pattern, flags)\n##     if prefix:\n##         print(\"*** PREFIX\", prefix, prefix_skip)\n##     if charset:\n##         print(\"*** CHARSET\", charset)\n    # add an info block\n    emit = code.append\n    emit(INFO)\n    skip = len(code); emit(0)\n    # literal flag\n    mask = 0\n    if prefix:\n        mask = SRE_INFO_PREFIX\n        if prefix_skip is None and got_all:\n            mask = mask | SRE_INFO_LITERAL\n    elif charset:\n        mask = mask | SRE_INFO_CHARSET\n    emit(mask)\n    # pattern length\n    if lo < MAXCODE:\n        emit(lo)\n    else:\n        emit(MAXCODE)\n        prefix = prefix[:MAXCODE]\n    emit(hi)\n    # add literal prefix\n    if prefix:\n        emit(len(prefix)) # length\n        if prefix_skip is None:\n            prefix_skip =  len(prefix)\n        emit(prefix_skip) # skip\n        code.extend(prefix)\n        # generate overlap table\n        code.extend(_generate_overlap_table(prefix))\n    elif charset:\n        charset, hascased = _optimize_charset(charset)\n        assert not hascased\n        _compile_charset(charset, flags, code)\n    code[skip] = len(code) - skip\n\ndef isstring(obj):\n    return isinstance(obj, (str, bytes))\n\ndef _code(p, flags):\n\n    flags = p.state.flags | flags\n    code = []\n\n    # compile info block\n    _compile_info(code, p, flags)\n\n    # compile the pattern\n    _compile(code, p.data, flags)\n\n    code.append(SUCCESS)\n\n    return code\n\ndef _hex_code(code):\n    return '[%s]' % ', '.join('%#0*x' % (_sre.CODESIZE*2+2, x) for x in code)\n\ndef dis(code):\n    import sys\n\n    labels = set()\n    level = 0\n    offset_width = len(str(len(code) - 1))\n\n    def dis_(start, end):\n        def print_(*args, to=None):\n            if to is not None:\n                labels.add(to)\n                args += ('(to %d)' % (to,),)\n            print('%*d%s ' % (offset_width, start, ':' if start in labels else '.'),\n                  end='  '*(level-1))\n            print(*args)\n\n        def print_2(*args):\n            print(end=' '*(offset_width + 2*level))\n            print(*args)\n\n        nonlocal level\n        level += 1\n        i = start\n        while i < end:\n            start = i\n            op = code[i]\n            i += 1\n            op = OPCODES[op]\n            if op in (SUCCESS, FAILURE, ANY, ANY_ALL,\n                      MAX_UNTIL, MIN_UNTIL, NEGATE):\n                print_(op)\n            elif op in (LITERAL, NOT_LITERAL,\n                        LITERAL_IGNORE, NOT_LITERAL_IGNORE,\n                        LITERAL_UNI_IGNORE, NOT_LITERAL_UNI_IGNORE,\n                        LITERAL_LOC_IGNORE, NOT_LITERAL_LOC_IGNORE):\n                arg = code[i]\n                i += 1\n                print_(op, '%#02x (%r)' % (arg, chr(arg)))\n            elif op is AT:\n                arg = code[i]\n                i += 1\n                arg = str(ATCODES[arg])\n                assert arg[:3] == 'AT_'\n                print_(op, arg[3:])\n            elif op is CATEGORY:\n                arg = code[i]\n                i += 1\n                arg = str(CHCODES[arg])\n                assert arg[:9] == 'CATEGORY_'\n                print_(op, arg[9:])\n            elif op in (IN, IN_IGNORE, IN_UNI_IGNORE, IN_LOC_IGNORE):\n                skip = code[i]\n                print_(op, skip, to=i+skip)\n                dis_(i+1, i+skip)\n                i += skip\n            elif op in (RANGE, RANGE_UNI_IGNORE):\n                lo, hi = code[i: i+2]\n                i += 2\n                print_(op, '%#02x %#02x (%r-%r)' % (lo, hi, chr(lo), chr(hi)))\n            elif op is CHARSET:\n                print_(op, _hex_code(code[i: i + 256//_CODEBITS]))\n                i += 256//_CODEBITS\n            elif op is BIGCHARSET:\n                arg = code[i]\n                i += 1\n                mapping = list(b''.join(x.to_bytes(_sre.CODESIZE, sys.byteorder)\n                                        for x in code[i: i + 256//_sre.CODESIZE]))\n                print_(op, arg, mapping)\n                i += 256//_sre.CODESIZE\n                level += 1\n                for j in range(arg):\n                    print_2(_hex_code(code[i: i + 256//_CODEBITS]))\n                    i += 256//_CODEBITS\n                level -= 1\n            elif op in (MARK, GROUPREF, GROUPREF_IGNORE, GROUPREF_UNI_IGNORE,\n                        GROUPREF_LOC_IGNORE):\n                arg = code[i]\n                i += 1\n                print_(op, arg)\n            elif op is JUMP:\n                skip = code[i]\n                print_(op, skip, to=i+skip)\n                i += 1\n            elif op is BRANCH:\n                skip = code[i]\n                print_(op, skip, to=i+skip)\n                while skip:\n                    dis_(i+1, i+skip)\n                    i += skip\n                    start = i\n                    skip = code[i]\n                    if skip:\n                        print_('branch', skip, to=i+skip)\n                    else:\n                        print_(FAILURE)\n                i += 1\n            elif op in (REPEAT, REPEAT_ONE, MIN_REPEAT_ONE,\n                        POSSESSIVE_REPEAT, POSSESSIVE_REPEAT_ONE):\n                skip, min, max = code[i: i+3]\n                if max == MAXREPEAT:\n                    max = 'MAXREPEAT'\n                print_(op, skip, min, max, to=i+skip)\n                dis_(i+3, i+skip)\n                i += skip\n            elif op is GROUPREF_EXISTS:\n                arg, skip = code[i: i+2]\n                print_(op, arg, skip, to=i+skip)\n                i += 2\n            elif op in (ASSERT, ASSERT_NOT):\n                skip, arg = code[i: i+2]\n                print_(op, skip, arg, to=i+skip)\n                dis_(i+2, i+skip)\n                i += skip\n            elif op is ATOMIC_GROUP:\n                skip = code[i]\n                print_(op, skip, to=i+skip)\n                dis_(i+1, i+skip)\n                i += skip\n            elif op is INFO:\n                skip, flags, min, max = code[i: i+4]\n                if max == MAXREPEAT:\n                    max = 'MAXREPEAT'\n                print_(op, skip, bin(flags), min, max, to=i+skip)\n                start = i+4\n                if flags & SRE_INFO_PREFIX:\n                    prefix_len, prefix_skip = code[i+4: i+6]\n                    print_2('  prefix_skip', prefix_skip)\n                    start = i + 6\n                    prefix = code[start: start+prefix_len]\n                    print_2('  prefix',\n                            '[%s]' % ', '.join('%#02x' % x for x in prefix),\n                            '(%r)' % ''.join(map(chr, prefix)))\n                    start += prefix_len\n                    print_2('  overlap', code[start: start+prefix_len])\n                    start += prefix_len\n                if flags & SRE_INFO_CHARSET:\n                    level += 1\n                    print_2('in')\n                    dis_(start, i+skip)\n                    level -= 1\n                i += skip\n            else:\n                raise ValueError(op)\n\n        level -= 1\n\n    dis_(0, len(code))\n\n\ndef compile(p, flags=0):\n    # internal: convert pattern list to internal format\n\n    if isstring(p):\n        pattern = p\n        p = _parser.parse(p, flags)\n    else:\n        pattern = None\n\n    code = _code(p, flags)\n\n    if flags & SRE_FLAG_DEBUG:\n        print()\n        dis(code)\n\n    # map in either direction\n    groupindex = p.state.groupdict\n    indexgroup = [None] * p.state.groups\n    for k, i in groupindex.items():\n        indexgroup[i] = k\n\n    return _sre.compile(\n        pattern, flags | p.state.flags, code,\n        p.state.groups-1,\n        groupindex, tuple(indexgroup)\n        )\n", 765], "/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py": ["#\n# Secret Labs' Regular Expression Engine\n#\n# convert re-style regular expression to sre pattern\n#\n# Copyright (c) 1998-2001 by Secret Labs AB.  All rights reserved.\n#\n# See the __init__.py file for information on usage and redistribution.\n#\n\n\"\"\"Internal support module for sre\"\"\"\n\n# XXX: show string offset and offending character for all errors\n\nfrom ._constants import *\n\nSPECIAL_CHARS = \".\\\\[{()*+?^$|\"\nREPEAT_CHARS = \"*+?{\"\n\nDIGITS = frozenset(\"0123456789\")\n\nOCTDIGITS = frozenset(\"01234567\")\nHEXDIGITS = frozenset(\"0123456789abcdefABCDEF\")\nASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT, POSSESSIVE_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\n\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),\n    r\"\\r\": (LITERAL, ord(\"\\r\")),\n    r\"\\t\": (LITERAL, ord(\"\\t\")),\n    r\"\\v\": (LITERAL, ord(\"\\v\")),\n    r\"\\\\\": (LITERAL, ord(\"\\\\\"))\n}\n\nCATEGORIES = {\n    r\"\\A\": (AT, AT_BEGINNING_STRING), # start of string\n    r\"\\b\": (AT, AT_BOUNDARY),\n    r\"\\B\": (AT, AT_NON_BOUNDARY),\n    r\"\\d\": (IN, [(CATEGORY, CATEGORY_DIGIT)]),\n    r\"\\D\": (IN, [(CATEGORY, CATEGORY_NOT_DIGIT)]),\n    r\"\\s\": (IN, [(CATEGORY, CATEGORY_SPACE)]),\n    r\"\\S\": (IN, [(CATEGORY, CATEGORY_NOT_SPACE)]),\n    r\"\\w\": (IN, [(CATEGORY, CATEGORY_WORD)]),\n    r\"\\W\": (IN, [(CATEGORY, CATEGORY_NOT_WORD)]),\n    r\"\\Z\": (AT, AT_END_STRING), # end of string\n}\n\nFLAGS = {\n    # standard flags\n    \"i\": SRE_FLAG_IGNORECASE,\n    \"L\": SRE_FLAG_LOCALE,\n    \"m\": SRE_FLAG_MULTILINE,\n    \"s\": SRE_FLAG_DOTALL,\n    \"x\": SRE_FLAG_VERBOSE,\n    # extensions\n    \"a\": SRE_FLAG_ASCII,\n    \"t\": SRE_FLAG_TEMPLATE,\n    \"u\": SRE_FLAG_UNICODE,\n}\n\nTYPE_FLAGS = SRE_FLAG_ASCII | SRE_FLAG_LOCALE | SRE_FLAG_UNICODE\nGLOBAL_FLAGS = SRE_FLAG_DEBUG | SRE_FLAG_TEMPLATE\n\n# Maximal value returned by SubPattern.getwidth().\n# Must be larger than MAXREPEAT, MAXCODE and sys.maxsize.\nMAXWIDTH = 1 << 64\n\nclass State:\n    # keeps track of state for parsing\n    def __init__(self):\n        self.flags = 0\n        self.groupdict = {}\n        self.groupwidths = [None]  # group 0\n        self.lookbehindgroups = None\n        self.grouprefpos = {}\n    @property\n    def groups(self):\n        return len(self.groupwidths)\n    def opengroup(self, name=None):\n        gid = self.groups\n        self.groupwidths.append(None)\n        if self.groups > MAXGROUPS:\n            raise error(\"too many groups\")\n        if name is not None:\n            ogid = self.groupdict.get(name, None)\n            if ogid is not None:\n                raise error(\"redefinition of group name %r as group %d; \"\n                            \"was group %d\" % (name, gid,  ogid))\n            self.groupdict[name] = gid\n        return gid\n    def closegroup(self, gid, p):\n        self.groupwidths[gid] = p.getwidth()\n    def checkgroup(self, gid):\n        return gid < self.groups and self.groupwidths[gid] is not None\n\n    def checklookbehindgroup(self, gid, source):\n        if self.lookbehindgroups is not None:\n            if not self.checkgroup(gid):\n                raise source.error('cannot refer to an open group')\n            if gid >= self.lookbehindgroups:\n                raise source.error('cannot refer to group defined in the same '\n                                   'lookbehind subpattern')\n\nclass SubPattern:\n    # a subpattern, in intermediate form\n    def __init__(self, state, data=None):\n        self.state = state\n        if data is None:\n            data = []\n        self.data = data\n        self.width = None\n\n    def dump(self, level=0):\n        seqtypes = (tuple, list)\n        for op, av in self.data:\n            print(level*\"  \" + str(op), end='')\n            if op is IN:\n                # member sublanguage\n                print()\n                for op, a in av:\n                    print((level+1)*\"  \" + str(op), a)\n            elif op is BRANCH:\n                print()\n                for i, a in enumerate(av[1]):\n                    if i:\n                        print(level*\"  \" + \"OR\")\n                    a.dump(level+1)\n            elif op is GROUPREF_EXISTS:\n                condgroup, item_yes, item_no = av\n                print('', condgroup)\n                item_yes.dump(level+1)\n                if item_no:\n                    print(level*\"  \" + \"ELSE\")\n                    item_no.dump(level+1)\n            elif isinstance(av, SubPattern):\n                print()\n                av.dump(level+1)\n            elif isinstance(av, seqtypes):\n                nl = False\n                for a in av:\n                    if isinstance(a, SubPattern):\n                        if not nl:\n                            print()\n                        a.dump(level+1)\n                        nl = True\n                    else:\n                        if not nl:\n                            print(' ', end='')\n                        print(a, end='')\n                        nl = False\n                if not nl:\n                    print()\n            else:\n                print('', av)\n    def __repr__(self):\n        return repr(self.data)\n    def __len__(self):\n        return len(self.data)\n    def __delitem__(self, index):\n        del self.data[index]\n    def __getitem__(self, index):\n        if isinstance(index, slice):\n            return SubPattern(self.state, self.data[index])\n        return self.data[index]\n    def __setitem__(self, index, code):\n        self.data[index] = code\n    def insert(self, index, code):\n        self.data.insert(index, code)\n    def append(self, code):\n        self.data.append(code)\n    def getwidth(self):\n        # determine the width (min, max) for this subpattern\n        if self.width is not None:\n            return self.width\n        lo = hi = 0\n        for op, av in self.data:\n            if op is BRANCH:\n                i = MAXWIDTH\n                j = 0\n                for av in av[1]:\n                    l, h = av.getwidth()\n                    i = min(i, l)\n                    j = max(j, h)\n                lo = lo + i\n                hi = hi + j\n            elif op is ATOMIC_GROUP:\n                i, j = av.getwidth()\n                lo = lo + i\n                hi = hi + j\n            elif op is SUBPATTERN:\n                i, j = av[-1].getwidth()\n                lo = lo + i\n                hi = hi + j\n            elif op in _REPEATCODES:\n                i, j = av[2].getwidth()\n                lo = lo + i * av[0]\n                if av[1] == MAXREPEAT and j:\n                    hi = MAXWIDTH\n                else:\n                    hi = hi + j * av[1]\n            elif op in _UNITCODES:\n                lo = lo + 1\n                hi = hi + 1\n            elif op is GROUPREF:\n                i, j = self.state.groupwidths[av]\n                lo = lo + i\n                hi = hi + j\n            elif op is GROUPREF_EXISTS:\n                i, j = av[1].getwidth()\n                if av[2] is not None:\n                    l, h = av[2].getwidth()\n                    i = min(i, l)\n                    j = max(j, h)\n                else:\n                    i = 0\n                lo = lo + i\n                hi = hi + j\n            elif op is SUCCESS:\n                break\n        self.width = min(lo, MAXWIDTH), min(hi, MAXWIDTH)\n        return self.width\n\nclass Tokenizer:\n    def __init__(self, string):\n        self.istext = isinstance(string, str)\n        self.string = string\n        if not self.istext:\n            string = str(string, 'latin1')\n        self.decoded_string = string\n        self.index = 0\n        self.next = None\n        self.__next()\n    def __next(self):\n        index = self.index\n        try:\n            char = self.decoded_string[index]\n        except IndexError:\n            self.next = None\n            return\n        if char == \"\\\\\":\n            index += 1\n            try:\n                char += self.decoded_string[index]\n            except IndexError:\n                raise error(\"bad escape (end of pattern)\",\n                            self.string, len(self.string) - 1) from None\n        self.index = index + 1\n        self.next = char\n    def match(self, char):\n        if char == self.next:\n            self.__next()\n            return True\n        return False\n    def get(self):\n        this = self.next\n        self.__next()\n        return this\n    def getwhile(self, n, charset):\n        result = ''\n        for _ in range(n):\n            c = self.next\n            if c not in charset:\n                break\n            result += c\n            self.__next()\n        return result\n    def getuntil(self, terminator, name):\n        result = ''\n        while True:\n            c = self.next\n            self.__next()\n            if c is None:\n                if not result:\n                    raise self.error(\"missing \" + name)\n                raise self.error(\"missing %s, unterminated name\" % terminator,\n                                 len(result))\n            if c == terminator:\n                if not result:\n                    raise self.error(\"missing \" + name, 1)\n                break\n            result += c\n        return result\n    @property\n    def pos(self):\n        return self.index - len(self.next or '')\n    def tell(self):\n        return self.index - len(self.next or '')\n    def seek(self, index):\n        self.index = index\n        self.__next()\n\n    def error(self, msg, offset=0):\n        if not self.istext:\n            msg = msg.encode('ascii', 'backslashreplace').decode('ascii')\n        return error(msg, self.string, self.tell() - offset)\n\n    def checkgroupname(self, name, offset, nested):\n        if not name.isidentifier():\n            msg = \"bad character in group name %r\" % name\n            raise self.error(msg, len(name) + offset)\n        if not (self.istext or name.isascii()):\n            import warnings\n            warnings.warn(\n                \"bad character in group name %a at position %d\" %\n                (name, self.tell() - len(name) - offset),\n                DeprecationWarning, stacklevel=nested + 7\n            )\n\ndef _class_escape(source, escape):\n    # handle escape code inside character class\n    code = ESCAPES.get(escape)\n    if code:\n        return code\n    code = CATEGORIES.get(escape)\n    if code and code[0] is IN:\n        return code\n    try:\n        c = escape[1:2]\n        if c == \"x\":\n            # hexadecimal escape (exactly two digits)\n            escape += source.getwhile(2, HEXDIGITS)\n            if len(escape) != 4:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            return LITERAL, int(escape[2:], 16)\n        elif c == \"u\" and source.istext:\n            # unicode escape (exactly four digits)\n            escape += source.getwhile(4, HEXDIGITS)\n            if len(escape) != 6:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            return LITERAL, int(escape[2:], 16)\n        elif c == \"U\" and source.istext:\n            # unicode escape (exactly eight digits)\n            escape += source.getwhile(8, HEXDIGITS)\n            if len(escape) != 10:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            c = int(escape[2:], 16)\n            chr(c) # raise ValueError for invalid code\n            return LITERAL, c\n        elif c == \"N\" and source.istext:\n            import unicodedata\n            # named unicode escape e.g. \\N{EM DASH}\n            if not source.match('{'):\n                raise source.error(\"missing {\")\n            charname = source.getuntil('}', 'character name')\n            try:\n                c = ord(unicodedata.lookup(charname))\n            except (KeyError, TypeError):\n                raise source.error(\"undefined character name %r\" % charname,\n                                   len(charname) + len(r'\\N{}')) from None\n            return LITERAL, c\n        elif c in OCTDIGITS:\n            # octal escape (up to three digits)\n            escape += source.getwhile(2, OCTDIGITS)\n            c = int(escape[1:], 8)\n            if c > 0o377:\n                raise source.error('octal escape value %s outside of '\n                                   'range 0-0o377' % escape, len(escape))\n            return LITERAL, c\n        elif c in DIGITS:\n            raise ValueError\n        if len(escape) == 2:\n            if c in ASCIILETTERS:\n                raise source.error('bad escape %s' % escape, len(escape))\n            return LITERAL, ord(escape[1])\n    except ValueError:\n        pass\n    raise source.error(\"bad escape %s\" % escape, len(escape))\n\ndef _escape(source, escape, state):\n    # handle escape code in expression\n    code = CATEGORIES.get(escape)\n    if code:\n        return code\n    code = ESCAPES.get(escape)\n    if code:\n        return code\n    try:\n        c = escape[1:2]\n        if c == \"x\":\n            # hexadecimal escape\n            escape += source.getwhile(2, HEXDIGITS)\n            if len(escape) != 4:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            return LITERAL, int(escape[2:], 16)\n        elif c == \"u\" and source.istext:\n            # unicode escape (exactly four digits)\n            escape += source.getwhile(4, HEXDIGITS)\n            if len(escape) != 6:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            return LITERAL, int(escape[2:], 16)\n        elif c == \"U\" and source.istext:\n            # unicode escape (exactly eight digits)\n            escape += source.getwhile(8, HEXDIGITS)\n            if len(escape) != 10:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            c = int(escape[2:], 16)\n            chr(c) # raise ValueError for invalid code\n            return LITERAL, c\n        elif c == \"N\" and source.istext:\n            import unicodedata\n            # named unicode escape e.g. \\N{EM DASH}\n            if not source.match('{'):\n                raise source.error(\"missing {\")\n            charname = source.getuntil('}', 'character name')\n            try:\n                c = ord(unicodedata.lookup(charname))\n            except (KeyError, TypeError):\n                raise source.error(\"undefined character name %r\" % charname,\n                                   len(charname) + len(r'\\N{}')) from None\n            return LITERAL, c\n        elif c == \"0\":\n            # octal escape\n            escape += source.getwhile(2, OCTDIGITS)\n            return LITERAL, int(escape[1:], 8)\n        elif c in DIGITS:\n            # octal escape *or* decimal group reference (sigh)\n            if source.next in DIGITS:\n                escape += source.get()\n                if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and\n                    source.next in OCTDIGITS):\n                    # got three octal digits; this is an octal escape\n                    escape += source.get()\n                    c = int(escape[1:], 8)\n                    if c > 0o377:\n                        raise source.error('octal escape value %s outside of '\n                                           'range 0-0o377' % escape,\n                                           len(escape))\n                    return LITERAL, c\n            # not an octal escape, so this is a group reference\n            group = int(escape[1:])\n            if group < state.groups:\n                if not state.checkgroup(group):\n                    raise source.error(\"cannot refer to an open group\",\n                                       len(escape))\n                state.checklookbehindgroup(group, source)\n                return GROUPREF, group\n            raise source.error(\"invalid group reference %d\" % group, len(escape) - 1)\n        if len(escape) == 2:\n            if c in ASCIILETTERS:\n                raise source.error(\"bad escape %s\" % escape, len(escape))\n            return LITERAL, ord(escape[1])\n    except ValueError:\n        pass\n    raise source.error(\"bad escape %s\" % escape, len(escape))\n\ndef _uniq(items):\n    return list(dict.fromkeys(items))\n\ndef _parse_sub(source, state, verbose, nested):\n    # parse an alternation: a|b|c\n\n    items = []\n    itemsappend = items.append\n    sourcematch = source.match\n    start = source.tell()\n    while True:\n        itemsappend(_parse(source, state, verbose, nested + 1,\n                           not nested and not items))\n        if not sourcematch(\"|\"):\n            break\n        if not nested:\n            verbose = state.flags & SRE_FLAG_VERBOSE\n\n    if len(items) == 1:\n        return items[0]\n\n    subpattern = SubPattern(state)\n\n    # check if all items share a common prefix\n    while True:\n        prefix = None\n        for item in items:\n            if not item:\n                break\n            if prefix is None:\n                prefix = item[0]\n            elif item[0] != prefix:\n                break\n        else:\n            # all subitems start with a common \"prefix\".\n            # move it out of the branch\n            for item in items:\n                del item[0]\n            subpattern.append(prefix)\n            continue # check next one\n        break\n\n    # check if the branch can be replaced by a character set\n    set = []\n    for item in items:\n        if len(item) != 1:\n            break\n        op, av = item[0]\n        if op is LITERAL:\n            set.append((op, av))\n        elif op is IN and av[0][0] is not NEGATE:\n            set.extend(av)\n        else:\n            break\n    else:\n        # we can store this as a character set instead of a\n        # branch (the compiler may optimize this even more)\n        subpattern.append((IN, _uniq(set)))\n        return subpattern\n\n    subpattern.append((BRANCH, (None, items)))\n    return subpattern\n\ndef _parse(source, state, verbose, nested, first=False):\n    # parse a simple pattern\n    subpattern = SubPattern(state)\n\n    # precompute constants into local variables\n    subpatternappend = subpattern.append\n    sourceget = source.get\n    sourcematch = source.match\n    _len = len\n    _ord = ord\n\n    while True:\n\n        this = source.next\n        if this is None:\n            break # end of pattern\n        if this in \"|)\":\n            break # end of subpattern\n        sourceget()\n\n        if verbose:\n            # skip whitespace and comments\n            if this in WHITESPACE:\n                continue\n            if this == \"#\":\n                while True:\n                    this = sourceget()\n                    if this is None or this == \"\\n\":\n                        break\n                continue\n\n        if this[0] == \"\\\\\":\n            code = _escape(source, this, state)\n            subpatternappend(code)\n\n        elif this not in SPECIAL_CHARS:\n            subpatternappend((LITERAL, _ord(this)))\n\n        elif this == \"[\":\n            here = source.tell() - 1\n            # character set\n            set = []\n            setappend = set.append\n##          if sourcematch(\":\"):\n##              pass # handle character classes\n            if source.next == '[':\n                import warnings\n                warnings.warn(\n                    'Possible nested set at position %d' % source.tell(),\n                    FutureWarning, stacklevel=nested + 6\n                )\n            negate = sourcematch(\"^\")\n            # check remaining characters\n            while True:\n                this = sourceget()\n                if this is None:\n                    raise source.error(\"unterminated character set\",\n                                       source.tell() - here)\n                if this == \"]\" and set:\n                    break\n                elif this[0] == \"\\\\\":\n                    code1 = _class_escape(source, this)\n                else:\n                    if set and this in '-&~|' and source.next == this:\n                        import warnings\n                        warnings.warn(\n                            'Possible set %s at position %d' % (\n                                'difference' if this == '-' else\n                                'intersection' if this == '&' else\n                                'symmetric difference' if this == '~' else\n                                'union',\n                                source.tell() - 1),\n                            FutureWarning, stacklevel=nested + 6\n                        )\n                    code1 = LITERAL, _ord(this)\n                if sourcematch(\"-\"):\n                    # potential range\n                    that = sourceget()\n                    if that is None:\n                        raise source.error(\"unterminated character set\",\n                                           source.tell() - here)\n                    if that == \"]\":\n                        if code1[0] is IN:\n                            code1 = code1[1][0]\n                        setappend(code1)\n                        setappend((LITERAL, _ord(\"-\")))\n                        break\n                    if that[0] == \"\\\\\":\n                        code2 = _class_escape(source, that)\n                    else:\n                        if that == '-':\n                            import warnings\n                            warnings.warn(\n                                'Possible set difference at position %d' % (\n                                    source.tell() - 2),\n                                FutureWarning, stacklevel=nested + 6\n                            )\n                        code2 = LITERAL, _ord(that)\n                    if code1[0] != LITERAL or code2[0] != LITERAL:\n                        msg = \"bad character range %s-%s\" % (this, that)\n                        raise source.error(msg, len(this) + 1 + len(that))\n                    lo = code1[1]\n                    hi = code2[1]\n                    if hi < lo:\n                        msg = \"bad character range %s-%s\" % (this, that)\n                        raise source.error(msg, len(this) + 1 + len(that))\n                    setappend((RANGE, (lo, hi)))\n                else:\n                    if code1[0] is IN:\n                        code1 = code1[1][0]\n                    setappend(code1)\n\n            set = _uniq(set)\n            # XXX: <fl> should move set optimization to compiler!\n            if _len(set) == 1 and set[0][0] is LITERAL:\n                # optimization\n                if negate:\n                    subpatternappend((NOT_LITERAL, set[0][1]))\n                else:\n                    subpatternappend(set[0])\n            else:\n                if negate:\n                    set.insert(0, (NEGATE, None))\n                # charmap optimization can't be added here because\n                # global flags still are not known\n                subpatternappend((IN, set))\n\n        elif this in REPEAT_CHARS:\n            # repeat previous item\n            here = source.tell()\n            if this == \"?\":\n                min, max = 0, 1\n            elif this == \"*\":\n                min, max = 0, MAXREPEAT\n\n            elif this == \"+\":\n                min, max = 1, MAXREPEAT\n            elif this == \"{\":\n                if source.next == \"}\":\n                    subpatternappend((LITERAL, _ord(this)))\n                    continue\n\n                min, max = 0, MAXREPEAT\n                lo = hi = \"\"\n                while source.next in DIGITS:\n                    lo += sourceget()\n                if sourcematch(\",\"):\n                    while source.next in DIGITS:\n                        hi += sourceget()\n                else:\n                    hi = lo\n                if not sourcematch(\"}\"):\n                    subpatternappend((LITERAL, _ord(this)))\n                    source.seek(here)\n                    continue\n\n                if lo:\n                    min = int(lo)\n                    if min >= MAXREPEAT:\n                        raise OverflowError(\"the repetition number is too large\")\n                if hi:\n                    max = int(hi)\n                    if max >= MAXREPEAT:\n                        raise OverflowError(\"the repetition number is too large\")\n                    if max < min:\n                        raise source.error(\"min repeat greater than max repeat\",\n                                           source.tell() - here)\n            else:\n                raise AssertionError(\"unsupported quantifier %r\" % (char,))\n            # figure out which item to repeat\n            if subpattern:\n                item = subpattern[-1:]\n            else:\n                item = None\n            if not item or item[0][0] is AT:\n                raise source.error(\"nothing to repeat\",\n                                   source.tell() - here + len(this))\n            if item[0][0] in _REPEATCODES:\n                raise source.error(\"multiple repeat\",\n                                   source.tell() - here + len(this))\n            if item[0][0] is SUBPATTERN:\n                group, add_flags, del_flags, p = item[0][1]\n                if group is None and not add_flags and not del_flags:\n                    item = p\n            if sourcematch(\"?\"):\n                # Non-Greedy Match\n                subpattern[-1] = (MIN_REPEAT, (min, max, item))\n            elif sourcematch(\"+\"):\n                # Possessive Match (Always Greedy)\n                subpattern[-1] = (POSSESSIVE_REPEAT, (min, max, item))\n            else:\n                # Greedy Match\n                subpattern[-1] = (MAX_REPEAT, (min, max, item))\n\n        elif this == \".\":\n            subpatternappend((ANY, None))\n\n        elif this == \"(\":\n            start = source.tell() - 1\n            capture = True\n            atomic = False\n            name = None\n            add_flags = 0\n            del_flags = 0\n            if sourcematch(\"?\"):\n                # options\n                char = sourceget()\n                if char is None:\n                    raise source.error(\"unexpected end of pattern\")\n                if char == \"P\":\n                    # python extensions\n                    if sourcematch(\"<\"):\n                        # named group: skip forward to end of name\n                        name = source.getuntil(\">\", \"group name\")\n                        source.checkgroupname(name, 1, nested)\n                    elif sourcematch(\"=\"):\n                        # named backreference\n                        name = source.getuntil(\")\", \"group name\")\n                        source.checkgroupname(name, 1, nested)\n                        gid = state.groupdict.get(name)\n                        if gid is None:\n                            msg = \"unknown group name %r\" % name\n                            raise source.error(msg, len(name) + 1)\n                        if not state.checkgroup(gid):\n                            raise source.error(\"cannot refer to an open group\",\n                                               len(name) + 1)\n                        state.checklookbehindgroup(gid, source)\n                        subpatternappend((GROUPREF, gid))\n                        continue\n\n                    else:\n                        char = sourceget()\n                        if char is None:\n                            raise source.error(\"unexpected end of pattern\")\n                        raise source.error(\"unknown extension ?P\" + char,\n                                           len(char) + 2)\n                elif char == \":\":\n                    # non-capturing group\n                    capture = False\n                elif char == \"#\":\n                    # comment\n                    while True:\n                        if source.next is None:\n                            raise source.error(\"missing ), unterminated comment\",\n                                               source.tell() - start)\n                        if sourceget() == \")\":\n                            break\n                    continue\n\n                elif char in \"=!<\":\n                    # lookahead assertions\n                    dir = 1\n                    if char == \"<\":\n                        char = sourceget()\n                        if char is None:\n                            raise source.error(\"unexpected end of pattern\")\n                        if char not in \"=!\":\n                            raise source.error(\"unknown extension ?<\" + char,\n                                               len(char) + 2)\n                        dir = -1 # lookbehind\n                        lookbehindgroups = state.lookbehindgroups\n                        if lookbehindgroups is None:\n                            state.lookbehindgroups = state.groups\n                    p = _parse_sub(source, state, verbose, nested + 1)\n                    if dir < 0:\n                        if lookbehindgroups is None:\n                            state.lookbehindgroups = None\n                    if not sourcematch(\")\"):\n                        raise source.error(\"missing ), unterminated subpattern\",\n                                           source.tell() - start)\n                    if char == \"=\":\n                        subpatternappend((ASSERT, (dir, p)))\n                    else:\n                        subpatternappend((ASSERT_NOT, (dir, p)))\n                    continue\n\n                elif char == \"(\":\n                    # conditional backreference group\n                    condname = source.getuntil(\")\", \"group name\")\n                    if condname.isidentifier():\n                        source.checkgroupname(condname, 1, nested)\n                        condgroup = state.groupdict.get(condname)\n                        if condgroup is None:\n                            msg = \"unknown group name %r\" % condname\n                            raise source.error(msg, len(condname) + 1)\n                    else:\n                        try:\n                            condgroup = int(condname)\n                            if condgroup < 0:\n                                raise ValueError\n                        except ValueError:\n                            msg = \"bad character in group name %r\" % condname\n                            raise source.error(msg, len(condname) + 1) from None\n                        if not condgroup:\n                            raise source.error(\"bad group number\",\n                                               len(condname) + 1)\n                        if condgroup >= MAXGROUPS:\n                            msg = \"invalid group reference %d\" % condgroup\n                            raise source.error(msg, len(condname) + 1)\n                        if condgroup not in state.grouprefpos:\n                            state.grouprefpos[condgroup] = (\n                                source.tell() - len(condname) - 1\n                            )\n                        if not (condname.isdecimal() and condname.isascii()):\n                            import warnings\n                            warnings.warn(\n                                \"bad character in group name %s at position %d\" %\n                                (repr(condname) if source.istext else ascii(condname),\n                                 source.tell() - len(condname) - 1),\n                                DeprecationWarning, stacklevel=nested + 6\n                            )\n                    state.checklookbehindgroup(condgroup, source)\n                    item_yes = _parse(source, state, verbose, nested + 1)\n                    if source.match(\"|\"):\n                        item_no = _parse(source, state, verbose, nested + 1)\n                        if source.next == \"|\":\n                            raise source.error(\"conditional backref with more than two branches\")\n                    else:\n                        item_no = None\n                    if not source.match(\")\"):\n                        raise source.error(\"missing ), unterminated subpattern\",\n                                           source.tell() - start)\n                    subpatternappend((GROUPREF_EXISTS, (condgroup, item_yes, item_no)))\n                    continue\n\n                elif char == \">\":\n                    # non-capturing, atomic group\n                    capture = False\n                    atomic = True\n                elif char in FLAGS or char == \"-\":\n                    # flags\n                    flags = _parse_flags(source, state, char)\n                    if flags is None:  # global flags\n                        if not first or subpattern:\n                            raise source.error('global flags not at the start '\n                                               'of the expression',\n                                               source.tell() - start)\n                        verbose = state.flags & SRE_FLAG_VERBOSE\n                        continue\n\n                    add_flags, del_flags = flags\n                    capture = False\n                else:\n                    raise source.error(\"unknown extension ?\" + char,\n                                       len(char) + 1)\n\n            # parse group contents\n            if capture:\n                try:\n                    group = state.opengroup(name)\n                except error as err:\n                    raise source.error(err.msg, len(name) + 1) from None\n            else:\n                group = None\n            sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\n                           not (del_flags & SRE_FLAG_VERBOSE))\n            p = _parse_sub(source, state, sub_verbose, nested + 1)\n            if not source.match(\")\"):\n                raise source.error(\"missing ), unterminated subpattern\",\n                                   source.tell() - start)\n            if group is not None:\n                state.closegroup(group, p)\n            if atomic:\n                assert group is None\n                subpatternappend((ATOMIC_GROUP, p))\n            else:\n                subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))\n\n        elif this == \"^\":\n            subpatternappend((AT, AT_BEGINNING))\n\n        elif this == \"$\":\n            subpatternappend((AT, AT_END))\n\n        else:\n            raise AssertionError(\"unsupported special character %r\" % (char,))\n\n    # unpack non-capturing groups\n    for i in range(len(subpattern))[::-1]:\n        op, av = subpattern[i]\n        if op is SUBPATTERN:\n            group, add_flags, del_flags, p = av\n            if group is None and not add_flags and not del_flags:\n                subpattern[i: i+1] = p\n\n    return subpattern\n\ndef _parse_flags(source, state, char):\n    sourceget = source.get\n    add_flags = 0\n    del_flags = 0\n    if char != \"-\":\n        while True:\n            flag = FLAGS[char]\n            if source.istext:\n                if char == 'L':\n                    msg = \"bad inline flags: cannot use 'L' flag with a str pattern\"\n                    raise source.error(msg)\n            else:\n                if char == 'u':\n                    msg = \"bad inline flags: cannot use 'u' flag with a bytes pattern\"\n                    raise source.error(msg)\n            add_flags |= flag\n            if (flag & TYPE_FLAGS) and (add_flags & TYPE_FLAGS) != flag:\n                msg = \"bad inline flags: flags 'a', 'u' and 'L' are incompatible\"\n                raise source.error(msg)\n            char = sourceget()\n            if char is None:\n                raise source.error(\"missing -, : or )\")\n            if char in \")-:\":\n                break\n            if char not in FLAGS:\n                msg = \"unknown flag\" if char.isalpha() else \"missing -, : or )\"\n                raise source.error(msg, len(char))\n    if char == \")\":\n        state.flags |= add_flags\n        return None\n    if add_flags & GLOBAL_FLAGS:\n        raise source.error(\"bad inline flags: cannot turn on global flag\", 1)\n    if char == \"-\":\n        char = sourceget()\n        if char is None:\n            raise source.error(\"missing flag\")\n        if char not in FLAGS:\n            msg = \"unknown flag\" if char.isalpha() else \"missing flag\"\n            raise source.error(msg, len(char))\n        while True:\n            flag = FLAGS[char]\n            if flag & TYPE_FLAGS:\n                msg = \"bad inline flags: cannot turn off flags 'a', 'u' and 'L'\"\n                raise source.error(msg)\n            del_flags |= flag\n            char = sourceget()\n            if char is None:\n                raise source.error(\"missing :\")\n            if char == \":\":\n                break\n            if char not in FLAGS:\n                msg = \"unknown flag\" if char.isalpha() else \"missing :\"\n                raise source.error(msg, len(char))\n    assert char == \":\"\n    if del_flags & GLOBAL_FLAGS:\n        raise source.error(\"bad inline flags: cannot turn off global flag\", 1)\n    if add_flags & del_flags:\n        raise source.error(\"bad inline flags: flag turned on and off\", 1)\n    return add_flags, del_flags\n\ndef fix_flags(src, flags):\n    # Check and fix flags according to the type of pattern (str or bytes)\n    if isinstance(src, str):\n        if flags & SRE_FLAG_LOCALE:\n            raise ValueError(\"cannot use LOCALE flag with a str pattern\")\n        if not flags & SRE_FLAG_ASCII:\n            flags |= SRE_FLAG_UNICODE\n        elif flags & SRE_FLAG_UNICODE:\n            raise ValueError(\"ASCII and UNICODE flags are incompatible\")\n    else:\n        if flags & SRE_FLAG_UNICODE:\n            raise ValueError(\"cannot use UNICODE flag with a bytes pattern\")\n        if flags & SRE_FLAG_LOCALE and flags & SRE_FLAG_ASCII:\n            raise ValueError(\"ASCII and LOCALE flags are incompatible\")\n    return flags\n\ndef parse(str, flags=0, state=None):\n    # parse 're' pattern into list of (opcode, argument) tuples\n\n    source = Tokenizer(str)\n\n    if state is None:\n        state = State()\n    state.flags = flags\n    state.str = str\n\n    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\n    p.state.flags = fix_flags(str, p.state.flags)\n\n    if source.next is not None:\n        assert source.next == \")\"\n        raise source.error(\"unbalanced parenthesis\")\n\n    for g in p.state.grouprefpos:\n        if g >= p.state.groups:\n            msg = \"invalid group reference %d\" % g\n            raise error(msg, str, p.state.grouprefpos[g])\n\n    if flags & SRE_FLAG_DEBUG:\n        p.dump()\n\n    return p\n\ndef parse_template(source, state):\n    # parse 're' replacement string into list of literals and\n    # group references\n    s = Tokenizer(source)\n    sget = s.get\n    groups = []\n    literals = []\n    literal = []\n    lappend = literal.append\n    def addgroup(index, pos):\n        if index > state.groups:\n            raise s.error(\"invalid group reference %d\" % index, pos)\n        if literal:\n            literals.append(''.join(literal))\n            del literal[:]\n        groups.append((len(literals), index))\n        literals.append(None)\n    groupindex = state.groupindex\n    while True:\n        this = sget()\n        if this is None:\n            break # end of replacement string\n        if this[0] == \"\\\\\":\n            # group\n            c = this[1]\n            if c == \"g\":\n                if not s.match(\"<\"):\n                    raise s.error(\"missing <\")\n                name = s.getuntil(\">\", \"group name\")\n                if name.isidentifier():\n                    s.checkgroupname(name, 1, -1)\n                    try:\n                        index = groupindex[name]\n                    except KeyError:\n                        raise IndexError(\"unknown group name %r\" % name) from None\n                else:\n                    try:\n                        index = int(name)\n                        if index < 0:\n                            raise ValueError\n                    except ValueError:\n                        raise s.error(\"bad character in group name %r\" % name,\n                                      len(name) + 1) from None\n                    if index >= MAXGROUPS:\n                        raise s.error(\"invalid group reference %d\" % index,\n                                      len(name) + 1)\n                    if not (name.isdecimal() and name.isascii()):\n                        import warnings\n                        warnings.warn(\n                            \"bad character in group name %s at position %d\" %\n                            (repr(name) if s.istext else ascii(name),\n                             s.tell() - len(name) - 1),\n                            DeprecationWarning, stacklevel=5\n                        )\n                addgroup(index, len(name) + 1)\n            elif c == \"0\":\n                if s.next in OCTDIGITS:\n                    this += sget()\n                    if s.next in OCTDIGITS:\n                        this += sget()\n                lappend(chr(int(this[1:], 8) & 0xff))\n            elif c in DIGITS:\n                isoctal = False\n                if s.next in DIGITS:\n                    this += sget()\n                    if (c in OCTDIGITS and this[2] in OCTDIGITS and\n                        s.next in OCTDIGITS):\n                        this += sget()\n                        isoctal = True\n                        c = int(this[1:], 8)\n                        if c > 0o377:\n                            raise s.error('octal escape value %s outside of '\n                                          'range 0-0o377' % this, len(this))\n                        lappend(chr(c))\n                if not isoctal:\n                    addgroup(int(this[1:]), len(this) - 1)\n            else:\n                try:\n                    this = chr(ESCAPES[this][1])\n                except KeyError:\n                    if c in ASCIILETTERS:\n                        raise s.error('bad escape %s' % this, len(this)) from None\n                lappend(this)\n        else:\n            lappend(this)\n    if literal:\n        literals.append(''.join(literal))\n    if not isinstance(source, str):\n        # The tokenizer implicitly decodes bytes objects as latin-1, we must\n        # therefore re-encode the final representation.\n        literals = [None if s is None else s.encode('latin-1') for s in literals]\n    return groups, literals\n\ndef expand_template(template, match):\n    g = match.group\n    empty = match.string[:0]\n    groups, literals = template\n    literals = literals[:]\n    try:\n        for index, group in groups:\n            literals[index] = g(group) or empty\n    except IndexError:\n        raise error(\"invalid group reference %d\" % index) from None\n    return empty.join(literals)\n", 1109], "/tmp/\u4e0b\u8f7d/readmdict-master/readmdict/__main__.py": ["\"\"\"Main.\"\"\"\nimport argparse\nimport codecs\nimport os\nimport os.path\nimport sys\n\nfrom readmdict import MDD, MDX, unicode\n\n\ndef main():\n    \"\"\"\n    Run main.\n\n    From readmict.py\n    \"\"\"\n\n    def passcode(s):\n        try:\n            regcode, userid = s.split(',')\n        except Exception:\n            raise argparse.ArgumentTypeError(\"Passcode must be regcode,userid\")\n        try:\n            regcode = codecs.decode(regcode, 'hex')\n        except Exception:\n            raise argparse.ArgumentTypeError(\"regcode must be a 32 bytes hexadecimal string\")\n        return regcode, userid\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-x', '--extract', action=\"store_true\",\n                        help='extract mdx to source format and extract files from mdd')\n    parser.add_argument('-s', '--substyle', action=\"store_true\",\n                        help='substitute style definition if present')\n    parser.add_argument('-d', '--datafolder', default=\"data\",\n                        help='folder to extract data files from mdd')\n    parser.add_argument('-e', '--encoding', default=\"\",\n                        help='folder to extract data files from mdd')\n    parser.add_argument('-p', '--passcode', default=None, type=passcode,\n                        help='register_code,email_or_deviceid')\n    parser.add_argument(\"filename\", nargs='?', help=\"mdx file name\")\n    args = parser.parse_args()\n\n    # use GUI to select file, default to extract\n    if not args.filename:\n        # import Tkinter\n        # import tkFileDialog\n        # root = Tkinter.Tk()\n        import tkinter\n        from tkinter import filedialog as tkFileDialog\n        root = tkinter.Tk()\n        root.withdraw()\n        args.filename = tkFileDialog.askopenfilename(parent=root)\n        args.extract = True\n\n    if not os.path.exists(args.filename):\n        print(\"Please specify a valid MDX/MDD file\")\n\n    base, ext = os.path.splitext(args.filename)\n\n    # read mdx file\n    if ext.lower() == os.path.extsep + 'mdx':\n        mdx = MDX(args.filename, args.encoding, args.substyle, args.passcode)\n        if type(args.filename) is unicode:\n            bfname = args.filename.encode('utf-8')\n        else:\n            bfname = args.filename\n        print('======== %s ========' % bfname)\n        print('  Number of Entries : %d' % len(mdx))\n        for key, value in mdx.header.items():\n            print('  %s : %s' % (key.decode(), value.decode()))\n    else:\n        mdx = None\n\n    # find companion mdd file\n    mdd_filename = ''.join([base, os.path.extsep, 'mdd'])\n    if os.path.exists(mdd_filename):\n        mdd = MDD(mdd_filename, args.passcode)\n        if type(mdd_filename) is unicode:\n            bfname = mdd_filename.encode('utf-8')\n        else:\n            bfname = mdd_filename\n        print('======== %s ========' % bfname)\n        print('  Number of Entries : %d' % len(mdd))\n        for key, value in mdd.header.items():\n            print('  %s : %s' % (key, value))\n    else:\n        mdd = None\n\n    if args.extract:\n        # write out glos\n        if mdx:\n            output_fname = ''.join([base, os.path.extsep, 'txt'])\n            tf = open(output_fname, 'wb')\n            for key, value in mdx.items():\n                tf.write(key)\n                tf.write(b'\\r\\n')\n                tf.write(value)\n                if not value.endswith(b'\\n'):\n                    tf.write(b'\\r\\n')\n                tf.write(b'</>\\r\\n')\n            tf.close()\n            # write out style\n            if mdx.header.get('StyleSheet'):\n                style_fname = ''.join([base, '_style', os.path.extsep, 'txt'])\n                sf = open(style_fname, 'wb')\n                sf.write(b'\\r\\n'.join(mdx.header['StyleSheet'].splitlines()))\n                sf.close()\n        # write out optional data files\n        if mdd:\n            datafolder = os.path.join(os.path.dirname(args.filename), args.datafolder)\n            if not os.path.exists(datafolder):\n                os.makedirs(datafolder)\n            for key, value in mdd.items():\n                fname = key.decode('utf-8').replace('\\\\', os.path.sep)\n                dfname = datafolder + fname\n                if not os.path.exists(os.path.dirname(dfname)):\n                    os.makedirs(os.path.dirname(dfname))\n                df = open(dfname, 'wb')\n                df.write(value)\n                df.close()\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n", 124], "/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py": ["#\n# Module providing various facilities to other parts of the package\n#\n# multiprocessing/util.py\n#\n# Copyright (c) 2006-2008, R Oudkerk\n# Licensed to PSF under a Contributor Agreement.\n#\n\nimport os\nimport itertools\nimport sys\nimport weakref\nimport atexit\nimport threading        # we want threading to install it's\n                        # cleanup function before multiprocessing does\nfrom subprocess import _args_from_interpreter_flags\n\nfrom . import process\n\n__all__ = [\n    'sub_debug', 'debug', 'info', 'sub_warning', 'get_logger',\n    'log_to_stderr', 'get_temp_dir', 'register_after_fork',\n    'is_exiting', 'Finalize', 'ForkAwareThreadLock', 'ForkAwareLocal',\n    'close_all_fds_except', 'SUBDEBUG', 'SUBWARNING',\n    ]\n\n#\n# Logging\n#\n\nNOTSET = 0\nSUBDEBUG = 5\nDEBUG = 10\nINFO = 20\nSUBWARNING = 25\n\nLOGGER_NAME = 'multiprocessing'\nDEFAULT_LOGGING_FORMAT = '[%(levelname)s/%(processName)s] %(message)s'\n\n_logger = None\n_log_to_stderr = False\n\ndef sub_debug(msg, *args):\n    if _logger:\n        _logger.log(SUBDEBUG, msg, *args)\n\ndef debug(msg, *args):\n    if _logger:\n        _logger.log(DEBUG, msg, *args)\n\ndef info(msg, *args):\n    if _logger:\n        _logger.log(INFO, msg, *args)\n\ndef sub_warning(msg, *args):\n    if _logger:\n        _logger.log(SUBWARNING, msg, *args)\n\ndef get_logger():\n    '''\n    Returns logger used by multiprocessing\n    '''\n    global _logger\n    import logging\n\n    logging._acquireLock()\n    try:\n        if not _logger:\n\n            _logger = logging.getLogger(LOGGER_NAME)\n            _logger.propagate = 0\n\n            # XXX multiprocessing should cleanup before logging\n            if hasattr(atexit, 'unregister'):\n                atexit.unregister(_exit_function)\n                atexit.register(_exit_function)\n            else:\n                atexit._exithandlers.remove((_exit_function, (), {}))\n                atexit._exithandlers.append((_exit_function, (), {}))\n\n    finally:\n        logging._releaseLock()\n\n    return _logger\n\ndef log_to_stderr(level=None):\n    '''\n    Turn on logging and add a handler which prints to stderr\n    '''\n    global _log_to_stderr\n    import logging\n\n    logger = get_logger()\n    formatter = logging.Formatter(DEFAULT_LOGGING_FORMAT)\n    handler = logging.StreamHandler()\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n\n    if level:\n        logger.setLevel(level)\n    _log_to_stderr = True\n    return _logger\n\n\n# Abstract socket support\n\ndef _platform_supports_abstract_sockets():\n    if sys.platform == \"linux\":\n        return True\n    if hasattr(sys, 'getandroidapilevel'):\n        return True\n    return False\n\n\ndef is_abstract_socket_namespace(address):\n    if not address:\n        return False\n    if isinstance(address, bytes):\n        return address[0] == 0\n    elif isinstance(address, str):\n        return address[0] == \"\\0\"\n    raise TypeError(f'address type of {address!r} unrecognized')\n\n\nabstract_sockets_supported = _platform_supports_abstract_sockets()\n\n#\n# Function returning a temp directory which will be removed on exit\n#\n\ndef _remove_temp_dir(rmtree, tempdir):\n    rmtree(tempdir)\n\n    current_process = process.current_process()\n    # current_process() can be None if the finalizer is called\n    # late during Python finalization\n    if current_process is not None:\n        current_process._config['tempdir'] = None\n\ndef get_temp_dir():\n    # get name of a temp directory which will be automatically cleaned up\n    tempdir = process.current_process()._config.get('tempdir')\n    if tempdir is None:\n        import shutil, tempfile\n        tempdir = tempfile.mkdtemp(prefix='pymp-')\n        info('created temp directory %s', tempdir)\n        # keep a strong reference to shutil.rmtree(), since the finalizer\n        # can be called late during Python shutdown\n        Finalize(None, _remove_temp_dir, args=(shutil.rmtree, tempdir),\n                 exitpriority=-100)\n        process.current_process()._config['tempdir'] = tempdir\n    return tempdir\n\n#\n# Support for reinitialization of objects when bootstrapping a child process\n#\n\n_afterfork_registry = weakref.WeakValueDictionary()\n_afterfork_counter = itertools.count()\n\ndef _run_after_forkers():\n    items = list(_afterfork_registry.items())\n    items.sort()\n    for (index, ident, func), obj in items:\n        try:\n            func(obj)\n        except Exception as e:\n            info('after forker raised exception %s', e)\n\ndef register_after_fork(obj, func):\n    _afterfork_registry[(next(_afterfork_counter), id(obj), func)] = obj\n\n#\n# Finalization using weakrefs\n#\n\n_finalizer_registry = {}\n_finalizer_counter = itertools.count()\n\n\nclass Finalize(object):\n    '''\n    Class which supports object finalization using weakrefs\n    '''\n    def __init__(self, obj, callback, args=(), kwargs=None, exitpriority=None):\n        if (exitpriority is not None) and not isinstance(exitpriority,int):\n            raise TypeError(\n                \"Exitpriority ({0!r}) must be None or int, not {1!s}\".format(\n                    exitpriority, type(exitpriority)))\n\n        if obj is not None:\n            self._weakref = weakref.ref(obj, self)\n        elif exitpriority is None:\n            raise ValueError(\"Without object, exitpriority cannot be None\")\n\n        self._callback = callback\n        self._args = args\n        self._kwargs = kwargs or {}\n        self._key = (exitpriority, next(_finalizer_counter))\n        self._pid = os.getpid()\n\n        _finalizer_registry[self._key] = self\n\n    def __call__(self, wr=None,\n                 # Need to bind these locally because the globals can have\n                 # been cleared at shutdown\n                 _finalizer_registry=_finalizer_registry,\n                 sub_debug=sub_debug, getpid=os.getpid):\n        '''\n        Run the callback unless it has already been called or cancelled\n        '''\n        try:\n            del _finalizer_registry[self._key]\n        except KeyError:\n            sub_debug('finalizer no longer registered')\n        else:\n            if self._pid != getpid():\n                sub_debug('finalizer ignored because different process')\n                res = None\n            else:\n                sub_debug('finalizer calling %s with args %s and kwargs %s',\n                          self._callback, self._args, self._kwargs)\n                res = self._callback(*self._args, **self._kwargs)\n            self._weakref = self._callback = self._args = \\\n                            self._kwargs = self._key = None\n            return res\n\n    def cancel(self):\n        '''\n        Cancel finalization of the object\n        '''\n        try:\n            del _finalizer_registry[self._key]\n        except KeyError:\n            pass\n        else:\n            self._weakref = self._callback = self._args = \\\n                            self._kwargs = self._key = None\n\n    def still_active(self):\n        '''\n        Return whether this finalizer is still waiting to invoke callback\n        '''\n        return self._key in _finalizer_registry\n\n    def __repr__(self):\n        try:\n            obj = self._weakref()\n        except (AttributeError, TypeError):\n            obj = None\n\n        if obj is None:\n            return '<%s object, dead>' % self.__class__.__name__\n\n        x = '<%s object, callback=%s' % (\n                self.__class__.__name__,\n                getattr(self._callback, '__name__', self._callback))\n        if self._args:\n            x += ', args=' + str(self._args)\n        if self._kwargs:\n            x += ', kwargs=' + str(self._kwargs)\n        if self._key[0] is not None:\n            x += ', exitpriority=' + str(self._key[0])\n        return x + '>'\n\n\ndef _run_finalizers(minpriority=None):\n    '''\n    Run all finalizers whose exit priority is not None and at least minpriority\n\n    Finalizers with highest priority are called first; finalizers with\n    the same priority will be called in reverse order of creation.\n    '''\n    if _finalizer_registry is None:\n        # This function may be called after this module's globals are\n        # destroyed.  See the _exit_function function in this module for more\n        # notes.\n        return\n\n    if minpriority is None:\n        f = lambda p : p[0] is not None\n    else:\n        f = lambda p : p[0] is not None and p[0] >= minpriority\n\n    # Careful: _finalizer_registry may be mutated while this function\n    # is running (either by a GC run or by another thread).\n\n    # list(_finalizer_registry) should be atomic, while\n    # list(_finalizer_registry.items()) is not.\n    keys = [key for key in list(_finalizer_registry) if f(key)]\n    keys.sort(reverse=True)\n\n    for key in keys:\n        finalizer = _finalizer_registry.get(key)\n        # key may have been removed from the registry\n        if finalizer is not None:\n            sub_debug('calling %s', finalizer)\n            try:\n                finalizer()\n            except Exception:\n                import traceback\n                traceback.print_exc()\n\n    if minpriority is None:\n        _finalizer_registry.clear()\n\n#\n# Clean up on exit\n#\n\ndef is_exiting():\n    '''\n    Returns true if the process is shutting down\n    '''\n    return _exiting or _exiting is None\n\n_exiting = False\n\ndef _exit_function(info=info, debug=debug, _run_finalizers=_run_finalizers,\n                   active_children=process.active_children,\n                   current_process=process.current_process):\n    # We hold on to references to functions in the arglist due to the\n    # situation described below, where this function is called after this\n    # module's globals are destroyed.\n\n    global _exiting\n\n    if not _exiting:\n        _exiting = True\n\n        info('process shutting down')\n        debug('running all \"atexit\" finalizers with priority >= 0')\n        _run_finalizers(0)\n\n        if current_process() is not None:\n            # We check if the current process is None here because if\n            # it's None, any call to ``active_children()`` will raise\n            # an AttributeError (active_children winds up trying to\n            # get attributes from util._current_process).  One\n            # situation where this can happen is if someone has\n            # manipulated sys.modules, causing this module to be\n            # garbage collected.  The destructor for the module type\n            # then replaces all values in the module dict with None.\n            # For instance, after setuptools runs a test it replaces\n            # sys.modules with a copy created earlier.  See issues\n            # #9775 and #15881.  Also related: #4106, #9205, and\n            # #9207.\n\n            for p in active_children():\n                if p.daemon:\n                    info('calling terminate() for daemon %s', p.name)\n                    p._popen.terminate()\n\n            for p in active_children():\n                info('calling join() for process %s', p.name)\n                p.join()\n\n        debug('running the remaining \"atexit\" finalizers')\n        _run_finalizers()\n\natexit.register(_exit_function)\n\n#\n# Some fork aware types\n#\n\nclass ForkAwareThreadLock(object):\n    def __init__(self):\n        self._lock = threading.Lock()\n        self.acquire = self._lock.acquire\n        self.release = self._lock.release\n        register_after_fork(self, ForkAwareThreadLock._at_fork_reinit)\n\n    def _at_fork_reinit(self):\n        self._lock._at_fork_reinit()\n\n    def __enter__(self):\n        return self._lock.__enter__()\n\n    def __exit__(self, *args):\n        return self._lock.__exit__(*args)\n\n\nclass ForkAwareLocal(threading.local):\n    def __init__(self):\n        register_after_fork(self, lambda obj : obj.__dict__.clear())\n    def __reduce__(self):\n        return type(self), ()\n\n#\n# Close fds except those specified\n#\n\ntry:\n    MAXFD = os.sysconf(\"SC_OPEN_MAX\")\nexcept Exception:\n    MAXFD = 256\n\ndef close_all_fds_except(fds):\n    fds = list(fds) + [-1, MAXFD]\n    fds.sort()\n    assert fds[-1] == MAXFD, 'fd too large'\n    for i in range(len(fds) - 1):\n        os.closerange(fds[i]+1, fds[i+1])\n#\n# Close sys.stdin and replace stdin with os.devnull\n#\n\ndef _close_stdin():\n    if sys.stdin is None:\n        return\n\n    try:\n        sys.stdin.close()\n    except (OSError, ValueError):\n        pass\n\n    try:\n        fd = os.open(os.devnull, os.O_RDONLY)\n        try:\n            sys.stdin = open(fd, encoding=\"utf-8\", closefd=False)\n        except:\n            os.close(fd)\n            raise\n    except (OSError, ValueError):\n        pass\n\n#\n# Flush standard streams, if any\n#\n\ndef _flush_std_streams():\n    try:\n        sys.stdout.flush()\n    except (AttributeError, ValueError):\n        pass\n    try:\n        sys.stderr.flush()\n    except (AttributeError, ValueError):\n        pass\n\n#\n# Start a program with only specified fds kept open\n#\n\ndef spawnv_passfds(path, args, passfds):\n    import _posixsubprocess\n    import subprocess\n    passfds = tuple(sorted(map(int, passfds)))\n    errpipe_read, errpipe_write = os.pipe()\n    try:\n        return _posixsubprocess.fork_exec(\n            args, [path], True, passfds, None, None,\n            -1, -1, -1, -1, -1, -1, errpipe_read, errpipe_write,\n            False, False, -1, None, None, None, -1, None,\n            subprocess._USE_VFORK)\n    finally:\n        os.close(errpipe_read)\n        os.close(errpipe_write)\n\n\ndef close_fds(*fds):\n    \"\"\"Close each file descriptor given as an argument\"\"\"\n    for fd in fds:\n        os.close(fd)\n\n\ndef _cleanup_tests():\n    \"\"\"Cleanup multiprocessing resources when multiprocessing tests\n    completed.\"\"\"\n\n    from test import support\n\n    # cleanup multiprocessing\n    process._cleanup()\n\n    # Stop the ForkServer process if it's running\n    from multiprocessing import forkserver\n    forkserver._forkserver._stop()\n\n    # Stop the ResourceTracker process if it's running\n    from multiprocessing import resource_tracker\n    resource_tracker._resource_tracker._stop()\n\n    # bpo-37421: Explicitly call _run_finalizers() to remove immediately\n    # temporary directories created by multiprocessing.util.get_temp_dir().\n    _run_finalizers()\n    support.gc_collect()\n\n    support.reap_children()\n", 491], "/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/process.py": ["#\n# Module providing the `Process` class which emulates `threading.Thread`\n#\n# multiprocessing/process.py\n#\n# Copyright (c) 2006-2008, R Oudkerk\n# Licensed to PSF under a Contributor Agreement.\n#\n\n__all__ = ['BaseProcess', 'current_process', 'active_children',\n           'parent_process']\n\n#\n# Imports\n#\n\nimport os\nimport sys\nimport signal\nimport itertools\nimport threading\nfrom _weakrefset import WeakSet\n\n#\n#\n#\n\ntry:\n    ORIGINAL_DIR = os.path.abspath(os.getcwd())\nexcept OSError:\n    ORIGINAL_DIR = None\n\n#\n# Public functions\n#\n\ndef current_process():\n    '''\n    Return process object representing the current process\n    '''\n    return _current_process\n\ndef active_children():\n    '''\n    Return list of process objects corresponding to live child processes\n    '''\n    _cleanup()\n    return list(_children)\n\n\ndef parent_process():\n    '''\n    Return process object representing the parent process\n    '''\n    return _parent_process\n\n#\n#\n#\n\ndef _cleanup():\n    # check for processes which have finished\n    for p in list(_children):\n        if (child_popen := p._popen) and child_popen.poll() is not None:\n            _children.discard(p)\n\n#\n# The `Process` class\n#\n\nclass BaseProcess(object):\n    '''\n    Process objects represent activity that is run in a separate process\n\n    The class is analogous to `threading.Thread`\n    '''\n    def _Popen(self):\n        raise NotImplementedError\n\n    def __init__(self, group=None, target=None, name=None, args=(), kwargs={},\n                 *, daemon=None):\n        assert group is None, 'group argument must be None for now'\n        count = next(_process_counter)\n        self._identity = _current_process._identity + (count,)\n        self._config = _current_process._config.copy()\n        self._parent_pid = os.getpid()\n        self._parent_name = _current_process.name\n        self._popen = None\n        self._closed = False\n        self._target = target\n        self._args = tuple(args)\n        self._kwargs = dict(kwargs)\n        self._name = name or type(self).__name__ + '-' + \\\n                     ':'.join(str(i) for i in self._identity)\n        if daemon is not None:\n            self.daemon = daemon\n        _dangling.add(self)\n\n    def _check_closed(self):\n        if self._closed:\n            raise ValueError(\"process object is closed\")\n\n    def run(self):\n        '''\n        Method to be run in sub-process; can be overridden in sub-class\n        '''\n        if self._target:\n            self._target(*self._args, **self._kwargs)\n\n    def start(self):\n        '''\n        Start child process\n        '''\n        self._check_closed()\n        assert self._popen is None, 'cannot start a process twice'\n        assert self._parent_pid == os.getpid(), \\\n               'can only start a process object created by current process'\n        assert not _current_process._config.get('daemon'), \\\n               'daemonic processes are not allowed to have children'\n        _cleanup()\n        self._popen = self._Popen(self)\n        self._sentinel = self._popen.sentinel\n        # Avoid a refcycle if the target function holds an indirect\n        # reference to the process object (see bpo-30775)\n        del self._target, self._args, self._kwargs\n        _children.add(self)\n\n    def terminate(self):\n        '''\n        Terminate process; sends SIGTERM signal or uses TerminateProcess()\n        '''\n        self._check_closed()\n        self._popen.terminate()\n\n    def kill(self):\n        '''\n        Terminate process; sends SIGKILL signal or uses TerminateProcess()\n        '''\n        self._check_closed()\n        self._popen.kill()\n\n    def join(self, timeout=None):\n        '''\n        Wait until child process terminates\n        '''\n        self._check_closed()\n        assert self._parent_pid == os.getpid(), 'can only join a child process'\n        assert self._popen is not None, 'can only join a started process'\n        res = self._popen.wait(timeout)\n        if res is not None:\n            _children.discard(self)\n\n    def is_alive(self):\n        '''\n        Return whether process is alive\n        '''\n        self._check_closed()\n        if self is _current_process:\n            return True\n        assert self._parent_pid == os.getpid(), 'can only test a child process'\n\n        if self._popen is None:\n            return False\n\n        returncode = self._popen.poll()\n        if returncode is None:\n            return True\n        else:\n            _children.discard(self)\n            return False\n\n    def close(self):\n        '''\n        Close the Process object.\n\n        This method releases resources held by the Process object.  It is\n        an error to call this method if the child process is still running.\n        '''\n        if self._popen is not None:\n            if self._popen.poll() is None:\n                raise ValueError(\"Cannot close a process while it is still running. \"\n                                 \"You should first call join() or terminate().\")\n            self._popen.close()\n            self._popen = None\n            del self._sentinel\n            _children.discard(self)\n        self._closed = True\n\n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    def name(self, name):\n        assert isinstance(name, str), 'name must be a string'\n        self._name = name\n\n    @property\n    def daemon(self):\n        '''\n        Return whether process is a daemon\n        '''\n        return self._config.get('daemon', False)\n\n    @daemon.setter\n    def daemon(self, daemonic):\n        '''\n        Set whether process is a daemon\n        '''\n        assert self._popen is None, 'process has already started'\n        self._config['daemon'] = daemonic\n\n    @property\n    def authkey(self):\n        return self._config['authkey']\n\n    @authkey.setter\n    def authkey(self, authkey):\n        '''\n        Set authorization key of process\n        '''\n        self._config['authkey'] = AuthenticationString(authkey)\n\n    @property\n    def exitcode(self):\n        '''\n        Return exit code of process or `None` if it has yet to stop\n        '''\n        self._check_closed()\n        if self._popen is None:\n            return self._popen\n        return self._popen.poll()\n\n    @property\n    def ident(self):\n        '''\n        Return identifier (PID) of process or `None` if it has yet to start\n        '''\n        self._check_closed()\n        if self is _current_process:\n            return os.getpid()\n        else:\n            return self._popen and self._popen.pid\n\n    pid = ident\n\n    @property\n    def sentinel(self):\n        '''\n        Return a file descriptor (Unix) or handle (Windows) suitable for\n        waiting for process termination.\n        '''\n        self._check_closed()\n        try:\n            return self._sentinel\n        except AttributeError:\n            raise ValueError(\"process not started\") from None\n\n    def __repr__(self):\n        exitcode = None\n        if self is _current_process:\n            status = 'started'\n        elif self._closed:\n            status = 'closed'\n        elif self._parent_pid != os.getpid():\n            status = 'unknown'\n        elif self._popen is None:\n            status = 'initial'\n        else:\n            exitcode = self._popen.poll()\n            if exitcode is not None:\n                status = 'stopped'\n            else:\n                status = 'started'\n\n        info = [type(self).__name__, 'name=%r' % self._name]\n        if self._popen is not None:\n            info.append('pid=%s' % self._popen.pid)\n        info.append('parent=%s' % self._parent_pid)\n        info.append(status)\n        if exitcode is not None:\n            exitcode = _exitcode_to_name.get(exitcode, exitcode)\n            info.append('exitcode=%s' % exitcode)\n        if self.daemon:\n            info.append('daemon')\n        return '<%s>' % ' '.join(info)\n\n    ##\n\n    def _bootstrap(self, parent_sentinel=None):\n        from . import util, context\n        global _current_process, _parent_process, _process_counter, _children\n\n        try:\n            if self._start_method is not None:\n                context._force_start_method(self._start_method)\n            _process_counter = itertools.count(1)\n            _children = set()\n            util._close_stdin()\n            old_process = _current_process\n            _current_process = self\n            _parent_process = _ParentProcess(\n                self._parent_name, self._parent_pid, parent_sentinel)\n            if threading._HAVE_THREAD_NATIVE_ID:\n                threading.main_thread()._set_native_id()\n            try:\n                self._after_fork()\n            finally:\n                # delay finalization of the old process object until after\n                # _run_after_forkers() is executed\n                del old_process\n            util.info('child process calling self.run()')\n            try:\n                self.run()\n                exitcode = 0\n            finally:\n                util._exit_function()\n        except SystemExit as e:\n            if e.code is None:\n                exitcode = 0\n            elif isinstance(e.code, int):\n                exitcode = e.code\n            else:\n                sys.stderr.write(str(e.code) + '\\n')\n                exitcode = 1\n        except:\n            exitcode = 1\n            import traceback\n            sys.stderr.write('Process %s:\\n' % self.name)\n            traceback.print_exc()\n        finally:\n            threading._shutdown()\n            util.info('process exiting with exitcode %d' % exitcode)\n            util._flush_std_streams()\n\n        return exitcode\n\n    @staticmethod\n    def _after_fork():\n        from . import util\n        util._finalizer_registry.clear()\n        util._run_after_forkers()\n\n\n#\n# We subclass bytes to avoid accidental transmission of auth keys over network\n#\n\nclass AuthenticationString(bytes):\n    def __reduce__(self):\n        from .context import get_spawning_popen\n        if get_spawning_popen() is None:\n            raise TypeError(\n                'Pickling an AuthenticationString object is '\n                'disallowed for security reasons'\n                )\n        return AuthenticationString, (bytes(self),)\n\n\n#\n# Create object representing the parent process\n#\n\nclass _ParentProcess(BaseProcess):\n\n    def __init__(self, name, pid, sentinel):\n        self._identity = ()\n        self._name = name\n        self._pid = pid\n        self._parent_pid = None\n        self._popen = None\n        self._closed = False\n        self._sentinel = sentinel\n        self._config = {}\n\n    def is_alive(self):\n        from multiprocessing.connection import wait\n        return not wait([self._sentinel], timeout=0)\n\n    @property\n    def ident(self):\n        return self._pid\n\n    def join(self, timeout=None):\n        '''\n        Wait until parent process terminates\n        '''\n        from multiprocessing.connection import wait\n        wait([self._sentinel], timeout=timeout)\n\n    pid = ident\n\n#\n# Create object representing the main process\n#\n\nclass _MainProcess(BaseProcess):\n\n    def __init__(self):\n        self._identity = ()\n        self._name = 'MainProcess'\n        self._parent_pid = None\n        self._popen = None\n        self._closed = False\n        self._config = {'authkey': AuthenticationString(os.urandom(32)),\n                        'semprefix': '/mp'}\n        # Note that some versions of FreeBSD only allow named\n        # semaphores to have names of up to 14 characters.  Therefore\n        # we choose a short prefix.\n        #\n        # On MacOSX in a sandbox it may be necessary to use a\n        # different prefix -- see #19478.\n        #\n        # Everything in self._config will be inherited by descendant\n        # processes.\n\n    def close(self):\n        pass\n\n\n_parent_process = None\n_current_process = _MainProcess()\n_process_counter = itertools.count(1)\n_children = set()\ndel _MainProcess\n\n#\n# Give names to some return codes\n#\n\n_exitcode_to_name = {}\n\nfor name, signum in list(signal.__dict__.items()):\n    if name[:3]=='SIG' and '_' not in name:\n        _exitcode_to_name[-signum] = f'-{name}'\ndel name, signum\n\n# For debug and leak testing\n_dangling = WeakSet()\n", 439]}, "functions": {"<lambda> (/home/tim/.local/lib/python3.11/site-packages/_distutils_hack/__init__.py:96)": ["/home/tim/.local/lib/python3.11/site-packages/_distutils_hack/__init__.py", 96], "find_spec (/home/tim/.local/lib/python3.11/site-packages/_distutils_hack/__init__.py:89)": ["/home/tim/.local/lib/python3.11/site-packages/_distutils_hack/__init__.py", 89], "<module> (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:1)": ["/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py", 1], "Salsa20 (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/pureSalsa20.py:195)": ["/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/pureSalsa20.py", 195], "<module> (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/pureSalsa20.py:1)": ["/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/pureSalsa20.py", 1], "MDD (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/readmdict.py:45)": ["/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/readmdict.py", 45], "MDX (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/readmdict.py:131)": ["/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/readmdict.py", 131], "<module> (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/readmdict.py:1)": ["/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/readmdict.py", 1], "register (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1390)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1390], "_get_handler (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1598)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1598], "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:272)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py", 272], "compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:225)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py", 225], "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1337)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1337], "normalize_encoding (/home/tim/mambaforge/envs/llm/lib/python3.11/encodings/__init__.py:43)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/encodings/__init__.py", 43], "_replace_encoding (/home/tim/mambaforge/envs/llm/lib/python3.11/locale.py:362)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/locale.py", 362], "normalize (/home/tim/mambaforge/envs/llm/lib/python3.11/locale.py:396)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/locale.py", 396], "_expand_lang (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:224)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py", 224], "find (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:479)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py", 479], "translation (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:519)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py", 519], "dgettext (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:578)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py", 578], "gettext (/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py:616)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/gettext.py", 616], "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1647)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1647], "add_argument_group (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1470)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1470], "_get_optional_kwargs (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1560)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1560], "_registry_get (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1394)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1394], "_pop_action_class (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1594)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1594], "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:841)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 841], "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1106)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1106], "get_terminal_size (/home/tim/mambaforge/envs/llm/lib/python3.11/shutil.py:1398)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/shutil.py", 1398], "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:206)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 206], "value (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:1255)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py", 1255], "__get__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:193)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py", 193], "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:164)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 164], "_get_formatter (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2587)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 2587], "_metavar_formatter (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:585)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 585], "<listcomp> (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:623)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 623], "format (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:594)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 594], "_format_args (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:601)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 601], "_check_conflict (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1607)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1607], "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1480)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1480], "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1669)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1669], "_add_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1848)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1848], "add_argument (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1419)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1419], "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1737)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1737], "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:961)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 961], "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:984)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 984], "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:926)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 926], "_get_positional_kwargs (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1544)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1544], "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1322)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1322], "_parse_optional (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2229)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 2229], "<listcomp> (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1861)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1861], "_get_positional_actions (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1860)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1860], "_get_nargs_pattern (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2332)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 2332], "<listcomp> (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2219)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 2219], "isstring (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:570)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py", 570], "__new__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:1093)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py", 1093], "__call__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:686)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py", 686], "__and__ (/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py:1515)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/enum.py", 1515], "__next (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:240)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py", 240], "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:231)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py", 231], "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:77)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py", 77], "tell (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:293)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py", 293], "__init__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:113)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py", 113], "get (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:261)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py", 261], "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:256)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py", 256], "groups (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:83)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py", 83], "opengroup (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:86)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py", 86], "append (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:176)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py", 176], "__len__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:164)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py", 164], "__getitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:168)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py", 168], "__setitem__ (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:172)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py", 172], "_parse (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:516)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py", 516], "_parse_sub (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:456)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py", 456], "getwidth (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:178)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py", 178], "closegroup (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:98)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py", 98], "fix_flags (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:963)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py", 963], "parse (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:979)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py", 979], "_compile_info (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:511)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py", 511], "_combine_flags (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:31)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py", 31], "_simple (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:398)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py", 398], "_compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:37)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py", 37], "_code (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:573)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py", 573], "compile (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:740)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py", 740], "match (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:163)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py", 163], "<listcomp> (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2223)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 2223], "_match_arguments_partial (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2213)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 2213], "identity (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1777)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1777], "_get_value (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2521)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 2521], "_check_value (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2547)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 2547], "_get_values (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2465)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 2465], "__call__ (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:955)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 955], "take_action (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1960)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1960], "consume_positionals (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:2062)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 2062], "_parse_known_args (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1913)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1913], "parse_known_args (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1875)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1875], "parse_args (/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py:1868)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/argparse.py", 1868], "_escape (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py:376)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_parser.py", 376], "_get_iscased (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:428)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py", 428], "_get_literal_prefix (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:436)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py", 436], "_get_charset_prefix (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:467)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py", 467], "_optimize_charset (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:243)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py", 243], "_compile_charset (/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py:216)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/_compiler.py", 216], "findall (/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py:208)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/re/__init__.py", 208], "<listcomp> (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:72)": ["/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py", 72], "<listcomp> (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:71)": ["/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py", 71], "padandsplit (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:55)": ["/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py", 55], "f (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:22)": ["/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py", 22], "K (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:33)": ["/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py", 33], "add (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:80)": ["/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py", 80], "rol (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:83)": ["/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py", 83], "Kp (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:44)": ["/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py", 44], "ripemd128 (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py:105)": ["/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/ripemd128.py", 105], "__init__ (/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/readmdict.py:142)": ["/tmp/\u4e0b\u8f7d/readmdict-master/./readmdict/readmdict.py", 142], "main (/tmp/\u4e0b\u8f7d/readmdict-master/readmdict/__main__.py:11)": ["/tmp/\u4e0b\u8f7d/readmdict-master/readmdict/__main__.py", 11], "<module> (/tmp/\u4e0b\u8f7d/readmdict-master/readmdict/__main__.py:1)": ["/tmp/\u4e0b\u8f7d/readmdict-master/readmdict/__main__.py", 1], "info (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py:52)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py", 52], "debug (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py:48)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py", 48], "<lambda> (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py:284)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py", 284], "<listcomp> (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py:291)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py", 291], "_run_finalizers (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py:268)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py", 268], "current_process (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/process.py:37)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/process.py", 37], "_cleanup (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/process.py:61)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/process.py", 61], "active_children (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/process.py:43)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/process.py", 43], "<lambda> (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py:282)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py", 282], "sub_debug (/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py:44)": ["/home/tim/mambaforge/envs/llm/lib/python3.11/multiprocessing/util.py", 44]}}}